
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba08  0800ba08  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba08  0800ba08  0001ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba10  0800ba10  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba10  0800ba10  0001ba10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ba18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b4  20000094  0800baac  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004848  0800baac  00024848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022378  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a9e  00000000  00000000  0004243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c8  00000000  00000000  00046ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  000487a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bf4  00000000  00000000  00049e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017d8c  00000000  00000000  00070a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d502b  00000000  00000000  000887f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  0015d8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8e8 	.word	0x0800b8e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b8e8 	.word	0x0800b8e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_Init+0x40>)
 8000d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_Init+0x40>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x40>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f94d 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f009 fc3c 	bl	800a5fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f965 	bl	800107e <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f92d 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000002c 	.word	0x2000002c
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000000 	.word	0x20000000

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20004064 	.word	0x20004064

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20004064 	.word	0x20004064

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_Delay+0x40>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000004 	.word	0x20000004

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e16b      	b.n	800138c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 815a 	bne.w	8001386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x4a>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d123      	bne.n	800112a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	69b9      	ldr	r1, [r7, #24]
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0203 	and.w	r2, r3, #3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00b      	beq.n	800117e <HAL_GPIO_Init+0xe6>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001172:	2b11      	cmp	r3, #17
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b12      	cmp	r3, #18
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_GPIO_Init+0x308>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a5e      	ldr	r2, [pc, #376]	; (80013a0 <HAL_GPIO_Init+0x308>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_GPIO_Init+0x308>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123a:	4a5a      	ldr	r2, [pc, #360]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <HAL_GPIO_Init+0x310>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_GPIO_Init+0x314>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4f      	ldr	r2, [pc, #316]	; (80013b0 <HAL_GPIO_Init+0x318>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4e      	ldr	r2, [pc, #312]	; (80013b4 <HAL_GPIO_Init+0x31c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4d      	ldr	r2, [pc, #308]	; (80013b8 <HAL_GPIO_Init+0x320>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_GPIO_Init+0x324>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <HAL_GPIO_Init+0x328>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <HAL_GPIO_Init+0x32c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x20a>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4934      	ldr	r1, [pc, #208]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <HAL_GPIO_Init+0x330>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae90 	bls.w	80010b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e001      	b.n	80013ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800142e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001430:	b08f      	sub	sp, #60	; 0x3c
 8001432:	af0a      	add	r7, sp, #40	; 0x28
 8001434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e054      	b.n	80014ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f009 fb22 	bl	800aaa4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2203      	movs	r2, #3
 8001464:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fc28 	bl	8004cd4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	687e      	ldr	r6, [r7, #4]
 800148c:	466d      	mov	r5, sp
 800148e:	f106 0410 	add.w	r4, r6, #16
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149e:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a2:	1d33      	adds	r3, r6, #4
 80014a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a6:	6838      	ldr	r0, [r7, #0]
 80014a8:	f003 fba2 	bl	8004bf0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fc1f 	bl	8004cf6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	687e      	ldr	r6, [r7, #4]
 80014c0:	466d      	mov	r5, sp
 80014c2:	f106 0410 	add.w	r4, r6, #16
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014d6:	1d33      	adds	r3, r6, #4
 80014d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f003 fd32 	bl	8004f44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014f2:	b590      	push	{r4, r7, lr}
 80014f4:	b089      	sub	sp, #36	; 0x24
 80014f6:	af04      	add	r7, sp, #16
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	4608      	mov	r0, r1
 80014fc:	4611      	mov	r1, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	4603      	mov	r3, r0
 8001502:	70fb      	strb	r3, [r7, #3]
 8001504:	460b      	mov	r3, r1
 8001506:	70bb      	strb	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_HCD_HC_Init+0x28>
 8001516:	2302      	movs	r3, #2
 8001518:	e07f      	b.n	800161a <HAL_HCD_HC_Init+0x128>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	333d      	adds	r3, #61	; 0x3d
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	3338      	adds	r3, #56	; 0x38
 8001546:	787a      	ldrb	r2, [r7, #1]
 8001548:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3340      	adds	r3, #64	; 0x40
 800155a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800155c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3339      	adds	r3, #57	; 0x39
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	333f      	adds	r3, #63	; 0x3f
 8001582:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001590:	b2d8      	uxtb	r0, r3
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	333a      	adds	r3, #58	; 0x3a
 80015a0:	4602      	mov	r2, r0
 80015a2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da0a      	bge.n	80015c2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	333b      	adds	r3, #59	; 0x3b
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e009      	b.n	80015d6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	333b      	adds	r3, #59	; 0x3b
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	333c      	adds	r3, #60	; 0x3c
 80015e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ea:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	787c      	ldrb	r4, [r7, #1]
 80015f2:	78ba      	ldrb	r2, [r7, #2]
 80015f4:	78f9      	ldrb	r1, [r7, #3]
 80015f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4623      	mov	r3, r4
 8001608:	f003 fe1e 	bl	8005248 <USB_HC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}

08001622 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_HCD_HC_Halt+0x1e>
 800163c:	2302      	movs	r3, #2
 800163e:	e00f      	b.n	8001660 <HAL_HCD_HC_Halt+0x3e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f004 f858 	bl	8005706 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	70fb      	strb	r3, [r7, #3]
 800167a:	460b      	mov	r3, r1
 800167c:	70bb      	strb	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	333b      	adds	r3, #59	; 0x3b
 8001692:	78ba      	ldrb	r2, [r7, #2]
 8001694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	333f      	adds	r3, #63	; 0x3f
 80016a6:	787a      	ldrb	r2, [r7, #1]
 80016a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016aa:	7c3b      	ldrb	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3342      	adds	r3, #66	; 0x42
 80016c0:	2203      	movs	r2, #3
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e009      	b.n	80016da <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016da:	787b      	ldrb	r3, [r7, #1]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f200 80d6 	bhi.w	800188e <HAL_HCD_HC_SubmitRequest+0x226>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	08001879 	.word	0x08001879
 80016f0:	08001765 	.word	0x08001765
 80016f4:	080017ef 	.word	0x080017ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016f8:	7c3b      	ldrb	r3, [r7, #16]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f040 80c9 	bne.w	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001700:	78bb      	ldrb	r3, [r7, #2]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80c5 	bne.w	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001708:	8b3b      	ldrh	r3, [r7, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3351      	adds	r3, #81	; 0x51
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3351      	adds	r3, #81	; 0x51
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3342      	adds	r3, #66	; 0x42
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800174c:	e0a1      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3342      	adds	r3, #66	; 0x42
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
      break;
 8001762:	e096      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001764:	78bb      	ldrb	r3, [r7, #2]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3351      	adds	r3, #81	; 0x51
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001794:	e07e      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e073      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3350      	adds	r3, #80	; 0x50
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10a      	bne.n	80017d8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e05d      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3342      	adds	r3, #66	; 0x42
 80017e8:	2202      	movs	r2, #2
 80017ea:	701a      	strb	r2, [r3, #0]
      break;
 80017ec:	e052      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ee:	78bb      	ldrb	r3, [r7, #2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d120      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3351      	adds	r3, #81	; 0x51
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800181e:	e039      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e02e      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3350      	adds	r3, #80	; 0x50
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3342      	adds	r3, #66	; 0x42
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e018      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e00d      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3342      	adds	r3, #66	; 0x42
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
      break;
 800188c:	e002      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800188e:	bf00      	nop
 8001890:	e000      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001892:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3344      	adds	r3, #68	; 0x44
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	8b39      	ldrh	r1, [r7, #24]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4403      	add	r3, r0
 80018b8:	3348      	adds	r3, #72	; 0x48
 80018ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	335c      	adds	r3, #92	; 0x5c
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	334c      	adds	r3, #76	; 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3339      	adds	r3, #57	; 0x39
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	335d      	adds	r3, #93	; 0x5d
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	3338      	adds	r3, #56	; 0x38
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	18d1      	adds	r1, r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	f003 fd98 	bl	800545c <USB_HC_StartXfer>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fab5 	bl	8004ebe <USB_GetMode>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 80f1 	bne.w	8001b3e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fa99 	bl	8004e98 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80e7 	beq.w	8001b3c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fa90 	bl	8004e98 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001982:	d104      	bne.n	800198e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800198c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fa80 	bl	8004e98 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a2:	d104      	bne.n	80019ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fa70 	bl	8004e98 <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019c2:	d104      	bne.n	80019ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fa60 	bl	8004e98 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fa52 	bl	8004e98 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019fe:	d117      	bne.n	8001a30 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a12:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f009 f8c3 	bl	800aba0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fb4b 	bl	80050bc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fa2f 	bl	8004e98 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d102      	bne.n	8001a4c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f001 f8c8 	bl	8002bdc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fa21 	bl	8004e98 <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d106      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f009 f881 	bl	800ab68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fa10 	bl	8004e98 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a82:	d138      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fe2b 	bl	80056e4 <USB_HC_ReadInterrupt>
 8001a8e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e025      	b.n	8001ae2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d018      	beq.n	8001adc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8cf 	bl	8001c6c <HCD_HC_IN_IRQHandler>
 8001ace:	e005      	b.n	8001adc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fc5f 	bl	800239a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3d4      	bcc.n	8001a96 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 f9cc 	bl	8004e98 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d101      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x1d6>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_HCD_IRQHandler+0x1d8>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d014      	beq.n	8001b3e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0210 	bic.w	r2, r2, #16
 8001b22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 ffad 	bl	8002a84 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0210 	orr.w	r2, r2, #16
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	e000      	b.n	8001b3e <HAL_HCD_IRQHandler+0x206>
      return;
 8001b3c:	bf00      	nop
    }
  }
}
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_HCD_Start+0x16>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e013      	b.n	8001b82 <HAL_HCD_Start+0x3e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 f8a3 	bl	8004cb2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fb06 	bl	8005184 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_HCD_Stop+0x16>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e00d      	b.n	8001bbc <HAL_HCD_Stop+0x32>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fee5 	bl	800597c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 faad 	bl	8005130 <USB_ResetPort>
 8001bd6:	4603      	mov	r3, r0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	335c      	adds	r3, #92	; 0x5c
 8001bfc:	781b      	ldrb	r3, [r3, #0]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	334c      	adds	r3, #76	; 0x4c
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 faef 	bl	8005224 <USB_GetCurrentFrame>
 8001c46:	4603      	mov	r3, r0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 faca 	bl	80051f6 <USB_GetHostSpeed>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d119      	bne.n	8001cd0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2304      	movs	r3, #4
 8001cac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	0151      	lsls	r1, r2, #5
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	440a      	add	r2, r1
 8001cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	60d3      	str	r3, [r2, #12]
 8001cce:	e095      	b.n	8001dfc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d109      	bne.n	8001cfa <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	6093      	str	r3, [r2, #8]
 8001cf8:	e080      	b.n	8001dfc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d134      	bne.n	8001d7a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	0151      	lsls	r1, r2, #5
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	440a      	add	r2, r1
 8001d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	335d      	adds	r3, #93	; 0x5d
 8001d40:	2205      	movs	r2, #5
 8001d42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	2310      	movs	r3, #16
 8001d54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	461a      	mov	r2, r3
 8001d64:	2308      	movs	r3, #8
 8001d66:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fcc7 	bl	8005706 <USB_HC_Halt>
 8001d78:	e040      	b.n	8001dfc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d90:	d134      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	0151      	lsls	r1, r2, #5
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	440a      	add	r2, r1
 8001da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fca2 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	335d      	adds	r3, #93	; 0x5d
 8001de4:	2208      	movs	r2, #8
 8001de6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	461a      	mov	r2, r3
 8001df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e12:	d122      	bne.n	8001e5a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	0151      	lsls	r1, r2, #5
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	440a      	add	r2, r1
 8001e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fc61 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e56:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e58:	e29b      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 80c1 	bne.w	8001ff4 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01b      	beq.n	8001eb2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3348      	adds	r3, #72	; 0x48
 8001e8a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	0159      	lsls	r1, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e9e:	1ad1      	subs	r1, r2, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4403      	add	r3, r0
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	335d      	adds	r3, #93	; 0x5d
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3358      	adds	r3, #88	; 0x58
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2301      	movs	r3, #1
 8001eea:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	333f      	adds	r3, #63	; 0x3f
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	333f      	adds	r3, #63	; 0x3f
 8001f12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d121      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	0151      	lsls	r1, r2, #5
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fbdf 	bl	8005706 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	2310      	movs	r3, #16
 8001f58:	6093      	str	r3, [r2, #8]
 8001f5a:	e034      	b.n	8001fc6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	333f      	adds	r3, #63	; 0x3f
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d129      	bne.n	8001fc6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	0151      	lsls	r1, r2, #5
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	440a      	add	r2, r1
 8001f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f90:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	335c      	adds	r3, #92	; 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	b2d8      	uxtb	r0, r3
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	335c      	adds	r3, #92	; 0x5c
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f008 fdfb 	bl	800abbc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3350      	adds	r3, #80	; 0x50
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2d8      	uxtb	r0, r3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3350      	adds	r3, #80	; 0x50
 8001fee:	4602      	mov	r2, r0
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	e1ce      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b02      	cmp	r3, #2
 8002008:	f040 80f1 	bne.w	80021ee <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	0151      	lsls	r1, r2, #5
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	440a      	add	r2, r1
 8002022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002026:	f023 0302 	bic.w	r3, r3, #2
 800202a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	335d      	adds	r3, #93	; 0x5d
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10a      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335c      	adds	r3, #92	; 0x5c
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e0b0      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	335d      	adds	r3, #93	; 0x5d
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b05      	cmp	r3, #5
 800206c:	d10a      	bne.n	8002084 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	335c      	adds	r3, #92	; 0x5c
 800207e:	2205      	movs	r2, #5
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e09a      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	335d      	adds	r3, #93	; 0x5d
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d00a      	beq.n	80020b0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	335d      	adds	r3, #93	; 0x5d
 80020aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d156      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	3358      	adds	r3, #88	; 0x58
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1c59      	adds	r1, r3, #1
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4403      	add	r3, r0
 80020d2:	3358      	adds	r3, #88	; 0x58
 80020d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	3358      	adds	r3, #88	; 0x58
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d914      	bls.n	8002116 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	3358      	adds	r3, #88	; 0x58
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	335c      	adds	r3, #92	; 0x5c
 8002110:	2204      	movs	r2, #4
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e009      	b.n	800212a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	335c      	adds	r3, #92	; 0x5c
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002140:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002148:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e02d      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	335d      	adds	r3, #93	; 0x5d
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d122      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800219e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2302      	movs	r3, #2
 80021ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	b2d8      	uxtb	r0, r3
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	335c      	adds	r3, #92	; 0x5c
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4601      	mov	r1, r0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f008 fce8 	bl	800abbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021ec:	e0d1      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d13e      	bne.n	8002282 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	0151      	lsls	r1, r2, #5
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	440a      	add	r2, r1
 800221a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3358      	adds	r3, #88	; 0x58
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4403      	add	r3, r0
 8002246:	3358      	adds	r3, #88	; 0x58
 8002248:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	335d      	adds	r3, #93	; 0x5d
 800225a:	2206      	movs	r2, #6
 800225c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f003 fa4c 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	461a      	mov	r2, r3
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	6093      	str	r3, [r2, #8]
}
 8002280:	e087      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b10      	cmp	r3, #16
 8002296:	d17c      	bne.n	8002392 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	333f      	adds	r3, #63	; 0x3f
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d122      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3358      	adds	r3, #88	; 0x58
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fa0a 	bl	8005706 <USB_HC_Halt>
 80022f2:	e045      	b.n	8002380 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	333f      	adds	r3, #63	; 0x3f
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	333f      	adds	r3, #63	; 0x3f
 800231a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800231c:	2b02      	cmp	r3, #2
 800231e:	d12f      	bne.n	8002380 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	3358      	adds	r3, #88	; 0x58
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d121      	bne.n	8002380 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	335d      	adds	r3, #93	; 0x5d
 800234c:	2203      	movs	r2, #3
 800234e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f003 f9c3 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	6093      	str	r3, [r2, #8]
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d119      	bne.n	80023fe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	2304      	movs	r3, #4
 80023da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	0151      	lsls	r1, r2, #5
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	440a      	add	r2, r1
 80023f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023fc:	e33e      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b20      	cmp	r3, #32
 8002412:	d141      	bne.n	8002498 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2320      	movs	r3, #32
 8002424:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	333d      	adds	r3, #61	; 0x3d
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	f040 831f 	bne.w	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	333d      	adds	r3, #61	; 0x3d
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	335c      	adds	r3, #92	; 0x5c
 8002462:	2202      	movs	r2, #2
 8002464:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	0151      	lsls	r1, r2, #5
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	440a      	add	r2, r1
 800247c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f938 	bl	8005706 <USB_HC_Halt>
}
 8002496:	e2f1      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d13f      	bne.n	800252e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	335d      	adds	r3, #93	; 0x5d
 80024be:	2204      	movs	r2, #4
 80024c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	333d      	adds	r3, #61	; 0x3d
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	3358      	adds	r3, #88	; 0x58
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	0151      	lsls	r1, r2, #5
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	440a      	add	r2, r1
 8002500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f003 f8f6 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2340      	movs	r3, #64	; 0x40
 800252a:	6093      	str	r3, [r2, #8]
}
 800252c:	e2a6      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d122      	bne.n	800258c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	0151      	lsls	r1, r2, #5
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	440a      	add	r2, r1
 800255c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f003 f8c8 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	461a      	mov	r2, r3
 8002584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002588:	6093      	str	r3, [r2, #8]
}
 800258a:	e277      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d135      	bne.n	800260e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3358      	adds	r3, #88	; 0x58
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	0151      	lsls	r1, r2, #5
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	440a      	add	r2, r1
 80025cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 f890 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2301      	movs	r3, #1
 80025f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	335d      	adds	r3, #93	; 0x5d
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
}
 800260c:	e236      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b08      	cmp	r3, #8
 8002622:	d12b      	bne.n	800267c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	461a      	mov	r2, r3
 8002632:	2308      	movs	r3, #8
 8002634:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f003 f850 	bl	8005706 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	335d      	adds	r3, #93	; 0x5d
 8002676:	2205      	movs	r2, #5
 8002678:	701a      	strb	r2, [r3, #0]
}
 800267a:	e1ff      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b10      	cmp	r3, #16
 8002690:	d155      	bne.n	800273e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	3358      	adds	r3, #88	; 0x58
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	335d      	adds	r3, #93	; 0x5d
 80026b6:	2203      	movs	r2, #3
 80026b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	333d      	adds	r3, #61	; 0x3d
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d114      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	333c      	adds	r3, #60	; 0x3c
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	333d      	adds	r3, #61	; 0x3d
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	0151      	lsls	r1, r2, #5
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	440a      	add	r2, r1
 8002710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f002 ffee 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	461a      	mov	r2, r3
 8002738:	2310      	movs	r3, #16
 800273a:	6093      	str	r3, [r2, #8]
}
 800273c:	e19e      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d12b      	bne.n	80027ac <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	0151      	lsls	r1, r2, #5
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	440a      	add	r2, r1
 800276a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f002 ffc1 	bl	8005706 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	335d      	adds	r3, #93	; 0x5d
 8002794:	2206      	movs	r2, #6
 8002796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	6093      	str	r3, [r2, #8]
}
 80027aa:	e167      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	d135      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	0151      	lsls	r1, r2, #5
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	440a      	add	r2, r1
 80027da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 ff89 	bl	8005706 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	2310      	movs	r3, #16
 8002804:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002818:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	335d      	adds	r3, #93	; 0x5d
 800282a:	2208      	movs	r2, #8
 800282c:	701a      	strb	r2, [r3, #0]
}
 800282e:	e125      	b.n	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b02      	cmp	r3, #2
 8002844:	f040 811a 	bne.w	8002a7c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	0151      	lsls	r1, r2, #5
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	440a      	add	r2, r1
 800285e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002862:	f023 0302 	bic.w	r3, r3, #2
 8002866:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	335d      	adds	r3, #93	; 0x5d
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d137      	bne.n	80028ee <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	335c      	adds	r3, #92	; 0x5c
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	333f      	adds	r3, #63	; 0x3f
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d00b      	beq.n	80028c0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	333f      	adds	r3, #63	; 0x3f
 80028b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	f040 80c5 	bne.w	8002a4a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	3351      	adds	r3, #81	; 0x51
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f083 0301 	eor.w	r3, r3, #1
 80028d6:	b2d8      	uxtb	r0, r3
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3351      	adds	r3, #81	; 0x51
 80028e8:	4602      	mov	r2, r0
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e0ad      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	335d      	adds	r3, #93	; 0x5d
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d10a      	bne.n	800291a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	2202      	movs	r2, #2
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e097      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	335d      	adds	r3, #93	; 0x5d
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d10a      	bne.n	8002946 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	335c      	adds	r3, #92	; 0x5c
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e081      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	335d      	adds	r3, #93	; 0x5d
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d10a      	bne.n	8002972 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e06b      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	335d      	adds	r3, #93	; 0x5d
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d00a      	beq.n	800299e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	335d      	adds	r3, #93	; 0x5d
 8002998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800299a:	2b08      	cmp	r3, #8
 800299c:	d155      	bne.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	3358      	adds	r3, #88	; 0x58
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4403      	add	r3, r0
 80029c0:	3358      	adds	r3, #88	; 0x58
 80029c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	3358      	adds	r3, #88	; 0x58
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d914      	bls.n	8002a04 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3358      	adds	r3, #88	; 0x58
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	335c      	adds	r3, #92	; 0x5c
 80029fe:	2204      	movs	r2, #4
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e009      	b.n	8002a18 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	335c      	adds	r3, #92	; 0x5c
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a2e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a36:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	2302      	movs	r3, #2
 8002a5a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	b2d8      	uxtb	r0, r3
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4601      	mov	r1, r0
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f008 f8a0 	bl	800abbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	0c5b      	lsrs	r3, r3, #17
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d003      	beq.n	8002ac8 <HCD_RXQLVL_IRQHandler+0x44>
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	f000 8082 	beq.w	8002bca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ac6:	e083      	b.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d07f      	beq.n	8002bce <HCD_RXQLVL_IRQHandler+0x14a>
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3344      	adds	r3, #68	; 0x44
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d074      	beq.n	8002bce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3344      	adds	r3, #68	; 0x44
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	b292      	uxth	r2, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f002 f9a1 	bl	8004e46 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3344      	adds	r3, #68	; 0x44
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	18d1      	adds	r1, r2, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4403      	add	r3, r0
 8002b28:	3344      	adds	r3, #68	; 0x44
 8002b2a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	; 0x4c
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	18d1      	adds	r1, r2, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4403      	add	r3, r0
 8002b50:	334c      	adds	r3, #76	; 0x4c
 8002b52:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d031      	beq.n	8002bce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b80:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b88:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	3350      	adds	r3, #80	; 0x50
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2d8      	uxtb	r0, r3
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3350      	adds	r3, #80	; 0x50
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	701a      	strb	r2, [r3, #0]
      break;
 8002bc8:	e001      	b.n	8002bce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002bce:	bf00      	nop
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	1ff80000 	.word	0x1ff80000

08002bdc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d113      	bne.n	8002c3c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10a      	bne.n	8002c34 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c2c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f007 ffa8 	bl	800ab84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d147      	bne.n	8002cd6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d129      	bne.n	8002cac <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d113      	bne.n	8002c88 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c6a:	d106      	bne.n	8002c7a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fa22 	bl	80050bc <USB_InitFSLSPClkSel>
 8002c78:	e011      	b.n	8002c9e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fa1b 	bl	80050bc <USB_InitFSLSPClkSel>
 8002c86:	e00a      	b.n	8002c9e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c96:	461a      	mov	r2, r3
 8002c98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c9c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f007 ff9e 	bl	800abe0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f007 ff6d 	bl	800ab84 <HAL_HCD_Connect_Callback>
 8002caa:	e014      	b.n	8002cd6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f007 ffa5 	bl	800abfc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002cc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cc4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d103      	bne.n	8002ce8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f043 0320 	orr.w	r3, r3, #32
 8002ce6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e10f      	b.n	8002f2e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f007 fc96 	bl	800a654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f001 f9ac 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a7b      	ldr	r2, [pc, #492]	; (8002f38 <HAL_I2C_Init+0x23c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x64>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a7a      	ldr	r2, [pc, #488]	; (8002f3c <HAL_I2C_Init+0x240>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x72>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_I2C_Init+0x244>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0db      	b.n	8002f2e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a72      	ldr	r2, [pc, #456]	; (8002f44 <HAL_I2C_Init+0x248>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a64      	ldr	r2, [pc, #400]	; (8002f38 <HAL_I2C_Init+0x23c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xb4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xc8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_I2C_Init+0x24c>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4956      	ldr	r1, [pc, #344]	; (8002f38 <HAL_I2C_Init+0x23c>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d80d      	bhi.n	8002e00 <HAL_I2C_Init+0x104>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	bf38      	it	cc
 8002dfc:	2304      	movcc	r3, #4
 8002dfe:	e04f      	b.n	8002ea0 <HAL_I2C_Init+0x1a4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_I2C_Init+0x130>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e012      	b.n	8002e52 <HAL_I2C_Init+0x156>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Init+0x15e>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_I2C_Init+0x1a4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_I2C_Init+0x184>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e58      	subs	r0, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	e00f      	b.n	8002ea0 <HAL_I2C_Init+0x1a4>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	0099      	lsls	r1, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6809      	ldr	r1, [r1, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6911      	ldr	r1, [r2, #16]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	000186a0 	.word	0x000186a0
 8002f3c:	001e847f 	.word	0x001e847f
 8002f40:	003d08ff 	.word	0x003d08ff
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e128      	b.n	80031b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a90      	ldr	r2, [pc, #576]	; (80031b8 <HAL_I2S_Init+0x26c>)
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f007 fbb3 	bl	800a6e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d060      	beq.n	800306c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e001      	b.n	8002fbc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d802      	bhi.n	8002fca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f001 f970 	bl	80042b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fda:	d125      	bne.n	8003028 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d010      	beq.n	8003006 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	3305      	adds	r3, #5
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e01f      	b.n	8003046 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	3305      	adds	r3, #5
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e00e      	b.n	8003046 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	3305      	adds	r3, #5
 8003044:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <HAL_I2S_Init+0x270>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	08db      	lsrs	r3, r3, #3
 8003050:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800306c:	2302      	movs	r3, #2
 800306e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d902      	bls.n	8003080 <HAL_I2S_Init+0x134>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2bff      	cmp	r3, #255	; 0xff
 800307e:	d907      	bls.n	8003090 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e08f      	b.n	80031b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	ea42 0103 	orr.w	r1, r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030ae:	f023 030f 	bic.w	r3, r3, #15
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6851      	ldr	r1, [r2, #4]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68d2      	ldr	r2, [r2, #12]
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6992      	ldr	r2, [r2, #24]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d161      	bne.n	80031a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <HAL_I2S_Init+0x274>)
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <HAL_I2S_Init+0x278>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_I2S_Init+0x1a4>
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_I2S_Init+0x27c>)
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x1a8>
 80030f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	4932      	ldr	r1, [pc, #200]	; (80031c4 <HAL_I2S_Init+0x278>)
 80030fc:	428a      	cmp	r2, r1
 80030fe:	d101      	bne.n	8003104 <HAL_I2S_Init+0x1b8>
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_I2S_Init+0x27c>)
 8003102:	e001      	b.n	8003108 <HAL_I2S_Init+0x1bc>
 8003104:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003108:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <HAL_I2S_Init+0x278>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_I2S_Init+0x1d4>
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <HAL_I2S_Init+0x27c>)
 800311e:	e001      	b.n	8003124 <HAL_I2S_Init+0x1d8>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003124:	2202      	movs	r2, #2
 8003126:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <HAL_I2S_Init+0x278>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_I2S_Init+0x1ea>
 8003132:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_I2S_Init+0x27c>)
 8003134:	e001      	b.n	800313a <HAL_I2S_Init+0x1ee>
 8003136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003146:	d003      	beq.n	8003150 <HAL_I2S_Init+0x204>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e001      	b.n	800315c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	b299      	uxth	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003172:	4303      	orrs	r3, r0
 8003174:	b29b      	uxth	r3, r3
 8003176:	430b      	orrs	r3, r1
 8003178:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800317a:	4313      	orrs	r3, r2
 800317c:	b29a      	uxth	r2, r3
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	4313      	orrs	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003188:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_I2S_Init+0x278>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_I2S_Init+0x24c>
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_I2S_Init+0x27c>)
 8003196:	e001      	b.n	800319c <HAL_I2S_Init+0x250>
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	897a      	ldrh	r2, [r7, #10]
 800319e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	080032c3 	.word	0x080032c3
 80031bc:	cccccccd 	.word	0xcccccccd
 80031c0:	080033d9 	.word	0x080033d9
 80031c4:	40003800 	.word	0x40003800
 80031c8:	40003400 	.word	0x40003400

080031cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800324c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffb8 	bl	80031cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	b292      	uxth	r2, r2
 8003278:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10e      	bne.n	80032ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff93 	bl	80031e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d13a      	bne.n	8003354 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d109      	bne.n	80032fc <I2S_IRQHandler+0x3a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d102      	bne.n	80032fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffb4 	bl	8003264 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d126      	bne.n	8003354 <I2S_IRQHandler+0x92>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d11f      	bne.n	8003354 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003322:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff50 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d136      	bne.n	80033ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d109      	bne.n	800337e <I2S_IRQHandler+0xbc>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d102      	bne.n	800337e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff45 	bl	8003208 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d122      	bne.n	80033ce <I2S_IRQHandler+0x10c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d11b      	bne.n	80033ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff13 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4aa2      	ldr	r2, [pc, #648]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033f2:	4ba2      	ldr	r3, [pc, #648]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a9b      	ldr	r2, [pc, #620]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003410:	4b9a      	ldr	r3, [pc, #616]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003412:	e001      	b.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003424:	d004      	beq.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8099 	bne.w	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d107      	bne.n	800344a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f925 	bl	8003694 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9c8 	bl	80037f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d13a      	bne.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d035      	beq.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a7e      	ldr	r2, [pc, #504]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003482:	4b7e      	ldr	r3, [pc, #504]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003484:	e001      	b.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4979      	ldr	r1, [pc, #484]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003492:	428b      	cmp	r3, r1
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003496:	4b79      	ldr	r3, [pc, #484]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f043 0202 	orr.w	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fe88 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	f040 80be 	bne.w	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80b8 	beq.w	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800350a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a59      	ldr	r2, [pc, #356]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003516:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003518:	e001      	b.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800351a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4954      	ldr	r1, [pc, #336]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003526:	428b      	cmp	r3, r1
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800352a:	4b54      	ldr	r3, [pc, #336]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003536:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f043 0204 	orr.w	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fe4a 	bl	80031f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003560:	e084      	b.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8be 	bl	80036f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8fd 	bl	8003790 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d12f      	bne.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02a      	beq.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035c6:	e001      	b.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4929      	ldr	r1, [pc, #164]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d4:	428b      	cmp	r3, r1
 80035d6:	d101      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035d8:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035da:	e001      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fdfa 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d131      	bne.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02c      	beq.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4912      	ldr	r1, [pc, #72]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fdc5 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366a:	e000      	b.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800366c:	bf00      	nop
}
 800366e:	bf00      	nop
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40003800 	.word	0x40003800
 800367c:	40003400 	.word	0x40003400

08003680 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c99      	adds	r1, r3, #2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6251      	str	r1, [r2, #36]	; 0x24
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d113      	bne.n	80036ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ffc9 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	1c99      	adds	r1, r3, #2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6251      	str	r1, [r2, #36]	; 0x24
 800370a:	8819      	ldrh	r1, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <I2SEx_TxISR_I2SExt+0x90>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <I2SEx_TxISR_I2SExt+0x22>
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <I2SEx_TxISR_I2SExt+0x94>)
 8003718:	e001      	b.n	800371e <I2SEx_TxISR_I2SExt+0x26>
 800371a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371e:	460a      	mov	r2, r1
 8003720:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a12      	ldr	r2, [pc, #72]	; (8003788 <I2SEx_TxISR_I2SExt+0x90>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <I2SEx_TxISR_I2SExt+0x50>
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <I2SEx_TxISR_I2SExt+0x94>)
 8003746:	e001      	b.n	800374c <I2SEx_TxISR_I2SExt+0x54>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	490d      	ldr	r1, [pc, #52]	; (8003788 <I2SEx_TxISR_I2SExt+0x90>)
 8003754:	428b      	cmp	r3, r1
 8003756:	d101      	bne.n	800375c <I2SEx_TxISR_I2SExt+0x64>
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <I2SEx_TxISR_I2SExt+0x94>)
 800375a:	e001      	b.n	8003760 <I2SEx_TxISR_I2SExt+0x68>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003764:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff81 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40003800 	.word	0x40003800
 800378c:	40003400 	.word	0x40003400

08003790 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68d8      	ldr	r0, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	1c99      	adds	r1, r3, #2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037a8:	b282      	uxth	r2, r0
 80037aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff4a 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a20      	ldr	r2, [pc, #128]	; (8003884 <I2SEx_RxISR_I2SExt+0x90>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <I2SEx_RxISR_I2SExt+0x16>
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <I2SEx_RxISR_I2SExt+0x94>)
 8003808:	e001      	b.n	800380e <I2SEx_RxISR_I2SExt+0x1a>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	68d8      	ldr	r0, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	1c99      	adds	r1, r3, #2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	62d1      	str	r1, [r2, #44]	; 0x2c
 800381a:	b282      	uxth	r2, r0
 800381c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d121      	bne.n	800387a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <I2SEx_RxISR_I2SExt+0x90>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <I2SEx_RxISR_I2SExt+0x50>
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <I2SEx_RxISR_I2SExt+0x94>)
 8003842:	e001      	b.n	8003848 <I2SEx_RxISR_I2SExt+0x54>
 8003844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	490d      	ldr	r1, [pc, #52]	; (8003884 <I2SEx_RxISR_I2SExt+0x90>)
 8003850:	428b      	cmp	r3, r1
 8003852:	d101      	bne.n	8003858 <I2SEx_RxISR_I2SExt+0x64>
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <I2SEx_RxISR_I2SExt+0x94>)
 8003856:	e001      	b.n	800385c <I2SEx_RxISR_I2SExt+0x68>
 8003858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003860:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff03 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40003800 	.word	0x40003800
 8003888:	40003400 	.word	0x40003400

0800388c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e22d      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d075      	beq.n	8003996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038aa:	4ba3      	ldr	r3, [pc, #652]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d00c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b6:	4ba0      	ldr	r3, [pc, #640]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d112      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b9d      	ldr	r3, [pc, #628]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	4b99      	ldr	r3, [pc, #612]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d05b      	beq.n	8003994 <HAL_RCC_OscConfig+0x108>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d157      	bne.n	8003994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e208      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x74>
 80038f2:	4b91      	ldr	r3, [pc, #580]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a90      	ldr	r2, [pc, #576]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xb0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x98>
 800390a:	4b8b      	ldr	r3, [pc, #556]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a8a      	ldr	r2, [pc, #552]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a87      	ldr	r2, [pc, #540]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xb0>
 8003924:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a83      	ldr	r2, [pc, #524]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b81      	ldr	r3, [pc, #516]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a80      	ldr	r2, [pc, #512]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd fa68 	bl	8000e18 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7fd fa64 	bl	8000e18 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1cd      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xc0>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd fa54 	bl	8000e18 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7fd fa50 	bl	8000e18 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1b9      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0xe8>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ae:	4b62      	ldr	r3, [pc, #392]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ba:	4b5f      	ldr	r3, [pc, #380]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b5c      	ldr	r3, [pc, #368]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x152>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e18d      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b56      	ldr	r3, [pc, #344]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4952      	ldr	r1, [pc, #328]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e03a      	b.n	8003a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b4f      	ldr	r3, [pc, #316]	; (8003b3c <HAL_RCC_OscConfig+0x2b0>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fd fa09 	bl	8000e18 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fd fa05 	bl	8000e18 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e16e      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	4b46      	ldr	r3, [pc, #280]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b43      	ldr	r3, [pc, #268]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4940      	ldr	r1, [pc, #256]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_RCC_OscConfig+0x2b0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd f9e8 	bl	8000e18 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fd f9e4 	bl	8000e18 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e14d      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d030      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <HAL_RCC_OscConfig+0x2b4>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd f9c8 	bl	8000e18 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fd f9c4 	bl	8000e18 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e12d      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x200>
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x2b4>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd f9b1 	bl	8000e18 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aba:	f7fd f9ad 	bl	8000e18 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e116      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80a0 	beq.w	8003c26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a0e      	ldr	r2, [pc, #56]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_OscConfig+0x2b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d121      	bne.n	8003b66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCC_OscConfig+0x2b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_RCC_OscConfig+0x2b8>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd f973 	bl	8000e18 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	e011      	b.n	8003b5a <HAL_RCC_OscConfig+0x2ce>
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470000 	.word	0x42470000
 8003b40:	42470e80 	.word	0x42470e80
 8003b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b48:	f7fd f966 	bl	8000e18 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0cf      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x478>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
 8003b6e:	4b66      	ldr	r3, [pc, #408]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a65      	ldr	r2, [pc, #404]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	e01c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x32a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_OscConfig+0x312>
 8003b84:	4b60      	ldr	r3, [pc, #384]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	4a5f      	ldr	r2, [pc, #380]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b90:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4a5c      	ldr	r2, [pc, #368]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9c:	e00b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x32a>
 8003b9e:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a59      	ldr	r2, [pc, #356]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8003baa:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a56      	ldr	r2, [pc, #344]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d015      	beq.n	8003bea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd f92b 	bl	8000e18 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd f927 	bl	8000e18 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e08e      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ee      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x33a>
 8003be8:	e014      	b.n	8003c14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fd f915 	bl	8000e18 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd f911 	bl	8000e18 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e078      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ee      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a3a      	ldr	r2, [pc, #232]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d064      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c2e:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d05c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d141      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b32      	ldr	r3, [pc, #200]	; (8003d0c <HAL_RCC_OscConfig+0x480>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd f8e6 	bl	8000e18 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fd f8e2 	bl	8000e18 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04b      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	3b01      	subs	r3, #1
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	491d      	ldr	r1, [pc, #116]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0x480>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fd f8bb 	bl	8000e18 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fd f8b7 	bl	8000e18 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e020      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x41a>
 8003cc4:	e018      	b.n	8003cf8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_OscConfig+0x480>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f8a4 	bl	8000e18 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd f8a0 	bl	8000e18 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e009      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <HAL_RCC_OscConfig+0x47c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x448>
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40007000 	.word	0x40007000
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	42470060 	.word	0x42470060

08003d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ca      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d90c      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0b6      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b58      	ldr	r3, [pc, #352]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b4f      	ldr	r3, [pc, #316]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	494c      	ldr	r1, [pc, #304]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d044      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d119      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07d      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d003      	beq.n	8003dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06d      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e065      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4933      	ldr	r1, [pc, #204]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fd f80a 	bl	8000e18 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd f806 	bl	8000e18 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04d      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20c      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e030      	b.n	8003eba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4915      	ldr	r1, [pc, #84]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e96:	f000 f81d 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e9a:	4601      	mov	r1, r0
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	5cd3      	ldrb	r3, [r2, r3]
 8003eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	f7fc ff6c 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023c00 	.word	0x40023c00
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	0800b9bc 	.word	0x0800b9bc
 8003ed0:	2000002c 	.word	0x2000002c

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d007      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x32>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x38>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 80b4 	bne.w	8004068 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4b5e      	ldr	r3, [pc, #376]	; (800407c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f02:	60bb      	str	r3, [r7, #8]
       break;
 8003f04:	e0b3      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f06:	4b5e      	ldr	r3, [pc, #376]	; (8004080 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f08:	60bb      	str	r3, [r7, #8]
      break;
 8003f0a:	e0b0      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4b5a      	ldr	r3, [pc, #360]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f16:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04a      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4b55      	ldr	r3, [pc, #340]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	f04f 0400 	mov.w	r4, #0
 8003f2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea03 0501 	and.w	r5, r3, r1
 8003f38:	ea04 0602 	and.w	r6, r4, r2
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4632      	mov	r2, r6
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	0154      	lsls	r4, r2, #5
 8003f4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f4e:	014b      	lsls	r3, r1, #5
 8003f50:	4619      	mov	r1, r3
 8003f52:	4622      	mov	r2, r4
 8003f54:	1b49      	subs	r1, r1, r5
 8003f56:	eb62 0206 	sbc.w	r2, r2, r6
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	f04f 0400 	mov.w	r4, #0
 8003f62:	0194      	lsls	r4, r2, #6
 8003f64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f68:	018b      	lsls	r3, r1, #6
 8003f6a:	1a5b      	subs	r3, r3, r1
 8003f6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	00e2      	lsls	r2, r4, #3
 8003f7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f7e:	00d9      	lsls	r1, r3, #3
 8003f80:	460b      	mov	r3, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	195b      	adds	r3, r3, r5
 8003f86:	eb44 0406 	adc.w	r4, r4, r6
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	0262      	lsls	r2, r4, #9
 8003f94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f98:	0259      	lsls	r1, r3, #9
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7fc fd4e 	bl	8000a4c <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e049      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	ea03 0501 	and.w	r5, r3, r1
 8003fce:	ea04 0602 	and.w	r6, r4, r2
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	f04f 0400 	mov.w	r4, #0
 8003fde:	0154      	lsls	r4, r2, #5
 8003fe0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fe4:	014b      	lsls	r3, r1, #5
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4622      	mov	r2, r4
 8003fea:	1b49      	subs	r1, r1, r5
 8003fec:	eb62 0206 	sbc.w	r2, r2, r6
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	0194      	lsls	r4, r2, #6
 8003ffa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ffe:	018b      	lsls	r3, r1, #6
 8004000:	1a5b      	subs	r3, r3, r1
 8004002:	eb64 0402 	sbc.w	r4, r4, r2
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	00e2      	lsls	r2, r4, #3
 8004010:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004014:	00d9      	lsls	r1, r3, #3
 8004016:	460b      	mov	r3, r1
 8004018:	4614      	mov	r4, r2
 800401a:	195b      	adds	r3, r3, r5
 800401c:	eb44 0406 	adc.w	r4, r4, r6
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	02a2      	lsls	r2, r4, #10
 800402a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800402e:	0299      	lsls	r1, r3, #10
 8004030:	460b      	mov	r3, r1
 8004032:	4614      	mov	r4, r2
 8004034:	4618      	mov	r0, r3
 8004036:	4621      	mov	r1, r4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f04f 0400 	mov.w	r4, #0
 800403e:	461a      	mov	r2, r3
 8004040:	4623      	mov	r3, r4
 8004042:	f7fc fd03 	bl	8000a4c <__aeabi_uldivmod>
 8004046:	4603      	mov	r3, r0
 8004048:	460c      	mov	r4, r1
 800404a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	60bb      	str	r3, [r7, #8]
      break;
 8004066:	e002      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800406a:	60bb      	str	r3, [r7, #8]
      break;
 800406c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406e:	68bb      	ldr	r3, [r7, #8]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	00f42400 	.word	0x00f42400
 8004080:	007a1200 	.word	0x007a1200

08004084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_RCC_GetHCLKFreq+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000002c 	.word	0x2000002c

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a0:	f7ff fff0 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0a9b      	lsrs	r3, r3, #10
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800b9cc 	.word	0x0800b9cc

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040c8:	f7ff ffdc 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040cc:	4601      	mov	r1, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0b5b      	lsrs	r3, r3, #13
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4a03      	ldr	r2, [pc, #12]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	0800b9cc 	.word	0x0800b9cc

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004110:	2b00      	cmp	r3, #0
 8004112:	d035      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004114:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800411a:	f7fc fe7d 	bl	8000e18 <HAL_GetTick>
 800411e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004122:	f7fc fe79 	bl	8000e18 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0b0      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004134:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	019a      	lsls	r2, r3, #6
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	071b      	lsls	r3, r3, #28
 800414c:	4955      	ldr	r1, [pc, #340]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004154:	4b52      	ldr	r3, [pc, #328]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800415a:	f7fc fe5d 	bl	8000e18 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004162:	f7fc fe59 	bl	8000e18 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e090      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004174:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8083 	beq.w	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b44      	ldr	r3, [pc, #272]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a43      	ldr	r2, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041aa:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3e      	ldr	r2, [pc, #248]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041b6:	f7fc fe2f 	bl	8000e18 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fc fe2b 	bl	8000e18 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e062      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041d0:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d028      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004204:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420a:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d114      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004222:	f7fc fdf9 	bl	8000e18 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fc fdf5 	bl	8000e18 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e02a      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004258:	d10d      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	490d      	ldr	r1, [pc, #52]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
 8004274:	e005      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004280:	6093      	str	r3, [r2, #8]
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428e:	4905      	ldr	r1, [pc, #20]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	42470068 	.word	0x42470068
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40007000 	.word	0x40007000
 80042ac:	42470e40 	.word	0x42470e40

080042b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d13d      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d12f      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042e4:	617b      	str	r3, [r7, #20]
          break;
 80042e6:	e02f      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f4:	d108      	bne.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e007      	b.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004310:	4a14      	ldr	r2, [pc, #80]	; (8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	0f1b      	lsrs	r3, r3, #28
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
          break;
 8004340:	e002      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
          break;
 8004346:	bf00      	nop
        }
      }
      break;
 8004348:	bf00      	nop
    }
  }
  return frequency;
 800434a:	697b      	ldr	r3, [r7, #20]
}
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40023800 	.word	0x40023800
 800435c:	00bb8000 	.word	0x00bb8000
 8004360:	007a1200 	.word	0x007a1200
 8004364:	00f42400 	.word	0x00f42400

08004368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e056      	b.n	8004428 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f006 fa0d 	bl	800a7b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	ea42 0103 	orr.w	r1, r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 0104 	and.w	r1, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e03f      	b.n	80044c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f006 f9f4 	bl	800a844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f9b1 	bl	80047dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af02      	add	r7, sp, #8
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	f040 8083 	bne.w	80045f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit+0x2e>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e07b      	b.n	80045f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x40>
 8004506:	2302      	movs	r3, #2
 8004508:	e074      	b.n	80045f4 <HAL_UART_Transmit+0x12a>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2221      	movs	r2, #33	; 0x21
 800451c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004520:	f7fc fc7a 	bl	8000e18 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004532:	e042      	b.n	80045ba <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d122      	bne.n	8004592 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8f6 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e046      	b.n	80045f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3302      	adds	r3, #2
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	e017      	b.n	80045ba <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	e013      	b.n	80045ba <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f8d3 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e023      	b.n	80045f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	60ba      	str	r2, [r7, #8]
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1b7      	bne.n	8004534 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f8ba 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00a      	b.n	80045f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	f040 8090 	bne.w	800473e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_UART_Receive+0x2e>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e088      	b.n	8004740 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_UART_Receive+0x40>
 8004638:	2302      	movs	r3, #2
 800463a:	e081      	b.n	8004740 <HAL_UART_Receive+0x144>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2222      	movs	r2, #34	; 0x22
 800464e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004652:	f7fc fbe1 	bl	8000e18 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004664:	e05c      	b.n	8004720 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d12b      	bne.n	80046d6 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2120      	movs	r1, #32
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f85d 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e053      	b.n	8004740 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10c      	bne.n	80046be <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3302      	adds	r3, #2
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	e030      	b.n	8004720 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	e024      	b.n	8004720 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2120      	movs	r1, #32
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f831 	bl	8004748 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e027      	b.n	8004740 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	60ba      	str	r2, [r7, #8]
 8004704:	b2ca      	uxtb	r2, r1
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e00a      	b.n	8004720 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1c59      	adds	r1, r3, #1
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d19d      	bne.n	8004666 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004758:	e02c      	b.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d028      	beq.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0x30>
 8004768:	f7fc fb56 	bl	8000e18 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d21d      	bcs.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004786:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e00f      	b.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d0c3      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b5b0      	push	{r4, r5, r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800481c:	f023 030c 	bic.w	r3, r3, #12
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	430b      	orrs	r3, r1
 8004828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004848:	f040 80e4 	bne.w	8004a14 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4aab      	ldr	r2, [pc, #684]	; (8004b00 <UART_SetConfig+0x324>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <UART_SetConfig+0x84>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4aaa      	ldr	r2, [pc, #680]	; (8004b04 <UART_SetConfig+0x328>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d16c      	bne.n	800493a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004860:	f7ff fc30 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004864:	4602      	mov	r2, r0
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009a      	lsls	r2, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	4aa3      	ldr	r2, [pc, #652]	; (8004b08 <UART_SetConfig+0x32c>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	011c      	lsls	r4, r3, #4
 8004884:	f7ff fc1e 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004888:	4602      	mov	r2, r0
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009a      	lsls	r2, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fbb2 f5f3 	udiv	r5, r2, r3
 800489e:	f7ff fc11 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	4a93      	ldr	r2, [pc, #588]	; (8004b08 <UART_SetConfig+0x32c>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2264      	movs	r2, #100	; 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	1aeb      	subs	r3, r5, r3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	3332      	adds	r3, #50	; 0x32
 80048cc:	4a8e      	ldr	r2, [pc, #568]	; (8004b08 <UART_SetConfig+0x32c>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048da:	441c      	add	r4, r3
 80048dc:	f7ff fbf2 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80048f6:	f7ff fbe5 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009a      	lsls	r2, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	4a7d      	ldr	r2, [pc, #500]	; (8004b08 <UART_SetConfig+0x32c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2264      	movs	r2, #100	; 0x64
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	1aeb      	subs	r3, r5, r3
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	3332      	adds	r3, #50	; 0x32
 8004924:	4a78      	ldr	r2, [pc, #480]	; (8004b08 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	f003 0207 	and.w	r2, r3, #7
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4422      	add	r2, r4
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	e154      	b.n	8004be4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800493a:	f7ff fbaf 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 800493e:	4602      	mov	r2, r0
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009a      	lsls	r2, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	4a6c      	ldr	r2, [pc, #432]	; (8004b08 <UART_SetConfig+0x32c>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	011c      	lsls	r4, r3, #4
 800495e:	f7ff fb9d 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8004962:	4602      	mov	r2, r0
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009a      	lsls	r2, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fbb2 f5f3 	udiv	r5, r2, r3
 8004978:	f7ff fb90 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 800497c:	4602      	mov	r2, r0
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009a      	lsls	r2, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	4a5d      	ldr	r2, [pc, #372]	; (8004b08 <UART_SetConfig+0x32c>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	2264      	movs	r2, #100	; 0x64
 800499c:	fb02 f303 	mul.w	r3, r2, r3
 80049a0:	1aeb      	subs	r3, r5, r3
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	3332      	adds	r3, #50	; 0x32
 80049a6:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <UART_SetConfig+0x32c>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b4:	441c      	add	r4, r3
 80049b6:	f7ff fb71 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d0:	f7ff fb64 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009a      	lsls	r2, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	4a47      	ldr	r2, [pc, #284]	; (8004b08 <UART_SetConfig+0x32c>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2264      	movs	r2, #100	; 0x64
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	1aeb      	subs	r3, r5, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	; 0x32
 80049fe:	4a42      	ldr	r2, [pc, #264]	; (8004b08 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4422      	add	r2, r4
 8004a10:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a12:	e0e7      	b.n	8004be4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a39      	ldr	r2, [pc, #228]	; (8004b00 <UART_SetConfig+0x324>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <UART_SetConfig+0x24c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <UART_SetConfig+0x328>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d171      	bne.n	8004b0c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a28:	f7ff fb4c 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a31      	ldr	r2, [pc, #196]	; (8004b08 <UART_SetConfig+0x32c>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	011c      	lsls	r4, r3, #4
 8004a4c:	f7ff fb3a 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009a      	lsls	r2, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a66:	f7ff fb2d 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009a      	lsls	r2, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <UART_SetConfig+0x32c>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2264      	movs	r2, #100	; 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	1aeb      	subs	r3, r5, r3
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	3332      	adds	r3, #50	; 0x32
 8004a94:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <UART_SetConfig+0x32c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa0:	441c      	add	r4, r3
 8004aa2:	f7ff fb0f 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009a      	lsls	r2, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004abc:	f7ff fb02 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009a      	lsls	r2, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	; (8004b08 <UART_SetConfig+0x32c>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2264      	movs	r2, #100	; 0x64
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	1aeb      	subs	r3, r5, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <UART_SetConfig+0x32c>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4422      	add	r2, r4
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	e071      	b.n	8004be4 <UART_SetConfig+0x408>
 8004b00:	40011000 	.word	0x40011000
 8004b04:	40011400 	.word	0x40011400
 8004b08:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b0c:	f7ff fac6 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4a31      	ldr	r2, [pc, #196]	; (8004bec <UART_SetConfig+0x410>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	011c      	lsls	r4, r3, #4
 8004b30:	f7ff fab4 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009a      	lsls	r2, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b4a:	f7ff faa7 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <UART_SetConfig+0x410>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	; 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1aeb      	subs	r3, r5, r3
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	3332      	adds	r3, #50	; 0x32
 8004b78:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <UART_SetConfig+0x410>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b84:	441c      	add	r4, r3
 8004b86:	f7ff fa89 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ba0:	f7ff fa7c 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <UART_SetConfig+0x410>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2264      	movs	r2, #100	; 0x64
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	1aeb      	subs	r3, r5, r3
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a07      	ldr	r2, [pc, #28]	; (8004bec <UART_SetConfig+0x410>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 020f 	and.w	r2, r3, #15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4422      	add	r2, r4
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	e7ff      	b.n	8004be4 <UART_SetConfig+0x408>
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bdb0      	pop	{r4, r5, r7, pc}
 8004bec:	51eb851f 	.word	0x51eb851f

08004bf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	f107 001c 	add.w	r0, r7, #28
 8004bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d122      	bne.n	8004c4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f94a 	bl	8004edc <USB_CoreReset>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]
 8004c4c:	e01a      	b.n	8004c84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f93e 	bl	8004edc <USB_CoreReset>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
 8004c76:	e005      	b.n	8004c84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10b      	bne.n	8004ca2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f043 0206 	orr.w	r2, r3, #6
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cae:	b004      	add	sp, #16
 8004cb0:	4770      	bx	lr

08004cb2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f043 0201 	orr.w	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 0201 	bic.w	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	e00b      	b.n	8004d3a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	e001      	b.n	8004d3a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e003      	b.n	8004d42 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d3a:	2032      	movs	r0, #50	; 0x32
 8004d3c:	f7fc f878 	bl	8000e30 <HAL_Delay>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <USB_FlushTxFifo+0x48>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e006      	b.n	8004d86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d0f0      	beq.n	8004d66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	00030d40 	.word	0x00030d40

08004d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2210      	movs	r2, #16
 8004da8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <USB_FlushRxFifo+0x40>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e006      	b.n	8004dca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d0f0      	beq.n	8004daa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	00030d40 	.word	0x00030d40

08004ddc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b089      	sub	sp, #36	; 0x24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	460b      	mov	r3, r1
 8004dec:	71fb      	strb	r3, [r7, #7]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d11a      	bne.n	8004e38 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e02:	88bb      	ldrh	r3, [r7, #4]
 8004e04:	3303      	adds	r3, #3
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e00f      	b.n	8004e30 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	031a      	lsls	r2, r3, #12
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3304      	adds	r3, #4
 8004e28:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3eb      	bcc.n	8004e10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	; 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b089      	sub	sp, #36	; 0x24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	4613      	mov	r3, r2
 8004e52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	3303      	adds	r3, #3
 8004e60:	089b      	lsrs	r3, r3, #2
 8004e62:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e00b      	b.n	8004e82 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3ef      	bcc.n	8004e6a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3724      	adds	r7, #36	; 0x24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4013      	ands	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0301 	and.w	r3, r3, #1
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <USB_CoreReset+0x64>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e01b      	b.n	8004f32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	daf2      	bge.n	8004ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <USB_CoreReset+0x64>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d0f0      	beq.n	8004f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	00030d40 	.word	0x00030d40

08004f44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f44:	b084      	sub	sp, #16
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	f107 001c 	add.w	r0, r7, #28
 8004f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d10a      	bne.n	8004fb2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e014      	b.n	8004fdc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e009      	b.n	8004fdc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fd6:	f023 0304 	bic.w	r3, r3, #4
 8004fda:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004fdc:	2110      	movs	r1, #16
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff feb4 	bl	8004d4c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fed7 	bl	8004d98 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e015      	b.n	800501c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8005002:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	461a      	mov	r2, r3
 8005012:	2300      	movs	r3, #0
 8005014:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d3e5      	bcc.n	8004ff0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005024:	2101      	movs	r1, #1
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8ac 	bl	8005184 <USB_DriveVbus>

  HAL_Delay(200U);
 800502c:	20c8      	movs	r0, #200	; 0xc8
 800502e:	f7fb feff 	bl	8000e30 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f04f 32ff 	mov.w	r2, #4294967295
 800503e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005052:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <USB_HostInit+0x164>)
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a13      	ldr	r2, [pc, #76]	; (80050ac <USB_HostInit+0x168>)
 800505e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005062:	e009      	b.n	8005078 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <USB_HostInit+0x16c>)
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <USB_HostInit+0x170>)
 8005074:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d105      	bne.n	800508a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f043 0210 	orr.w	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <USB_HostInit+0x174>)
 8005090:	4313      	orrs	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050a2:	b004      	add	sp, #16
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	01000200 	.word	0x01000200
 80050ac:	00e00300 	.word	0x00e00300
 80050b0:	00600080 	.word	0x00600080
 80050b4:	004000e0 	.word	0x004000e0
 80050b8:	a3200008 	.word	0xa3200008

080050bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050f4:	4313      	orrs	r3, r2
 80050f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005104:	461a      	mov	r2, r3
 8005106:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800510a:	6053      	str	r3, [r2, #4]
 800510c:	e009      	b.n	8005122 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d106      	bne.n	8005122 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800511a:	461a      	mov	r2, r3
 800511c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005120:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005150:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800515a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005160:	2064      	movs	r0, #100	; 0x64
 8005162:	f7fb fe65 	bl	8000e30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800516e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005172:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005174:	200a      	movs	r0, #10
 8005176:	f7fb fe5b 	bl	8000e30 <HAL_Delay>

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <USB_DriveVbus+0x44>
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d106      	bne.n	80051c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d109      	bne.n	80051e8 <USB_DriveVbus+0x64>
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	0c5b      	lsrs	r3, r3, #17
 8005214:	f003 0303 	and.w	r3, r3, #3
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	b29b      	uxth	r3, r3
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	4603      	mov	r3, r0
 8005258:	70fb      	strb	r3, [r7, #3]
 800525a:	460b      	mov	r3, r1
 800525c:	70bb      	strb	r3, [r7, #2]
 800525e:	4613      	mov	r3, r2
 8005260:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	461a      	mov	r2, r3
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800527e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005282:	2b03      	cmp	r3, #3
 8005284:	d87e      	bhi.n	8005384 <USB_HC_Init+0x13c>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <USB_HC_Init+0x44>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	0800529d 	.word	0x0800529d
 8005290:	08005347 	.word	0x08005347
 8005294:	0800529d 	.word	0x0800529d
 8005298:	08005309 	.word	0x08005309
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	461a      	mov	r2, r3
 80052aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80052ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80052b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da10      	bge.n	80052da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80052d8:	e057      	b.n	800538a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d051      	beq.n	800538a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005300:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005304:	60d3      	str	r3, [r2, #12]
      break;
 8005306:	e040      	b.n	800538a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	461a      	mov	r2, r3
 8005316:	f240 639d 	movw	r3, #1693	; 0x69d
 800531a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800531c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005320:	2b00      	cmp	r3, #0
 8005322:	da34      	bge.n	800538e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	440a      	add	r2, r1
 800533a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005342:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005344:	e023      	b.n	800538e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	f240 2325 	movw	r3, #549	; 0x225
 8005358:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800535a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800535e:	2b00      	cmp	r3, #0
 8005360:	da17      	bge.n	8005392 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	440a      	add	r2, r1
 8005378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005380:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005382:	e006      	b.n	8005392 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
      break;
 8005388:	e004      	b.n	8005394 <USB_HC_Init+0x14c>
      break;
 800538a:	bf00      	nop
 800538c:	e002      	b.n	8005394 <USB_HC_Init+0x14c>
      break;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <USB_HC_Init+0x14c>
      break;
 8005392:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	2101      	movs	r1, #1
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053ae:	4313      	orrs	r3, r2
 80053b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80053be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da03      	bge.n	80053ce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80053c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	e001      	b.n	80053d2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80053d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d103      	bne.n	80053e2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80053da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e001      	b.n	80053e6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053e6:	787b      	ldrb	r3, [r7, #1]
 80053e8:	059b      	lsls	r3, r3, #22
 80053ea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80053ee:	78bb      	ldrb	r3, [r7, #2]
 80053f0:	02db      	lsls	r3, r3, #11
 80053f2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80053f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053fc:	049b      	lsls	r3, r3, #18
 80053fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005402:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005404:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005406:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800540a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	440b      	add	r3, r1
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005422:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005424:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005428:	2b03      	cmp	r3, #3
 800542a:	d10f      	bne.n	800544c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	440a      	add	r2, r1
 8005442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800544a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800544c:	7dfb      	ldrb	r3, [r7, #23]
}
 800544e:	4618      	mov	r0, r3
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop

0800545c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08c      	sub	sp, #48	; 0x30
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005478:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d028      	beq.n	80054d8 <USB_HC_StartXfer+0x7c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	791b      	ldrb	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d124      	bne.n	80054d8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <USB_HC_StartXfer+0x50>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	795b      	ldrb	r3, [r3, #5]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d107      	bne.n	80054ac <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fa2e 	bl	8005904 <USB_DoPing>
      return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e112      	b.n	80056d2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d112      	bne.n	80054d8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80054d0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2200      	movs	r2, #0
 80054d6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d018      	beq.n	8005512 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	8912      	ldrh	r2, [r2, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	3b01      	subs	r3, #1
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	8912      	ldrh	r2, [r2, #8]
 80054f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80054f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80054f8:	8b7b      	ldrh	r3, [r7, #26]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d90b      	bls.n	8005516 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80054fe:	8b7b      	ldrh	r3, [r7, #26]
 8005500:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	8912      	ldrh	r2, [r2, #8]
 8005508:	fb02 f203 	mul.w	r2, r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	611a      	str	r2, [r3, #16]
 8005510:	e001      	b.n	8005516 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005512:	2301      	movs	r3, #1
 8005514:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	78db      	ldrb	r3, [r3, #3]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800551e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	8912      	ldrh	r2, [r2, #8]
 8005524:	fb02 f203 	mul.w	r2, r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005536:	04d9      	lsls	r1, r3, #19
 8005538:	4b68      	ldr	r3, [pc, #416]	; (80056dc <USB_HC_StartXfer+0x280>)
 800553a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800553c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	7a9b      	ldrb	r3, [r3, #10]
 8005542:	075b      	lsls	r3, r3, #29
 8005544:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	0148      	lsls	r0, r1, #5
 800554c:	6a39      	ldr	r1, [r7, #32]
 800554e:	4401      	add	r1, r0
 8005550:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005554:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005556:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68d9      	ldr	r1, [r3, #12]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	460a      	mov	r2, r1
 8005570:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	7e7b      	ldrb	r3, [r7, #25]
 80055ba:	075b      	lsls	r3, r3, #29
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	0148      	lsls	r0, r1, #5
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	4401      	add	r1, r0
 80055c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a41      	ldr	r2, [pc, #260]	; (80056e0 <USB_HC_StartXfer+0x284>)
 80055dc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055de:	4b40      	ldr	r3, [pc, #256]	; (80056e0 <USB_HC_StartXfer+0x284>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055e6:	4a3e      	ldr	r2, [pc, #248]	; (80056e0 <USB_HC_StartXfer+0x284>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	78db      	ldrb	r3, [r3, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d006      	beq.n	8005600 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80055f2:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <USB_HC_StartXfer+0x284>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <USB_HC_StartXfer+0x284>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e005      	b.n	800560c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005600:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <USB_HC_StartXfer+0x284>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005608:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <USB_HC_StartXfer+0x284>)
 800560a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800560c:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <USB_HC_StartXfer+0x284>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005614:	4a32      	ldr	r2, [pc, #200]	; (80056e0 <USB_HC_StartXfer+0x284>)
 8005616:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	461a      	mov	r2, r3
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <USB_HC_StartXfer+0x284>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d14e      	bne.n	80056d0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	78db      	ldrb	r3, [r3, #3]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d14a      	bne.n	80056d0 <USB_HC_StartXfer+0x274>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d046      	beq.n	80056d0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	79db      	ldrb	r3, [r3, #7]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d830      	bhi.n	80056ac <USB_HC_StartXfer+0x250>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <USB_HC_StartXfer+0x1f4>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005661 	.word	0x08005661
 8005654:	08005685 	.word	0x08005685
 8005658:	08005661 	.word	0x08005661
 800565c:	08005685 	.word	0x08005685
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	3303      	adds	r3, #3
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800566a:	8afa      	ldrh	r2, [r7, #22]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	b29b      	uxth	r3, r3
 8005672:	429a      	cmp	r2, r3
 8005674:	d91c      	bls.n	80056b0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	619a      	str	r2, [r3, #24]
          }
          break;
 8005682:	e015      	b.n	80056b0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	3303      	adds	r3, #3
 800568a:	089b      	lsrs	r3, r3, #2
 800568c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800568e:	8afa      	ldrh	r2, [r7, #22]
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	b29b      	uxth	r3, r3
 800569a:	429a      	cmp	r2, r3
 800569c:	d90a      	bls.n	80056b4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]
          }
          break;
 80056aa:	e003      	b.n	80056b4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80056ac:	bf00      	nop
 80056ae:	e002      	b.n	80056b6 <USB_HC_StartXfer+0x25a>
          break;
 80056b0:	bf00      	nop
 80056b2:	e000      	b.n	80056b6 <USB_HC_StartXfer+0x25a>
          break;
 80056b4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	68d9      	ldr	r1, [r3, #12]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	785a      	ldrb	r2, [r3, #1]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	b298      	uxth	r0, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	4603      	mov	r3, r0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fb86 	bl	8004ddc <USB_WritePacket>
    }
  }

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3728      	adds	r7, #40	; 0x28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	1ff80000 	.word	0x1ff80000
 80056e0:	200000b0 	.word	0x200000b0

080056e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	b29b      	uxth	r3, r3
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005706:	b480      	push	{r7}
 8005708:	b087      	sub	sp, #28
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	0c9b      	lsrs	r3, r3, #18
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <USB_HC_Halt+0x3a>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d16c      	bne.n	800581a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	440a      	add	r2, r1
 8005756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800575e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d143      	bne.n	80057f4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	440a      	add	r2, r1
 8005782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800578a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	3301      	adds	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d8:	d81d      	bhi.n	8005816 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f0:	d0ec      	beq.n	80057cc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057f2:	e080      	b.n	80058f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	440a      	add	r2, r1
 800580a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800580e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005812:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005814:	e06f      	b.n	80058f6 <USB_HC_Halt+0x1f0>
          break;
 8005816:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005818:	e06d      	b.n	80058f6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005838:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d143      	bne.n	80058d2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	440a      	add	r2, r1
 8005860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005868:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	440a      	add	r2, r1
 8005880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005888:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3301      	adds	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b6:	d81d      	bhi.n	80058f4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ce:	d0ec      	beq.n	80058aa <USB_HC_Halt+0x1a4>
 80058d0:	e011      	b.n	80058f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e000      	b.n	80058f6 <USB_HC_Halt+0x1f0>
          break;
 80058f4:	bf00      	nop
    }
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005918:	2301      	movs	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	04da      	lsls	r2, r3, #19
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <USB_DoPing+0x74>)
 8005922:	4013      	ands	r3, r2
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005934:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800594c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005954:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005962:	461a      	mov	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	1ff80000 	.word	0x1ff80000

0800597c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff f9a1 	bl	8004cd4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005992:	2110      	movs	r1, #16
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff f9d9 	bl	8004d4c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff f9fc 	bl	8004d98 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e01f      	b.n	80059e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	461a      	mov	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3301      	adds	r3, #1
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b0f      	cmp	r3, #15
 80059ea:	d9dc      	bls.n	80059a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e034      	b.n	8005a5c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a08:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a18:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a38:	d80c      	bhi.n	8005a54 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a50:	d0ec      	beq.n	8005a2c <USB_StopHost+0xb0>
 8005a52:	e000      	b.n	8005a56 <USB_StopHost+0xda>
        break;
 8005a54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d9c7      	bls.n	80059f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff f91a 	bl	8004cb2 <USB_EnableGlobalInt>

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b089      	sub	sp, #36	; 0x24
 8005a8c:	af04      	add	r7, sp, #16
 8005a8e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005a90:	2302      	movs	r3, #2
 8005a92:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005a94:	2301      	movs	r3, #1
 8005a96:	2202      	movs	r2, #2
 8005a98:	2102      	movs	r1, #2
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fc8c 	bl	80063b8 <USBH_FindInterface>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	2bff      	cmp	r3, #255	; 0xff
 8005aa8:	f000 812a 	beq.w	8005d00 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fc65 	bl	8006380 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005abc:	2050      	movs	r0, #80	; 0x50
 8005abe:	f005 faf3 	bl	800b0a8 <malloc>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	211a      	movs	r1, #26
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	4413      	add	r3, r2
 8005adc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b25b      	sxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da15      	bge.n	8005b14 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	211a      	movs	r1, #26
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	211a      	movs	r1, #26
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 ff2f 	bl	800797e <USBH_AllocPipe>
 8005b20:	4603      	mov	r3, r0
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	7858      	ldrb	r0, [r3, #1]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	8952      	ldrh	r2, [r2, #10]
 8005b40:	9202      	str	r2, [sp, #8]
 8005b42:	2203      	movs	r2, #3
 8005b44:	9201      	str	r2, [sp, #4]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	4623      	mov	r3, r4
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 fee7 	bl	8007920 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f005 f9ca 	bl	800aef4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005b60:	2300      	movs	r3, #0
 8005b62:	2200      	movs	r2, #0
 8005b64:	210a      	movs	r1, #10
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fc26 	bl	80063b8 <USBH_FindInterface>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	2bff      	cmp	r3, #255	; 0xff
 8005b74:	f000 80c4 	beq.w	8005d00 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	211a      	movs	r1, #26
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	b25b      	sxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	da16      	bge.n	8005bbe <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	211a      	movs	r1, #26
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	211a      	movs	r1, #26
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	835a      	strh	r2, [r3, #26]
 8005bbc:	e015      	b.n	8005bea <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	211a      	movs	r1, #26
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	4413      	add	r3, r2
 8005bca:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	211a      	movs	r1, #26
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005be4:	881a      	ldrh	r2, [r3, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	211a      	movs	r1, #26
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da16      	bge.n	8005c30 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005c02:	7bbb      	ldrb	r3, [r7, #14]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	211a      	movs	r1, #26
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	211a      	movs	r1, #26
 8005c1e:	fb01 f303 	mul.w	r3, r1, r3
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005c28:	881a      	ldrh	r2, [r3, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	835a      	strh	r2, [r3, #26]
 8005c2e:	e015      	b.n	8005c5c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	211a      	movs	r1, #26
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	211a      	movs	r1, #26
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005c56:	881a      	ldrh	r2, [r3, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	7b9b      	ldrb	r3, [r3, #14]
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fe8b 	bl	800797e <USBH_AllocPipe>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	7bdb      	ldrb	r3, [r3, #15]
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fe81 	bl	800797e <USBH_AllocPipe>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	7b59      	ldrb	r1, [r3, #13]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	7b98      	ldrb	r0, [r3, #14]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	8b12      	ldrh	r2, [r2, #24]
 8005c9c:	9202      	str	r2, [sp, #8]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	9201      	str	r2, [sp, #4]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4623      	mov	r3, r4
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 fe39 	bl	8007920 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	7b19      	ldrb	r1, [r3, #12]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	7bd8      	ldrb	r0, [r3, #15]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	8b52      	ldrh	r2, [r2, #26]
 8005cc6:	9202      	str	r2, [sp, #8]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	9201      	str	r2, [sp, #4]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4623      	mov	r3, r4
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fe24 	bl	8007920 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	7b5b      	ldrb	r3, [r3, #13]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f005 f903 	bl	800aef4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	7b1b      	ldrb	r3, [r3, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f005 f8fc 	bl	800aef4 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}

08005d0a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fe17 	bl	800795e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 fe3f 	bl	80079ba <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	7b1b      	ldrb	r3, [r3, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00e      	beq.n	8005d68 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	7b1b      	ldrb	r3, [r3, #12]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fe04 	bl	800795e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7b1b      	ldrb	r3, [r3, #12]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fe2c 	bl	80079ba <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	7b5b      	ldrb	r3, [r3, #13]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	7b5b      	ldrb	r3, [r3, #13]
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fdf1 	bl	800795e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	7b5b      	ldrb	r3, [r3, #13]
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 fe19 	bl	80079ba <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f005 f988 	bl	800b0b8 <free>
    phost->pActiveClass->pData = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dae:	2200      	movs	r2, #0
 8005db0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3340      	adds	r3, #64	; 0x40
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f8b2 	bl	8005f42 <GetLineCoding>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d105      	bne.n	8005df4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005dee:	2102      	movs	r1, #2
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
  }
  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d877      	bhi.n	8005f14 <USBH_CDC_Process+0x114>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <USBH_CDC_Process+0x2c>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e41 	.word	0x08005e41
 8005e30:	08005e47 	.word	0x08005e47
 8005e34:	08005e77 	.word	0x08005e77
 8005e38:	08005eeb 	.word	0x08005eeb
 8005e3c:	08005ef9 	.word	0x08005ef9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]
    break;
 8005e44:	e06d      	b.n	8005f22 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f897 	bl	8005f80 <SetLineCoding>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005e64:	e058      	b.n	8005f18 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d055      	beq.n	8005f18 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005e74:	e050      	b.n	8005f18 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	3340      	adds	r3, #64	; 0x40
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f860 	bl	8005f42 <GetLineCoding>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d126      	bne.n	8005eda <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9e:	791b      	ldrb	r3, [r3, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d13b      	bne.n	8005f1c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eae:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d133      	bne.n	8005f1c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d12b      	bne.n	8005f1c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ecc:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d124      	bne.n	8005f1c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f984 	bl	80061e0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005ed8:	e020      	b.n	8005f1c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d01d      	beq.n	8005f1c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005ee8:	e018      	b.n	8005f1c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f867 	bl	8005fbe <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8f8 	bl	80060e6 <CDC_ProcessReception>
    break;
 8005ef6:	e014      	b.n	8005f22 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005ef8:	2100      	movs	r1, #0
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fffa 	bl	8006ef4 <USBH_ClrFeature>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005f12:	e005      	b.n	8005f20 <USBH_CDC_Process+0x120>

  default:
    break;
 8005f14:	bf00      	nop
 8005f16:	e004      	b.n	8005f22 <USBH_CDC_Process+0x122>
    break;
 8005f18:	bf00      	nop
 8005f1a:	e002      	b.n	8005f22 <USBH_CDC_Process+0x122>
    break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <USBH_CDC_Process+0x122>
    break;
 8005f20:	bf00      	nop

  }

  return status;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	22a1      	movs	r2, #161	; 0xa1
 8005f50:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2221      	movs	r2, #33	; 0x21
 8005f56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2207      	movs	r2, #7
 8005f68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 f99f 	bl	80072b4 <USBH_CtlReq>
 8005f76:	4603      	mov	r3, r0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2221      	movs	r2, #33	; 0x21
 8005f8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2207      	movs	r2, #7
 8005fa6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2207      	movs	r2, #7
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 f980 	bl	80072b4 <USBH_CtlReq>
 8005fb4:	4603      	mov	r3, r0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af02      	add	r7, sp, #8
 8005fc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d002      	beq.n	8005fe4 <CDC_ProcessTransmission+0x26>
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d025      	beq.n	800602e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005fe2:	e07c      	b.n	80060de <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	8b12      	ldrh	r2, [r2, #24]
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d90c      	bls.n	800600a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	69d9      	ldr	r1, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8b1a      	ldrh	r2, [r3, #24]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	7b58      	ldrb	r0, [r3, #13]
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	4603      	mov	r3, r0
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fc49 	bl	800789a <USBH_BulkSendData>
 8006008:	e00c      	b.n	8006024 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	7b58      	ldrb	r0, [r3, #13]
 8006018:	2301      	movs	r3, #1
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4603      	mov	r3, r0
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 fc3b 	bl	800789a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800602c:	e057      	b.n	80060de <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	7b5b      	ldrb	r3, [r3, #13]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f004 ff33 	bl	800aea0 <USBH_LL_GetURBState>
 800603a:	4603      	mov	r3, r0
 800603c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800603e:	7afb      	ldrb	r3, [r7, #11]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d136      	bne.n	80060b2 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	8b12      	ldrh	r2, [r2, #24]
 800604c:	4293      	cmp	r3, r2
 800604e:	d90e      	bls.n	800606e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	8b12      	ldrh	r2, [r2, #24]
 8006058:	1a9a      	subs	r2, r3, r2
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	8b12      	ldrh	r2, [r2, #24]
 8006066:	441a      	add	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	61da      	str	r2, [r3, #28]
 800606c:	e002      	b.n	8006074 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006084:	e006      	b.n	8006094 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f892 	bl	80061b8 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2204      	movs	r2, #4
 8006098:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060a8:	2200      	movs	r2, #0
 80060aa:	4619      	mov	r1, r3
 80060ac:	f001 fd7e 	bl	8007bac <osMessagePut>
    break;
 80060b0:	e014      	b.n	80060dc <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d111      	bne.n	80060dc <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2204      	movs	r2, #4
 80060c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060d4:	2200      	movs	r2, #0
 80060d6:	4619      	mov	r1, r3
 80060d8:	f001 fd68 	bl	8007bac <osMessagePut>
    break;
 80060dc:	bf00      	nop
  }
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006102:	2b03      	cmp	r3, #3
 8006104:	d002      	beq.n	800610c <CDC_ProcessReception+0x26>
 8006106:	2b04      	cmp	r3, #4
 8006108:	d00e      	beq.n	8006128 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800610a:	e051      	b.n	80061b0 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6a19      	ldr	r1, [r3, #32]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	8b5a      	ldrh	r2, [r3, #26]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fbe3 	bl	80078e4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2204      	movs	r2, #4
 8006122:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006126:	e043      	b.n	80061b0 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	7b1b      	ldrb	r3, [r3, #12]
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f004 feb6 	bl	800aea0 <USBH_LL_GetURBState>
 8006134:	4603      	mov	r3, r0
 8006136:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d137      	bne.n	80061ae <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	7b1b      	ldrb	r3, [r3, #12]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f004 fe19 	bl	800ad7c <USBH_LL_GetLastXferSize>
 800614a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	429a      	cmp	r2, r3
 8006154:	d016      	beq.n	8006184 <CDC_ProcessReception+0x9e>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	8b5b      	ldrh	r3, [r3, #26]
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4293      	cmp	r3, r2
 8006160:	d910      	bls.n	8006184 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad2      	subs	r2, r2, r3
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	441a      	add	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2203      	movs	r2, #3
 800617e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006182:	e006      	b.n	8006192 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f81d 	bl	80061cc <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2204      	movs	r2, #4
 8006196:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061a6:	2200      	movs	r2, #0
 80061a8:	4619      	mov	r1, r3
 80061aa:	f001 fcff 	bl	8007bac <osMessagePut>
    break;
 80061ae:	bf00      	nop
  }
}
 80061b0:	bf00      	nop
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]

}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80061f4:	b5b0      	push	{r4, r5, r7, lr}
 80061f6:	b090      	sub	sp, #64	; 0x40
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006208:	2302      	movs	r3, #2
 800620a:	e03d      	b.n	8006288 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	79fa      	ldrb	r2, [r7, #7]
 8006210:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f837 	bl	8006298 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <USBH_Init+0x9c>)
 800623a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800623e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8006244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fc85 	bl	8007b5a <osMessageCreate>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006258:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <USBH_Init+0xa0>)
 800625a:	f107 0414 	add.w	r4, r7, #20
 800625e:	461d      	mov	r5, r3
 8006260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800626c:	f107 0314 	add.w	r3, r7, #20
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fc11 	bl	8007a9a <osThreadCreate>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f004 fcc9 	bl	800ac18 <USBH_LL_Init>

  return USBH_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3740      	adds	r7, #64	; 0x40
 800628c:	46bd      	mov	sp, r7
 800628e:	bdb0      	pop	{r4, r5, r7, pc}
 8006290:	0800b904 	.word	0x0800b904
 8006294:	0800b920 	.word	0x0800b920

08006298 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80062a4:	e008      	b.n	80062b8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	32e0      	adds	r2, #224	; 0xe0
 80062ac:	2100      	movs	r1, #0
 80062ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b0e      	cmp	r3, #14
 80062bc:	d9f3      	bls.n	80062a6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e009      	b.n	80062d8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062de:	d3f1      	bcc.n	80062c4 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d017      	beq.n	800636e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10f      	bne.n	8006368 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	33dc      	adds	r3, #220	; 0xdc
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
 8006366:	e004      	b.n	8006372 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006368:	2302      	movs	r3, #2
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e001      	b.n	8006372 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800636e:	2302      	movs	r3, #2
 8006370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	429a      	cmp	r2, r3
 800639a:	d204      	bcs.n	80063a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80063a4:	e001      	b.n	80063aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80063a6:	2302      	movs	r3, #2
 80063a8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	70fb      	strb	r3, [r7, #3]
 80063ca:	460b      	mov	r3, r1
 80063cc:	70bb      	strb	r3, [r7, #2]
 80063ce:	4613      	mov	r3, r2
 80063d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80063e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80063e2:	e025      	b.n	8006430 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	221a      	movs	r2, #26
 80063e8:	fb02 f303 	mul.w	r3, r2, r3
 80063ec:	3308      	adds	r3, #8
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	3302      	adds	r3, #2
 80063f4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	795b      	ldrb	r3, [r3, #5]
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d002      	beq.n	8006406 <USBH_FindInterface+0x4e>
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	2bff      	cmp	r3, #255	; 0xff
 8006404:	d111      	bne.n	800642a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800640a:	78ba      	ldrb	r2, [r7, #2]
 800640c:	429a      	cmp	r2, r3
 800640e:	d002      	beq.n	8006416 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006410:	78bb      	ldrb	r3, [r7, #2]
 8006412:	2bff      	cmp	r3, #255	; 0xff
 8006414:	d109      	bne.n	800642a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800641a:	787a      	ldrb	r2, [r7, #1]
 800641c:	429a      	cmp	r2, r3
 800641e:	d002      	beq.n	8006426 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006420:	787b      	ldrb	r3, [r7, #1]
 8006422:	2bff      	cmp	r3, #255	; 0xff
 8006424:	d101      	bne.n	800642a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	e006      	b.n	8006438 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	3301      	adds	r3, #1
 800642e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d9d6      	bls.n	80063e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006436:	23ff      	movs	r3, #255	; 0xff
}
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f004 fc1f 	bl	800ac90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006452:	2101      	movs	r1, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f004 fd36 	bl	800aec6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af04      	add	r7, sp, #16
 800646a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800646c:	2302      	movs	r3, #2
 800646e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb7e 	bl	8006b76 <USBH_IsPortEnabled>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10c      	bne.n	800649a <USBH_Process+0x36>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b03      	cmp	r3, #3
 8006492:	d002      	beq.n	800649a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2203      	movs	r2, #3
 8006498:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b0b      	cmp	r3, #11
 80064a2:	f200 81ab 	bhi.w	80067fc <USBH_Process+0x398>
 80064a6:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <USBH_Process+0x48>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064dd 	.word	0x080064dd
 80064b0:	0800651b 	.word	0x0800651b
 80064b4:	0800652f 	.word	0x0800652f
 80064b8:	080067d7 	.word	0x080067d7
 80064bc:	080067fd 	.word	0x080067fd
 80064c0:	080065d9 	.word	0x080065d9
 80064c4:	08006771 	.word	0x08006771
 80064c8:	08006609 	.word	0x08006609
 80064cc:	08006645 	.word	0x08006645
 80064d0:	0800667f 	.word	0x0800667f
 80064d4:	080066c7 	.word	0x080066c7
 80064d8:	080067bf 	.word	0x080067bf
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 818b 	beq.w	8006800 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80064f0:	20c8      	movs	r0, #200	; 0xc8
 80064f2:	f004 fd32 	bl	800af5a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f004 fc25 	bl	800ad46 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006510:	2200      	movs	r2, #0
 8006512:	4619      	mov	r1, r3
 8006514:	f001 fb4a 	bl	8007bac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006518:	e172      	b.n	8006800 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006520:	2b01      	cmp	r3, #1
 8006522:	f040 816f 	bne.w	8006804 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800652c:	e16a      	b.n	8006804 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800652e:	2064      	movs	r0, #100	; 0x64
 8006530:	f004 fd13 	bl	800af5a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f004 fbe1 	bl	800acfc <USBH_LL_GetSpeed>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2205      	movs	r2, #5
 8006548:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800654a:	2100      	movs	r1, #0
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fa16 	bl	800797e <USBH_AllocPipe>
 8006552:	4603      	mov	r3, r0
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fa0e 	bl	800797e <USBH_AllocPipe>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7919      	ldrb	r1, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800657e:	b292      	uxth	r2, r2
 8006580:	9202      	str	r2, [sp, #8]
 8006582:	2200      	movs	r2, #0
 8006584:	9201      	str	r2, [sp, #4]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4603      	mov	r3, r0
 800658a:	2280      	movs	r2, #128	; 0x80
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f9c7 	bl	8007920 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7959      	ldrb	r1, [r3, #5]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80065a6:	b292      	uxth	r2, r2
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4603      	mov	r3, r0
 80065b2:	2200      	movs	r2, #0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f9b3 	bl	8007920 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065ce:	2200      	movs	r2, #0
 80065d0:	4619      	mov	r1, r3
 80065d2:	f001 faeb 	bl	8007bac <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80065d6:	e120      	b.n	800681a <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f923 	bl	8006824 <USBH_HandleEnum>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8111 	bne.w	8006808 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d103      	bne.n	8006600 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2208      	movs	r2, #8
 80065fc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80065fe:	e103      	b.n	8006808 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2207      	movs	r2, #7
 8006604:	701a      	strb	r2, [r3, #0]
    break;
 8006606:	e0ff      	b.n	8006808 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80fc 	beq.w	800680c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800661a:	2101      	movs	r1, #1
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2208      	movs	r2, #8
 8006624:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2205      	movs	r2, #5
 800662a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800663a:	2200      	movs	r2, #0
 800663c:	4619      	mov	r1, r3
 800663e:	f001 fab5 	bl	8007bac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006642:	e0e3      	b.n	800680c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800664a:	b29b      	uxth	r3, r3
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fc09 	bl	8006e66 <USBH_SetCfg>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2209      	movs	r2, #9
 800665e:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006674:	2200      	movs	r2, #0
 8006676:	4619      	mov	r1, r3
 8006678:	f001 fa98 	bl	8007bac <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800667c:	e0cd      	b.n	800681a <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800668c:	2101      	movs	r1, #1
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc0c 	bl	8006eac <USBH_SetFeature>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	220a      	movs	r2, #10
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e002      	b.n	80066a8 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	220a      	movs	r2, #10
 80066a6:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066bc:	2200      	movs	r2, #0
 80066be:	4619      	mov	r1, r3
 80066c0:	f001 fa74 	bl	8007bac <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80066c4:	e0a9      	b.n	800681a <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d040      	beq.n	8006752 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e017      	b.n	800670e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	33dc      	adds	r3, #220	; 0xdc
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	791a      	ldrb	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d108      	bne.n	8006708 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	33dc      	adds	r3, #220	; 0xdc
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	3301      	adds	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0e4      	beq.n	80066de <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2206      	movs	r2, #6
 8006734:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800673c:	2103      	movs	r1, #3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	e006      	b.n	8006752 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	220d      	movs	r2, #13
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e002      	b.n	8006752 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	220d      	movs	r2, #13
 8006750:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2205      	movs	r2, #5
 8006756:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006766:	2200      	movs	r2, #0
 8006768:	4619      	mov	r1, r3
 800676a:	f001 fa1f 	bl	8007bac <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800676e:	e054      	b.n	800681a <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00f      	beq.n	800679a <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d13e      	bne.n	8006810 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	220b      	movs	r2, #11
 8006796:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006798:	e03a      	b.n	8006810 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	220d      	movs	r2, #13
 800679e:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2205      	movs	r2, #5
 80067a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067b4:	2200      	movs	r2, #0
 80067b6:	4619      	mov	r1, r3
 80067b8:	f001 f9f8 	bl	8007bac <osMessagePut>
    break;
 80067bc:	e028      	b.n	8006810 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d025      	beq.n	8006814 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
    }
    break;
 80067d4:	e01e      	b.n	8006814 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fd5e 	bl	8006298 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d018      	beq.n	8006818 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80067fa:	e00d      	b.n	8006818 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 80067fc:	bf00      	nop
 80067fe:	e00c      	b.n	800681a <USBH_Process+0x3b6>
    break;
 8006800:	bf00      	nop
 8006802:	e00a      	b.n	800681a <USBH_Process+0x3b6>
    break;
 8006804:	bf00      	nop
 8006806:	e008      	b.n	800681a <USBH_Process+0x3b6>
    break;
 8006808:	bf00      	nop
 800680a:	e006      	b.n	800681a <USBH_Process+0x3b6>
    break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <USBH_Process+0x3b6>
    break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <USBH_Process+0x3b6>
    break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <USBH_Process+0x3b6>
    break;
 8006818:	bf00      	nop
  }
 return USBH_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af04      	add	r7, sp, #16
 800682a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b07      	cmp	r3, #7
 8006836:	f200 8132 	bhi.w	8006a9e <USBH_HandleEnum+0x27a>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <USBH_HandleEnum+0x1c>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006861 	.word	0x08006861
 8006844:	080068d3 	.word	0x080068d3
 8006848:	080068eb 	.word	0x080068eb
 800684c:	08006961 	.word	0x08006961
 8006850:	08006979 	.word	0x08006979
 8006854:	08006997 	.word	0x08006997
 8006858:	08006a03 	.word	0x08006a03
 800685c:	08006a53 	.word	0x08006a53
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006860:	2108      	movs	r1, #8
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa2f 	bl	8006cc6 <USBH_Get_DevDesc>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 8119 	bne.w	8006aa2 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7919      	ldrb	r1, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006894:	b292      	uxth	r2, r2
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	9201      	str	r2, [sp, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4603      	mov	r3, r0
 80068a0:	2280      	movs	r2, #128	; 0x80
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f83c 	bl	8007920 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7959      	ldrb	r1, [r3, #5]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80068bc:	b292      	uxth	r2, r2
 80068be:	9202      	str	r2, [sp, #8]
 80068c0:	2200      	movs	r2, #0
 80068c2:	9201      	str	r2, [sp, #4]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4603      	mov	r3, r0
 80068c8:	2200      	movs	r2, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f828 	bl	8007920 <USBH_OpenPipe>

    }
    break;
 80068d0:	e0e7      	b.n	8006aa2 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80068d2:	2112      	movs	r1, #18
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f9f6 	bl	8006cc6 <USBH_Get_DevDesc>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 80e2 	bne.w	8006aa6 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80068e8:	e0dd      	b.n	8006aa6 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80068ea:	2101      	movs	r1, #1
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa96 	bl	8006e1e <USBH_SetAddress>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 80d8 	bne.w	8006aaa <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 80068fa:	2002      	movs	r0, #2
 80068fc:	f004 fb2d 	bl	800af5a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2203      	movs	r2, #3
 800690c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7919      	ldrb	r1, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006922:	b292      	uxth	r2, r2
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	9201      	str	r2, [sp, #4]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	4603      	mov	r3, r0
 800692e:	2280      	movs	r2, #128	; 0x80
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fff5 	bl	8007920 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	7959      	ldrb	r1, [r3, #5]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800694a:	b292      	uxth	r2, r2
 800694c:	9202      	str	r2, [sp, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	9201      	str	r2, [sp, #4]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4603      	mov	r3, r0
 8006956:	2200      	movs	r2, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 ffe1 	bl	8007920 <USBH_OpenPipe>
    }
    break;
 800695e:	e0a4      	b.n	8006aaa <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006960:	2109      	movs	r1, #9
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9d7 	bl	8006d16 <USBH_Get_CfgDesc>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 809f 	bne.w	8006aae <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2204      	movs	r2, #4
 8006974:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006976:	e09a      	b.n	8006aae <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9c8 	bl	8006d16 <USBH_Get_CfgDesc>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f040 8092 	bne.w	8006ab2 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2205      	movs	r2, #5
 8006992:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006994:	e08d      	b.n	8006ab2 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01e      	beq.n	80069de <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80069ac:	23ff      	movs	r3, #255	; 0xff
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9d5 	bl	8006d5e <USBH_Get_StringDesc>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d17d      	bne.n	8006ab6 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2206      	movs	r2, #6
 80069be:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2205      	movs	r2, #5
 80069c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069d4:	2200      	movs	r2, #0
 80069d6:	4619      	mov	r1, r3
 80069d8:	f001 f8e8 	bl	8007bac <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80069dc:	e06b      	b.n	8006ab6 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2206      	movs	r2, #6
 80069e2:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2205      	movs	r2, #5
 80069e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069f8:	2200      	movs	r2, #0
 80069fa:	4619      	mov	r1, r3
 80069fc:	f001 f8d6 	bl	8007bac <osMessagePut>
    break;
 8006a00:	e059      	b.n	8006ab6 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006a18:	23ff      	movs	r3, #255	; 0xff
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f99f 	bl	8006d5e <USBH_Get_StringDesc>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d149      	bne.n	8006aba <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2207      	movs	r2, #7
 8006a2a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006a2c:	e045      	b.n	8006aba <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2207      	movs	r2, #7
 8006a32:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2205      	movs	r2, #5
 8006a38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f001 f8ae 	bl	8007bac <osMessagePut>
    break;
 8006a50:	e033      	b.n	8006aba <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00f      	beq.n	8006a7c <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006a68:	23ff      	movs	r3, #255	; 0xff
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f977 	bl	8006d5e <USBH_Get_StringDesc>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d123      	bne.n	8006abe <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006a7a:	e020      	b.n	8006abe <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2205      	movs	r2, #5
 8006a84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a94:	2200      	movs	r2, #0
 8006a96:	4619      	mov	r1, r3
 8006a98:	f001 f888 	bl	8007bac <osMessagePut>
    break;
 8006a9c:	e00f      	b.n	8006abe <USBH_HandleEnum+0x29a>

  default:
    break;
 8006a9e:	bf00      	nop
 8006aa0:	e00e      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006aa2:	bf00      	nop
 8006aa4:	e00c      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006aa6:	bf00      	nop
 8006aa8:	e00a      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006aaa:	bf00      	nop
 8006aac:	e008      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006aae:	bf00      	nop
 8006ab0:	e006      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006ab2:	bf00      	nop
 8006ab4:	e004      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006ab6:	bf00      	nop
 8006ab8:	e002      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <USBH_HandleEnum+0x29c>
    break;
 8006abe:	bf00      	nop
  }
  return Status;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop

08006acc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f804 	bl	8006b0e <USBH_HandleSof>
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b0b      	cmp	r3, #11
 8006b1e:	d10a      	bne.n	8006b36 <USBH_HandleSof+0x28>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
  }
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006b4e:	bf00      	nop
}
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006b6a:	bf00      	nop
}
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bba:	2104      	movs	r1, #4
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
 8006bc0:	e007      	b.n	8006bd2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d102      	bne.n	8006bd2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006be6:	2200      	movs	r2, #0
 8006be8:	4619      	mov	r1, r3
 8006bea:	f000 ffdf 	bl	8007bac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f004 f860 	bl	800acc6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	791b      	ldrb	r3, [r3, #4]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fed4 	bl	80079ba <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	795b      	ldrb	r3, [r3, #5]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fece 	bl	80079ba <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c36:	2105      	movs	r1, #5
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f004 f827 	bl	800ac90 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2203      	movs	r2, #3
 8006c46:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f000 ffa4 	bl	8007bac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8006c7c:	f107 030c 	add.w	r3, r7, #12
 8006c80:	f04f 32ff 	mov.w	r2, #4294967295
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 ffd1 	bl	8007c2c <osMessageGet>
    if(event.status == osEventMessage)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b10      	cmp	r3, #16
 8006c8e:	d1f2      	bne.n	8006c76 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fbe7 	bl	8006464 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006c96:	e7ee      	b.n	8006c76 <USBH_Process_OS+0x8>

08006c98 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f000 ff78 	bl	8007bac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af02      	add	r7, sp, #8
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f864 	bl	8006db4 <USBH_GetDescriptor>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	b292      	uxth	r2, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	f000 f918 	bl	8006f3c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af02      	add	r7, sp, #8
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	331c      	adds	r3, #28
 8006d26:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d32:	2100      	movs	r1, #0
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f83d 	bl	8006db4 <USBH_GetDescriptor>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	72fb      	strb	r3, [r7, #11]
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006d4a:	887a      	ldrh	r2, [r7, #2]
 8006d4c:	68f9      	ldr	r1, [r7, #12]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f964 	bl	800701c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b088      	sub	sp, #32
 8006d62:	af02      	add	r7, sp, #8
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	72fb      	strb	r3, [r7, #11]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006d72:	7afb      	ldrb	r3, [r7, #11]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d7a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006d82:	893b      	ldrh	r3, [r7, #8]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	460b      	mov	r3, r1
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f812 	bl	8006db4 <USBH_GetDescriptor>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006da0:	893a      	ldrh	r2, [r7, #8]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fa37 	bl	8007218 <USBH_ParseStringDesc>
  }
  return status;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	72fb      	strb	r3, [r7, #11]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	789b      	ldrb	r3, [r3, #2]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d11c      	bne.n	8006e08 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2206      	movs	r2, #6
 8006dde:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	893a      	ldrh	r2, [r7, #8]
 8006de4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006de6:	893b      	ldrh	r3, [r7, #8]
 8006de8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df0:	d104      	bne.n	8006dfc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f240 4209 	movw	r2, #1033	; 0x409
 8006df8:	829a      	strh	r2, [r3, #20]
 8006dfa:	e002      	b.n	8006e02 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8b3a      	ldrh	r2, [r7, #24]
 8006e06:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006e08:	8b3b      	ldrh	r3, [r7, #24]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fa50 	bl	80072b4 <USBH_CtlReq>
 8006e14:	4603      	mov	r3, r0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	789b      	ldrb	r3, [r3, #2]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d10f      	bne.n	8006e52 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2205      	movs	r2, #5
 8006e3c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa2c 	bl	80072b4 <USBH_CtlReq>
 8006e5c:	4603      	mov	r3, r0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	789b      	ldrb	r3, [r3, #2]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d10e      	bne.n	8006e98 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2209      	movs	r2, #9
 8006e84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	887a      	ldrh	r2, [r7, #2]
 8006e8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa09 	bl	80072b4 <USBH_CtlReq>
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	789b      	ldrb	r3, [r3, #2]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d10f      	bne.n	8006ee0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2203      	movs	r2, #3
 8006eca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9e5 	bl	80072b4 <USBH_CtlReq>
 8006eea:	4603      	mov	r3, r0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	789b      	ldrb	r3, [r3, #2]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d10f      	bne.n	8006f28 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9c1 	bl	80072b4 <USBH_CtlReq>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	785a      	ldrb	r2, [r3, #1]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	3302      	adds	r3, #2
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3303      	adds	r3, #3
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	791a      	ldrb	r2, [r3, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	795a      	ldrb	r2, [r3, #5]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	799a      	ldrb	r2, [r3, #6]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	79da      	ldrb	r2, [r3, #7]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d939      	bls.n	8007010 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3309      	adds	r3, #9
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	330a      	adds	r3, #10
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	330b      	adds	r3, #11
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	330d      	adds	r3, #13
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	7b9a      	ldrb	r2, [r3, #14]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	7bda      	ldrb	r2, [r3, #15]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	7c1a      	ldrb	r2, [r3, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	7c5a      	ldrb	r2, [r3, #17]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	745a      	strb	r2, [r3, #17]
  }
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	785a      	ldrb	r2, [r3, #1]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	3302      	adds	r3, #2
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b29a      	uxth	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	3303      	adds	r3, #3
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	b29b      	uxth	r3, r3
 8007062:	4313      	orrs	r3, r2
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	791a      	ldrb	r2, [r3, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	795a      	ldrb	r2, [r3, #5]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	799a      	ldrb	r2, [r3, #6]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	79da      	ldrb	r2, [r3, #7]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	7a1a      	ldrb	r2, [r3, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	2b09      	cmp	r3, #9
 8007096:	d95f      	bls.n	8007158 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007098:	2309      	movs	r3, #9
 800709a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800709c:	2300      	movs	r3, #0
 800709e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80070a0:	e051      	b.n	8007146 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80070a2:	f107 0316 	add.w	r3, r7, #22
 80070a6:	4619      	mov	r1, r3
 80070a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070aa:	f000 f8e8 	bl	800727e <USBH_GetNextDesc>
 80070ae:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d146      	bne.n	8007146 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80070b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070bc:	221a      	movs	r2, #26
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	3308      	adds	r3, #8
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	3302      	adds	r3, #2
 80070ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80070cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ce:	69f8      	ldr	r0, [r7, #28]
 80070d0:	f000 f846 	bl	8007160 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80070da:	2300      	movs	r3, #0
 80070dc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80070de:	e022      	b.n	8007126 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80070e0:	f107 0316 	add.w	r3, r7, #22
 80070e4:	4619      	mov	r1, r3
 80070e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070e8:	f000 f8c9 	bl	800727e <USBH_GetNextDesc>
 80070ec:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	d117      	bne.n	8007126 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80070f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80070fe:	3201      	adds	r2, #1
 8007100:	00d2      	lsls	r2, r2, #3
 8007102:	211a      	movs	r1, #26
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	4413      	add	r3, r2
 800710a:	3308      	adds	r3, #8
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	3304      	adds	r3, #4
 8007112:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007116:	69b8      	ldr	r0, [r7, #24]
 8007118:	f000 f851 	bl	80071be <USBH_ParseEPDesc>
            ep_ix++;
 800711c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007120:	3301      	adds	r3, #1
 8007122:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800712e:	429a      	cmp	r2, r3
 8007130:	d204      	bcs.n	800713c <USBH_ParseCfgDesc+0x120>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	885a      	ldrh	r2, [r3, #2]
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	429a      	cmp	r2, r3
 800713a:	d8d1      	bhi.n	80070e0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800713c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007140:	3301      	adds	r3, #1
 8007142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800714a:	2b01      	cmp	r3, #1
 800714c:	d804      	bhi.n	8007158 <USBH_ParseCfgDesc+0x13c>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	885a      	ldrh	r2, [r3, #2]
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	429a      	cmp	r2, r3
 8007156:	d8a4      	bhi.n	80070a2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007158:	bf00      	nop
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	785a      	ldrb	r2, [r3, #1]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	789a      	ldrb	r2, [r3, #2]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	78da      	ldrb	r2, [r3, #3]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	791a      	ldrb	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	795a      	ldrb	r2, [r3, #5]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	799a      	ldrb	r2, [r3, #6]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	79da      	ldrb	r2, [r3, #7]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	7a1a      	ldrb	r2, [r3, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	721a      	strb	r2, [r3, #8]
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	785a      	ldrb	r2, [r3, #1]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	789a      	ldrb	r2, [r3, #2]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	78da      	ldrb	r2, [r3, #3]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	3305      	adds	r3, #5
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	799a      	ldrb	r2, [r3, #6]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	719a      	strb	r2, [r3, #6]
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d120      	bne.n	8007272 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	1e9a      	subs	r2, r3, #2
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	4293      	cmp	r3, r2
 800723a:	bf28      	it	cs
 800723c:	4613      	movcs	r3, r2
 800723e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3302      	adds	r3, #2
 8007244:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007246:	2300      	movs	r3, #0
 8007248:	82fb      	strh	r3, [r7, #22]
 800724a:	e00b      	b.n	8007264 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800724c:	8afb      	ldrh	r3, [r7, #22]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4413      	add	r3, r2
 8007252:	781a      	ldrb	r2, [r3, #0]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	3301      	adds	r3, #1
 800725c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800725e:	8afb      	ldrh	r3, [r7, #22]
 8007260:	3302      	adds	r3, #2
 8007262:	82fb      	strh	r3, [r7, #22]
 8007264:	8afa      	ldrh	r2, [r7, #22]
 8007266:	8abb      	ldrh	r3, [r7, #20]
 8007268:	429a      	cmp	r2, r3
 800726a:	d3ef      	bcc.n	800724c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
  }
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	4413      	add	r3, r2
 8007294:	b29a      	uxth	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80072a6:	68fb      	ldr	r3, [r7, #12]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	789b      	ldrb	r3, [r3, #2]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d002      	beq.n	80072d4 <USBH_CtlReq+0x20>
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d01d      	beq.n	800730e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 80072d2:	e042      	b.n	800735a <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	88fa      	ldrh	r2, [r7, #6]
 80072de:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2202      	movs	r2, #2
 80072ea:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80072ec:	2301      	movs	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2203      	movs	r2, #3
 80072f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007304:	2200      	movs	r2, #0
 8007306:	4619      	mov	r1, r3
 8007308:	f000 fc50 	bl	8007bac <osMessagePut>
    break;
 800730c:	e025      	b.n	800735a <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 f828 	bl	8007364 <USBH_HandleControl>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
    break;
 800732e:	e013      	b.n	8007358 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d108      	bne.n	8007348 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007342:	2303      	movs	r3, #3
 8007344:	75fb      	strb	r3, [r7, #23]
    break;
 8007346:	e007      	b.n	8007358 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d104      	bne.n	8007358 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007354:	2302      	movs	r3, #2
 8007356:	75fb      	strb	r3, [r7, #23]
    break;
 8007358:	bf00      	nop
  }
  return status;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af02      	add	r7, sp, #8
 800736a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007370:	2300      	movs	r3, #0
 8007372:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	7e1b      	ldrb	r3, [r3, #24]
 8007378:	3b01      	subs	r3, #1
 800737a:	2b0a      	cmp	r3, #10
 800737c:	f200 821f 	bhi.w	80077be <USBH_HandleControl+0x45a>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <USBH_HandleControl+0x24>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073b5 	.word	0x080073b5
 800738c:	080073cf 	.word	0x080073cf
 8007390:	08007471 	.word	0x08007471
 8007394:	08007497 	.word	0x08007497
 8007398:	08007523 	.word	0x08007523
 800739c:	0800754f 	.word	0x0800754f
 80073a0:	08007611 	.word	0x08007611
 80073a4:	08007633 	.word	0x08007633
 80073a8:	080076c5 	.word	0x080076c5
 80073ac:	080076ed 	.word	0x080076ed
 80073b0:	0800777f 	.word	0x0800777f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f103 0110 	add.w	r1, r3, #16
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	795b      	ldrb	r3, [r3, #5]
 80073be:	461a      	mov	r2, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fa0d 	bl	80077e0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	761a      	strb	r2, [r3, #24]
    break;
 80073cc:	e202      	b.n	80077d4 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	795b      	ldrb	r3, [r3, #5]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f003 fd63 	bl	800aea0 <USBH_LL_GetURBState>
 80073da:	4603      	mov	r3, r0
 80073dc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d12c      	bne.n	800743e <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7c1b      	ldrb	r3, [r3, #16]
 80073e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073ec:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8adb      	ldrh	r3, [r3, #22]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80073f6:	7b7b      	ldrb	r3, [r7, #13]
 80073f8:	2b80      	cmp	r3, #128	; 0x80
 80073fa:	d103      	bne.n	8007404 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2203      	movs	r2, #3
 8007400:	761a      	strb	r2, [r3, #24]
 8007402:	e00d      	b.n	8007420 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2205      	movs	r2, #5
 8007408:	761a      	strb	r2, [r3, #24]
 800740a:	e009      	b.n	8007420 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800740c:	7b7b      	ldrb	r3, [r7, #13]
 800740e:	2b80      	cmp	r3, #128	; 0x80
 8007410:	d103      	bne.n	800741a <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2209      	movs	r2, #9
 8007416:	761a      	strb	r2, [r3, #24]
 8007418:	e002      	b.n	8007420 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2207      	movs	r2, #7
 800741e:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2203      	movs	r2, #3
 8007424:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007434:	2200      	movs	r2, #0
 8007436:	4619      	mov	r1, r3
 8007438:	f000 fbb8 	bl	8007bac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800743c:	e1c1      	b.n	80077c2 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d003      	beq.n	800744c <USBH_HandleControl+0xe8>
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b02      	cmp	r3, #2
 8007448:	f040 81bb 	bne.w	80077c2 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	220b      	movs	r2, #11
 8007450:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2203      	movs	r2, #3
 8007456:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007466:	2200      	movs	r2, #0
 8007468:	4619      	mov	r1, r3
 800746a:	f000 fb9f 	bl	8007bac <osMessagePut>
    break;
 800746e:	e1a8      	b.n	80077c2 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007476:	b29a      	uxth	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6899      	ldr	r1, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	899a      	ldrh	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	791b      	ldrb	r3, [r3, #4]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9e8 	bl	800785e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2204      	movs	r2, #4
 8007492:	761a      	strb	r2, [r3, #24]
    break;
 8007494:	e19e      	b.n	80077d4 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	791b      	ldrb	r3, [r3, #4]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f003 fcff 	bl	800aea0 <USBH_LL_GetURBState>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d110      	bne.n	80074ce <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2209      	movs	r2, #9
 80074b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2203      	movs	r2, #3
 80074b6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074c6:	2200      	movs	r2, #0
 80074c8:	4619      	mov	r1, r3
 80074ca:	f000 fb6f 	bl	8007bac <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	d110      	bne.n	80074f6 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80074d4:	2303      	movs	r3, #3
 80074d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2203      	movs	r2, #3
 80074dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ec:	2200      	movs	r2, #0
 80074ee:	4619      	mov	r1, r3
 80074f0:	f000 fb5c 	bl	8007bac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80074f4:	e167      	b.n	80077c6 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	f040 8164 	bne.w	80077c6 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	220b      	movs	r2, #11
 8007502:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2203      	movs	r2, #3
 8007508:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007518:	2200      	movs	r2, #0
 800751a:	4619      	mov	r1, r3
 800751c:	f000 fb46 	bl	8007bac <osMessagePut>
    break;
 8007520:	e151      	b.n	80077c6 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6899      	ldr	r1, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	899a      	ldrh	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7958      	ldrb	r0, [r3, #5]
 800752e:	2301      	movs	r3, #1
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	4603      	mov	r3, r0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f96d 	bl	8007814 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007540:	b29a      	uxth	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2206      	movs	r2, #6
 800754a:	761a      	strb	r2, [r3, #24]
    break;
 800754c:	e142      	b.n	80077d4 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	795b      	ldrb	r3, [r3, #5]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f003 fca3 	bl	800aea0 <USBH_LL_GetURBState>
 800755a:	4603      	mov	r3, r0
 800755c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d111      	bne.n	8007588 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2207      	movs	r2, #7
 8007568:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2203      	movs	r2, #3
 800756e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800757e:	2200      	movs	r2, #0
 8007580:	4619      	mov	r1, r3
 8007582:	f000 fb13 	bl	8007bac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007586:	e120      	b.n	80077ca <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b05      	cmp	r3, #5
 800758c:	d113      	bne.n	80075b6 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	220c      	movs	r2, #12
 8007592:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007594:	2303      	movs	r3, #3
 8007596:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2203      	movs	r2, #3
 800759c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ac:	2200      	movs	r2, #0
 80075ae:	4619      	mov	r1, r3
 80075b0:	f000 fafc 	bl	8007bac <osMessagePut>
    break;
 80075b4:	e109      	b.n	80077ca <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d111      	bne.n	80075e0 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2205      	movs	r2, #5
 80075c0:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2203      	movs	r2, #3
 80075c6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075d6:	2200      	movs	r2, #0
 80075d8:	4619      	mov	r1, r3
 80075da:	f000 fae7 	bl	8007bac <osMessagePut>
    break;
 80075de:	e0f4      	b.n	80077ca <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	f040 80f1 	bne.w	80077ca <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	220b      	movs	r2, #11
 80075ec:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80075ee:	2302      	movs	r3, #2
 80075f0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2203      	movs	r2, #3
 80075f6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007606:	2200      	movs	r2, #0
 8007608:	4619      	mov	r1, r3
 800760a:	f000 facf 	bl	8007bac <osMessagePut>
    break;
 800760e:	e0dc      	b.n	80077ca <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	791b      	ldrb	r3, [r3, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	2100      	movs	r1, #0
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f920 	bl	800785e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2208      	movs	r2, #8
 800762e:	761a      	strb	r2, [r3, #24]

    break;
 8007630:	e0d0      	b.n	80077d4 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f003 fc31 	bl	800aea0 <USBH_LL_GetURBState>
 800763e:	4603      	mov	r3, r0
 8007640:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d113      	bne.n	8007670 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	220d      	movs	r2, #13
 800764c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2203      	movs	r2, #3
 8007656:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007666:	2200      	movs	r2, #0
 8007668:	4619      	mov	r1, r3
 800766a:	f000 fa9f 	bl	8007bac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800766e:	e0ae      	b.n	80077ce <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b04      	cmp	r3, #4
 8007674:	d111      	bne.n	800769a <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220b      	movs	r2, #11
 800767a:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2203      	movs	r2, #3
 8007680:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007690:	2200      	movs	r2, #0
 8007692:	4619      	mov	r1, r3
 8007694:	f000 fa8a 	bl	8007bac <osMessagePut>
    break;
 8007698:	e099      	b.n	80077ce <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b05      	cmp	r3, #5
 800769e:	f040 8096 	bne.w	80077ce <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076ba:	2200      	movs	r2, #0
 80076bc:	4619      	mov	r1, r3
 80076be:	f000 fa75 	bl	8007bac <osMessagePut>
    break;
 80076c2:	e084      	b.n	80077ce <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	795a      	ldrb	r2, [r3, #5]
 80076c8:	2301      	movs	r3, #1
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f89e 	bl	8007814 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	220a      	movs	r2, #10
 80076e8:	761a      	strb	r2, [r3, #24]
    break;
 80076ea:	e073      	b.n	80077d4 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	795b      	ldrb	r3, [r3, #5]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f003 fbd4 	bl	800aea0 <USBH_LL_GetURBState>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d113      	bne.n	800772a <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220d      	movs	r2, #13
 800770a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2203      	movs	r2, #3
 8007710:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007720:	2200      	movs	r2, #0
 8007722:	4619      	mov	r1, r3
 8007724:	f000 fa42 	bl	8007bac <osMessagePut>
#endif
#endif
      }

    }
    break;
 8007728:	e053      	b.n	80077d2 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d111      	bne.n	8007754 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2209      	movs	r2, #9
 8007734:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2203      	movs	r2, #3
 800773a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800774a:	2200      	movs	r2, #0
 800774c:	4619      	mov	r1, r3
 800774e:	f000 fa2d 	bl	8007bac <osMessagePut>
    break;
 8007752:	e03e      	b.n	80077d2 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b04      	cmp	r3, #4
 8007758:	d13b      	bne.n	80077d2 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220b      	movs	r2, #11
 800775e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2203      	movs	r2, #3
 8007764:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007774:	2200      	movs	r2, #0
 8007776:	4619      	mov	r1, r3
 8007778:	f000 fa18 	bl	8007bac <osMessagePut>
    break;
 800777c:	e029      	b.n	80077d2 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7e5b      	ldrb	r3, [r3, #25]
 8007782:	3301      	adds	r3, #1
 8007784:	b2da      	uxtb	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	765a      	strb	r2, [r3, #25]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7e5b      	ldrb	r3, [r3, #25]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d809      	bhi.n	80077a6 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f003 fa97 	bl	800acc6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80077a4:	e016      	b.n	80077d4 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077ac:	2106      	movs	r1, #6
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80077b8:	2302      	movs	r3, #2
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e00a      	b.n	80077d4 <USBH_HandleControl+0x470>

  default:
    break;
 80077be:	bf00      	nop
 80077c0:	e008      	b.n	80077d4 <USBH_HandleControl+0x470>
    break;
 80077c2:	bf00      	nop
 80077c4:	e006      	b.n	80077d4 <USBH_HandleControl+0x470>
    break;
 80077c6:	bf00      	nop
 80077c8:	e004      	b.n	80077d4 <USBH_HandleControl+0x470>
    break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <USBH_HandleControl+0x470>
    break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <USBH_HandleControl+0x470>
    break;
 80077d2:	bf00      	nop
  }
  return status;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af04      	add	r7, sp, #16
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80077ee:	79f9      	ldrb	r1, [r7, #7]
 80077f0:	2300      	movs	r3, #0
 80077f2:	9303      	str	r3, [sp, #12]
 80077f4:	2308      	movs	r3, #8
 80077f6:	9302      	str	r3, [sp, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	2300      	movs	r3, #0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2300      	movs	r3, #0
 8007802:	2200      	movs	r2, #0
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f003 fb1a 	bl	800ae3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af04      	add	r7, sp, #16
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	460b      	mov	r3, r1
 8007824:	80fb      	strh	r3, [r7, #6]
 8007826:	4613      	mov	r3, r2
 8007828:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007838:	7979      	ldrb	r1, [r7, #5]
 800783a:	7e3b      	ldrb	r3, [r7, #24]
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	9302      	str	r3, [sp, #8]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	2301      	movs	r3, #1
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f003 faf5 	bl	800ae3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b088      	sub	sp, #32
 8007862:	af04      	add	r7, sp, #16
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	4611      	mov	r1, r2
 800786a:	461a      	mov	r2, r3
 800786c:	460b      	mov	r3, r1
 800786e:	80fb      	strh	r3, [r7, #6]
 8007870:	4613      	mov	r3, r2
 8007872:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007874:	7979      	ldrb	r1, [r7, #5]
 8007876:	2300      	movs	r3, #0
 8007878:	9303      	str	r3, [sp, #12]
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	9302      	str	r3, [sp, #8]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	2301      	movs	r3, #1
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	2300      	movs	r3, #0
 8007888:	2201      	movs	r2, #1
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f003 fad7 	bl	800ae3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007890:	2300      	movs	r3, #0

}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b088      	sub	sp, #32
 800789e:	af04      	add	r7, sp, #16
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	4611      	mov	r1, r2
 80078a6:	461a      	mov	r2, r3
 80078a8:	460b      	mov	r3, r1
 80078aa:	80fb      	strh	r3, [r7, #6]
 80078ac:	4613      	mov	r3, r2
 80078ae:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80078be:	7979      	ldrb	r1, [r7, #5]
 80078c0:	7e3b      	ldrb	r3, [r7, #24]
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	2301      	movs	r3, #1
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	2302      	movs	r3, #2
 80078d2:	2200      	movs	r2, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f003 fab2 	bl	800ae3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4611      	mov	r1, r2
 80078f0:	461a      	mov	r2, r3
 80078f2:	460b      	mov	r3, r1
 80078f4:	80fb      	strh	r3, [r7, #6]
 80078f6:	4613      	mov	r3, r2
 80078f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80078fa:	7979      	ldrb	r1, [r7, #5]
 80078fc:	2300      	movs	r3, #0
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	2301      	movs	r3, #1
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	2302      	movs	r3, #2
 800790e:	2201      	movs	r2, #1
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f003 fa94 	bl	800ae3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af04      	add	r7, sp, #16
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	461a      	mov	r2, r3
 800792e:	4603      	mov	r3, r0
 8007930:	70fb      	strb	r3, [r7, #3]
 8007932:	460b      	mov	r3, r1
 8007934:	70bb      	strb	r3, [r7, #2]
 8007936:	4613      	mov	r3, r2
 8007938:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800793a:	7878      	ldrb	r0, [r7, #1]
 800793c:	78ba      	ldrb	r2, [r7, #2]
 800793e:	78f9      	ldrb	r1, [r7, #3]
 8007940:	8b3b      	ldrh	r3, [r7, #24]
 8007942:	9302      	str	r3, [sp, #8]
 8007944:	7d3b      	ldrb	r3, [r7, #20]
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	7c3b      	ldrb	r3, [r7, #16]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4603      	mov	r3, r0
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f003 fa27 	bl	800ada2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007954:	2300      	movs	r3, #0

}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f003 fa46 	bl	800ae00 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007974:	2300      	movs	r3, #0

}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f831 	bl	80079f2 <USBH_GetFreePipe>
 8007990:	4603      	mov	r3, r0
 8007992:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007994:	89fb      	ldrh	r3, [r7, #14]
 8007996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	89fa      	ldrh	r2, [r7, #14]
 80079a2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32e0      	adds	r2, #224	; 0xe0
 80079aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80079ae:	89fb      	ldrh	r3, [r7, #14]
 80079b0:	b2db      	uxtb	r3, r3
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	2b0a      	cmp	r3, #10
 80079ca:	d80b      	bhi.n	80079e4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32e0      	adds	r2, #224	; 0xe0
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	32e0      	adds	r2, #224	; 0xe0
 80079e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	e00e      	b.n	8007a22 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007a04:	7bfa      	ldrb	r2, [r7, #15]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	32e0      	adds	r2, #224	; 0xe0
 8007a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	e007      	b.n	8007a2c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b0a      	cmp	r3, #10
 8007a26:	d9ed      	bls.n	8007a04 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a4a:	2b84      	cmp	r3, #132	; 0x84
 8007a4c:	d005      	beq.n	8007a5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	3303      	adds	r3, #3
 8007a58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a6e:	f3ef 8305 	mrs	r3, IPSR
 8007a72:	607b      	str	r3, [r7, #4]
  return(result);
 8007a74:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bf14      	ite	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	2300      	moveq	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a90:	f001 f8dc 	bl	8008c4c <vTaskStartScheduler>
  
  return osOK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9c:	b089      	sub	sp, #36	; 0x24
 8007a9e:	af04      	add	r7, sp, #16
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d020      	beq.n	8007aee <osThreadCreate+0x54>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01c      	beq.n	8007aee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685c      	ldr	r4, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681d      	ldr	r5, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691e      	ldr	r6, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff ffb6 	bl	8007a38 <makeFreeRtosPriority>
 8007acc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ad6:	9202      	str	r2, [sp, #8]
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	9100      	str	r1, [sp, #0]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	4632      	mov	r2, r6
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 fef7 	bl	80088d6 <xTaskCreateStatic>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e01c      	b.n	8007b28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685c      	ldr	r4, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007afa:	b29e      	uxth	r6, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff ff98 	bl	8007a38 <makeFreeRtosPriority>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	f107 030c 	add.w	r3, r7, #12
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	9200      	str	r2, [sp, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	4632      	mov	r2, r6
 8007b16:	4629      	mov	r1, r5
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 ff35 	bl	8008988 <xTaskCreate>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d001      	beq.n	8007b28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <osDelay+0x16>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	e000      	b.n	8007b4a <osDelay+0x18>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 f84a 	bl	8008be4 <vTaskDelay>
  
  return osOK;
 8007b50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007b5a:	b590      	push	{r4, r7, lr}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af02      	add	r7, sp, #8
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d012      	beq.n	8007b92 <osMessageCreate+0x38>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00e      	beq.n	8007b92 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6859      	ldr	r1, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68dc      	ldr	r4, [r3, #12]
 8007b84:	2300      	movs	r3, #0
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4623      	mov	r3, r4
 8007b8a:	f000 f9df 	bl	8007f4c <xQueueGenericCreateStatic>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	e008      	b.n	8007ba4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f000 fa47 	bl	8008030 <xQueueGenericCreate>
 8007ba2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd90      	pop	{r4, r7, pc}

08007bac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <osMessagePut+0x1e>
    ticks = 1;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007bca:	f7ff ff4d 	bl	8007a68 <inHandlerMode>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d018      	beq.n	8007c06 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007bd4:	f107 0210 	add.w	r2, r7, #16
 8007bd8:	f107 0108 	add.w	r1, r7, #8
 8007bdc:	2300      	movs	r3, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fb7c 	bl	80082dc <xQueueGenericSendFromISR>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <osMessagePut+0x42>
      return osErrorOS;
 8007bea:	23ff      	movs	r3, #255	; 0xff
 8007bec:	e018      	b.n	8007c20 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d014      	beq.n	8007c1e <osMessagePut+0x72>
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <osMessagePut+0x7c>)
 8007bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	e00b      	b.n	8007c1e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007c06:	f107 0108 	add.w	r1, r7, #8
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fa6a 	bl	80080e8 <xQueueGenericSend>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d001      	beq.n	8007c1e <osMessagePut+0x72>
      return osErrorOS;
 8007c1a:	23ff      	movs	r3, #255	; 0xff
 8007c1c:	e000      	b.n	8007c20 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007c2c:	b590      	push	{r4, r7, lr}
 8007c2e:	b08b      	sub	sp, #44	; 0x2c
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007c46:	2380      	movs	r3, #128	; 0x80
 8007c48:	617b      	str	r3, [r7, #20]
    return event;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	461c      	mov	r4, r3
 8007c4e:	f107 0314 	add.w	r3, r7, #20
 8007c52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c5a:	e054      	b.n	8007d06 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d103      	bne.n	8007c74 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
 8007c72:	e009      	b.n	8007c88 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d006      	beq.n	8007c88 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <osMessageGet+0x5c>
      ticks = 1;
 8007c84:	2301      	movs	r3, #1
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007c88:	f7ff feee 	bl	8007a68 <inHandlerMode>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d01c      	beq.n	8007ccc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007c92:	f107 0220 	add.w	r2, r7, #32
 8007c96:	f107 0314 	add.w	r3, r7, #20
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	68b8      	ldr	r0, [r7, #8]
 8007ca0:	f000 fc8c 	bl	80085bc <xQueueReceiveFromISR>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d102      	bne.n	8007cb0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007caa:	2310      	movs	r3, #16
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e001      	b.n	8007cb4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01d      	beq.n	8007cf6 <osMessageGet+0xca>
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <osMessageGet+0xe4>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	e014      	b.n	8007cf6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007ccc:	f107 0314 	add.w	r3, r7, #20
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68b8      	ldr	r0, [r7, #8]
 8007cd8:	f000 fb94 	bl	8008404 <xQueueReceive>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d102      	bne.n	8007ce8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007ce2:	2310      	movs	r3, #16
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	e006      	b.n	8007cf6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <osMessageGet+0xc6>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <osMessageGet+0xc8>
 8007cf2:	2340      	movs	r3, #64	; 0x40
 8007cf4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	461c      	mov	r4, r3
 8007cfa:	f107 0314 	add.w	r3, r7, #20
 8007cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	372c      	adds	r7, #44	; 0x2c
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd90      	pop	{r4, r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f103 0208 	add.w	r2, r3, #8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f103 0208 	add.w	r2, r3, #8
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f103 0208 	add.w	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dcc:	d103      	bne.n	8007dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e00c      	b.n	8007df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e002      	b.n	8007de4 <vListInsert+0x2e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d2f6      	bcs.n	8007dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6892      	ldr	r2, [r2, #8]
 8007e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6852      	ldr	r2, [r2, #4]
 8007e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d103      	bne.n	8007e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	e7fe      	b.n	8007ea2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007ea4:	f001 fd02 	bl	80098ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb0:	68f9      	ldr	r1, [r7, #12]
 8007eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	441a      	add	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eda:	fb01 f303 	mul.w	r3, r1, r3
 8007ede:	441a      	add	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	22ff      	movs	r2, #255	; 0xff
 8007ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d114      	bne.n	8007f24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d01a      	beq.n	8007f38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3310      	adds	r3, #16
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 f8e2 	bl	80090d0 <xTaskRemoveFromEventList>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d012      	beq.n	8007f38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f12:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <xQueueGenericReset+0xcc>)
 8007f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	e009      	b.n	8007f38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3310      	adds	r3, #16
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fef3 	bl	8007d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3324      	adds	r3, #36	; 0x24
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff feee 	bl	8007d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f38:	f001 fce6 	bl	8009908 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f3c:	2301      	movs	r3, #1
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <xQueueGenericCreateStatic+0x28>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f72:	e7fe      	b.n	8007f72 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <xQueueGenericCreateStatic+0x42>
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8c:	e7fe      	b.n	8007f8c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <xQueueGenericCreateStatic+0x4e>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <xQueueGenericCreateStatic+0x52>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <xQueueGenericCreateStatic+0x54>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <xQueueGenericCreateStatic+0x6c>
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	623b      	str	r3, [r7, #32]
 8007fb6:	e7fe      	b.n	8007fb6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <xQueueGenericCreateStatic+0x78>
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <xQueueGenericCreateStatic+0x7c>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <xQueueGenericCreateStatic+0x7e>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <xQueueGenericCreateStatic+0x96>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	61fb      	str	r3, [r7, #28]
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fe2:	2348      	movs	r3, #72	; 0x48
 8007fe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b48      	cmp	r3, #72	; 0x48
 8007fea:	d009      	beq.n	8008000 <xQueueGenericCreateStatic+0xb4>
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	e7fe      	b.n	8007ffe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00d      	beq.n	8008026 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008012:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	4613      	mov	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f842 	bl	80080aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008028:	4618      	mov	r0, r3
 800802a:	3730      	adds	r7, #48	; 0x30
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08a      	sub	sp, #40	; 0x28
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <xQueueGenericCreate+0x28>
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	e7fe      	b.n	8008056 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	e004      	b.n	800806e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	fb02 f303 	mul.w	r3, r2, r3
 800806c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	3348      	adds	r3, #72	; 0x48
 8008072:	4618      	mov	r0, r3
 8008074:	f001 fd34 	bl	8009ae0 <pvPortMalloc>
 8008078:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00f      	beq.n	80080a0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	3348      	adds	r3, #72	; 0x48
 8008084:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800808e:	79fa      	ldrb	r2, [r7, #7]
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4613      	mov	r3, r2
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f805 	bl	80080aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80080a0:	69bb      	ldr	r3, [r7, #24]
	}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	607a      	str	r2, [r7, #4]
 80080b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e002      	b.n	80080cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080d8:	2101      	movs	r1, #1
 80080da:	69b8      	ldr	r0, [r7, #24]
 80080dc:	f7ff fece 	bl	8007e7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080f6:	2300      	movs	r3, #0
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <xQueueGenericSend+0x30>
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
 8008116:	e7fe      	b.n	8008116 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d103      	bne.n	8008126 <xQueueGenericSend+0x3e>
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <xQueueGenericSend+0x42>
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <xQueueGenericSend+0x44>
 800812a:	2300      	movs	r3, #0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <xQueueGenericSend+0x5c>
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
 8008142:	e7fe      	b.n	8008142 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d103      	bne.n	8008152 <xQueueGenericSend+0x6a>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <xQueueGenericSend+0x6e>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <xQueueGenericSend+0x70>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d109      	bne.n	8008170 <xQueueGenericSend+0x88>
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	623b      	str	r3, [r7, #32]
 800816e:	e7fe      	b.n	800816e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008170:	f001 f96a 	bl	8009448 <xTaskGetSchedulerState>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <xQueueGenericSend+0x98>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <xQueueGenericSend+0x9c>
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <xQueueGenericSend+0x9e>
 8008184:	2300      	movs	r3, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <xQueueGenericSend+0xb6>
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	e7fe      	b.n	800819c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800819e:	f001 fb85 	bl	80098ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d302      	bcc.n	80081b4 <xQueueGenericSend+0xcc>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d129      	bne.n	8008208 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ba:	f000 fa7c 	bl	80086b6 <prvCopyDataToQueue>
 80081be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d010      	beq.n	80081ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	3324      	adds	r3, #36	; 0x24
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 ff7f 	bl	80090d0 <xTaskRemoveFromEventList>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d013      	beq.n	8008200 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081d8:	4b3f      	ldr	r3, [pc, #252]	; (80082d8 <xQueueGenericSend+0x1f0>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	e00a      	b.n	8008200 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d007      	beq.n	8008200 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081f0:	4b39      	ldr	r3, [pc, #228]	; (80082d8 <xQueueGenericSend+0x1f0>)
 80081f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008200:	f001 fb82 	bl	8009908 <vPortExitCritical>
				return pdPASS;
 8008204:	2301      	movs	r3, #1
 8008206:	e063      	b.n	80082d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d103      	bne.n	8008216 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800820e:	f001 fb7b 	bl	8009908 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008212:	2300      	movs	r3, #0
 8008214:	e05c      	b.n	80082d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	2b00      	cmp	r3, #0
 800821a:	d106      	bne.n	800822a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	4618      	mov	r0, r3
 8008222:	f000 ffb7 	bl	8009194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008226:	2301      	movs	r3, #1
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800822a:	f001 fb6d 	bl	8009908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800822e:	f000 fd6b 	bl	8008d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008232:	f001 fb3b 	bl	80098ac <vPortEnterCritical>
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800823c:	b25b      	sxtb	r3, r3
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008242:	d103      	bne.n	800824c <xQueueGenericSend+0x164>
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008252:	b25b      	sxtb	r3, r3
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008258:	d103      	bne.n	8008262 <xQueueGenericSend+0x17a>
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008262:	f001 fb51 	bl	8009908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008266:	1d3a      	adds	r2, r7, #4
 8008268:	f107 0314 	add.w	r3, r7, #20
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f000 ffa6 	bl	80091c0 <xTaskCheckForTimeOut>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d124      	bne.n	80082c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800827a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800827c:	f000 fb13 	bl	80088a6 <prvIsQueueFull>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	3310      	adds	r3, #16
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fefa 	bl	8009088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008296:	f000 fa9e 	bl	80087d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800829a:	f000 fd43 	bl	8008d24 <xTaskResumeAll>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f47f af7c 	bne.w	800819e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <xQueueGenericSend+0x1f0>)
 80082a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	e772      	b.n	800819e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ba:	f000 fa8c 	bl	80087d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082be:	f000 fd31 	bl	8008d24 <xTaskResumeAll>
 80082c2:	e76c      	b.n	800819e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c6:	f000 fa86 	bl	80087d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ca:	f000 fd2b 	bl	8008d24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082ce:	2300      	movs	r3, #0
		}
	}
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3738      	adds	r7, #56	; 0x38
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08e      	sub	sp, #56	; 0x38
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <xQueueGenericSendFromISR+0x2c>
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
 8008306:	e7fe      	b.n	8008306 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <xQueueGenericSendFromISR+0x3a>
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <xQueueGenericSendFromISR+0x3e>
 8008316:	2301      	movs	r3, #1
 8008318:	e000      	b.n	800831c <xQueueGenericSendFromISR+0x40>
 800831a:	2300      	movs	r3, #0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <xQueueGenericSendFromISR+0x58>
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	623b      	str	r3, [r7, #32]
 8008332:	e7fe      	b.n	8008332 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d103      	bne.n	8008342 <xQueueGenericSendFromISR+0x66>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <xQueueGenericSendFromISR+0x6a>
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <xQueueGenericSendFromISR+0x6c>
 8008346:	2300      	movs	r3, #0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d109      	bne.n	8008360 <xQueueGenericSendFromISR+0x84>
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	e7fe      	b.n	800835e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008360:	f001 fb80 	bl	8009a64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008364:	f3ef 8211 	mrs	r2, BASEPRI
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	61ba      	str	r2, [r7, #24]
 800837a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800837c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	429a      	cmp	r2, r3
 800838a:	d302      	bcc.n	8008392 <xQueueGenericSendFromISR+0xb6>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d12c      	bne.n	80083ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a2:	f000 f988 	bl	80086b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d112      	bne.n	80083d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d016      	beq.n	80083e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	3324      	adds	r3, #36	; 0x24
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fe87 	bl	80090d0 <xTaskRemoveFromEventList>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00e      	beq.n	80083e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e007      	b.n	80083e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083da:	3301      	adds	r3, #1
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	b25a      	sxtb	r2, r3
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083e6:	2301      	movs	r3, #1
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80083ea:	e001      	b.n	80083f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3738      	adds	r7, #56	; 0x38
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08c      	sub	sp, #48	; 0x30
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008410:	2300      	movs	r3, #0
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <xQueueReceive+0x2e>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	623b      	str	r3, [r7, #32]
 8008430:	e7fe      	b.n	8008430 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d103      	bne.n	8008440 <xQueueReceive+0x3c>
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <xQueueReceive+0x40>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <xQueueReceive+0x42>
 8008444:	2300      	movs	r3, #0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <xQueueReceive+0x5a>
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	e7fe      	b.n	800845c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800845e:	f000 fff3 	bl	8009448 <xTaskGetSchedulerState>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <xQueueReceive+0x6a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <xQueueReceive+0x6e>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <xQueueReceive+0x70>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <xQueueReceive+0x88>
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	e7fe      	b.n	800848a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800848c:	f001 fa0e 	bl	80098ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01f      	beq.n	80084dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a0:	f000 f973 	bl	800878a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	3310      	adds	r3, #16
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fe09 	bl	80090d0 <xTaskRemoveFromEventList>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084c4:	4b3c      	ldr	r3, [pc, #240]	; (80085b8 <xQueueReceive+0x1b4>)
 80084c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084d4:	f001 fa18 	bl	8009908 <vPortExitCritical>
				return pdPASS;
 80084d8:	2301      	movs	r3, #1
 80084da:	e069      	b.n	80085b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d103      	bne.n	80084ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084e2:	f001 fa11 	bl	8009908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e062      	b.n	80085b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084f0:	f107 0310 	add.w	r3, r7, #16
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fe4d 	bl	8009194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084fa:	2301      	movs	r3, #1
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084fe:	f001 fa03 	bl	8009908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008502:	f000 fc01 	bl	8008d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008506:	f001 f9d1 	bl	80098ac <vPortEnterCritical>
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008510:	b25b      	sxtb	r3, r3
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d103      	bne.n	8008520 <xQueueReceive+0x11c>
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008526:	b25b      	sxtb	r3, r3
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d103      	bne.n	8008536 <xQueueReceive+0x132>
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008536:	f001 f9e7 	bl	8009908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800853a:	1d3a      	adds	r2, r7, #4
 800853c:	f107 0310 	add.w	r3, r7, #16
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fe3c 	bl	80091c0 <xTaskCheckForTimeOut>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d123      	bne.n	8008596 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800854e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008550:	f000 f993 	bl	800887a <prvIsQueueEmpty>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d017      	beq.n	800858a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	3324      	adds	r3, #36	; 0x24
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fd90 	bl	8009088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800856a:	f000 f934 	bl	80087d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800856e:	f000 fbd9 	bl	8008d24 <xTaskResumeAll>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d189      	bne.n	800848c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <xQueueReceive+0x1b4>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	e780      	b.n	800848c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800858a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858c:	f000 f923 	bl	80087d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008590:	f000 fbc8 	bl	8008d24 <xTaskResumeAll>
 8008594:	e77a      	b.n	800848c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008598:	f000 f91d 	bl	80087d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800859c:	f000 fbc2 	bl	8008d24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a2:	f000 f96a 	bl	800887a <prvIsQueueEmpty>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f43f af6f 	beq.w	800848c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3730      	adds	r7, #48	; 0x30
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08e      	sub	sp, #56	; 0x38
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <xQueueReceiveFromISR+0x2a>
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	623b      	str	r3, [r7, #32]
 80085e4:	e7fe      	b.n	80085e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <xQueueReceiveFromISR+0x38>
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <xQueueReceiveFromISR+0x3c>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <xQueueReceiveFromISR+0x3e>
 80085f8:	2300      	movs	r3, #0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <xQueueReceiveFromISR+0x56>
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	e7fe      	b.n	8008610 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008612:	f001 fa27 	bl	8009a64 <vPortValidateInterruptPriority>
	__asm volatile
 8008616:	f3ef 8211 	mrs	r2, BASEPRI
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	61ba      	str	r2, [r7, #24]
 800862c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800862e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d02f      	beq.n	800869e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800864c:	f000 f89d 	bl	800878a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	1e5a      	subs	r2, r3, #1
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d112      	bne.n	8008688 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	3310      	adds	r3, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fd2e 	bl	80090d0 <xTaskRemoveFromEventList>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00e      	beq.n	8008698 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e007      	b.n	8008698 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800868c:	3301      	adds	r3, #1
 800868e:	b2db      	uxtb	r3, r3
 8008690:	b25a      	sxtb	r2, r3
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008698:	2301      	movs	r3, #1
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
 800869c:	e001      	b.n	80086a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800869e:	2300      	movs	r3, #0
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3738      	adds	r7, #56	; 0x38
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10d      	bne.n	80086f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d14d      	bne.n	8008778 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fecf 	bl	8009484 <xTaskPriorityDisinherit>
 80086e6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	605a      	str	r2, [r3, #4]
 80086ee:	e043      	b.n	8008778 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d119      	bne.n	800872a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6898      	ldr	r0, [r3, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	461a      	mov	r2, r3
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	f002 fce1 	bl	800b0c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	441a      	add	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d32b      	bcc.n	8008778 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	609a      	str	r2, [r3, #8]
 8008728:	e026      	b.n	8008778 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	68d8      	ldr	r0, [r3, #12]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	461a      	mov	r2, r3
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	f002 fcc7 	bl	800b0c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	425b      	negs	r3, r3
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d207      	bcs.n	8008766 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	425b      	negs	r3, r3
 8008760:	441a      	add	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d105      	bne.n	8008778 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	3b01      	subs	r3, #1
 8008776:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008780:	697b      	ldr	r3, [r7, #20]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d018      	beq.n	80087ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	441a      	add	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d303      	bcc.n	80087be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68d9      	ldr	r1, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	461a      	mov	r2, r3
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	f002 fc7d 	bl	800b0c8 <memcpy>
	}
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087de:	f001 f865 	bl	80098ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ea:	e011      	b.n	8008810 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d012      	beq.n	800881a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3324      	adds	r3, #36	; 0x24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fc69 	bl	80090d0 <xTaskRemoveFromEventList>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008804:	f000 fd3c 	bl	8009280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	3b01      	subs	r3, #1
 800880c:	b2db      	uxtb	r3, r3
 800880e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008814:	2b00      	cmp	r3, #0
 8008816:	dce9      	bgt.n	80087ec <prvUnlockQueue+0x16>
 8008818:	e000      	b.n	800881c <prvUnlockQueue+0x46>
					break;
 800881a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	22ff      	movs	r2, #255	; 0xff
 8008820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008824:	f001 f870 	bl	8009908 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008828:	f001 f840 	bl	80098ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008832:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008834:	e011      	b.n	800885a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d012      	beq.n	8008864 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3310      	adds	r3, #16
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fc44 	bl	80090d0 <xTaskRemoveFromEventList>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800884e:	f000 fd17 	bl	8009280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	3b01      	subs	r3, #1
 8008856:	b2db      	uxtb	r3, r3
 8008858:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800885a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dce9      	bgt.n	8008836 <prvUnlockQueue+0x60>
 8008862:	e000      	b.n	8008866 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008864:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	22ff      	movs	r2, #255	; 0xff
 800886a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800886e:	f001 f84b 	bl	8009908 <vPortExitCritical>
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008882:	f001 f813 	bl	80098ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	e001      	b.n	8008898 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008898:	f001 f836 	bl	8009908 <vPortExitCritical>

	return xReturn;
 800889c:	68fb      	ldr	r3, [r7, #12]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088ae:	f000 fffd 	bl	80098ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d102      	bne.n	80088c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088be:	2301      	movs	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e001      	b.n	80088c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088c8:	f001 f81e 	bl	8009908 <vPortExitCritical>

	return xReturn;
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b08e      	sub	sp, #56	; 0x38
 80088da:	af04      	add	r7, sp, #16
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <xTaskCreateStatic+0x28>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	623b      	str	r3, [r7, #32]
 80088fc:	e7fe      	b.n	80088fc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	2b00      	cmp	r3, #0
 8008902:	d109      	bne.n	8008918 <xTaskCreateStatic+0x42>
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	61fb      	str	r3, [r7, #28]
 8008916:	e7fe      	b.n	8008916 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008918:	2354      	movs	r3, #84	; 0x54
 800891a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2b54      	cmp	r3, #84	; 0x54
 8008920:	d009      	beq.n	8008936 <xTaskCreateStatic+0x60>
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	e7fe      	b.n	8008934 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01e      	beq.n	800897a <xTaskCreateStatic+0xa4>
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	2b00      	cmp	r3, #0
 8008940:	d01b      	beq.n	800897a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800894a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008954:	2300      	movs	r3, #0
 8008956:	9303      	str	r3, [sp, #12]
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f850 	bl	8008a12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008974:	f000 f8cc 	bl	8008b10 <prvAddNewTaskToReadyList>
 8008978:	e001      	b.n	800897e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800897e:	697b      	ldr	r3, [r7, #20]
	}
 8008980:	4618      	mov	r0, r3
 8008982:	3728      	adds	r7, #40	; 0x28
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	; 0x30
 800898c:	af04      	add	r7, sp, #16
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4618      	mov	r0, r3
 800899e:	f001 f89f 	bl	8009ae0 <pvPortMalloc>
 80089a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00e      	beq.n	80089c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80089aa:	2054      	movs	r0, #84	; 0x54
 80089ac:	f001 f898 	bl	8009ae0 <pvPortMalloc>
 80089b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30
 80089be:	e005      	b.n	80089cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089c0:	6978      	ldr	r0, [r7, #20]
 80089c2:	f001 f94f 	bl	8009c64 <vPortFree>
 80089c6:	e001      	b.n	80089cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d017      	beq.n	8008a02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089da:	88fa      	ldrh	r2, [r7, #6]
 80089dc:	2300      	movs	r3, #0
 80089de:	9303      	str	r3, [sp, #12]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f80e 	bl	8008a12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089f6:	69f8      	ldr	r0, [r7, #28]
 80089f8:	f000 f88a 	bl	8008b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089fc:	2301      	movs	r3, #1
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	e002      	b.n	8008a08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a02:	f04f 33ff 	mov.w	r3, #4294967295
 8008a06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a08:	69bb      	ldr	r3, [r7, #24]
	}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3720      	adds	r7, #32
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b088      	sub	sp, #32
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <prvInitialiseNewTask+0x46>
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	e7fe      	b.n	8008a56 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61fb      	str	r3, [r7, #28]
 8008a5c:	e012      	b.n	8008a84 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	7819      	ldrb	r1, [r3, #0]
 8008a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3334      	adds	r3, #52	; 0x34
 8008a6e:	460a      	mov	r2, r1
 8008a70:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	4413      	add	r3, r2
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d006      	beq.n	8008a8c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	3301      	adds	r3, #1
 8008a82:	61fb      	str	r3, [r7, #28]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	2b0f      	cmp	r3, #15
 8008a88:	d9e9      	bls.n	8008a5e <prvInitialiseNewTask+0x4c>
 8008a8a:	e000      	b.n	8008a8e <prvInitialiseNewTask+0x7c>
		{
			break;
 8008a8c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	2b06      	cmp	r3, #6
 8008a9a:	d901      	bls.n	8008aa0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a9c:	2306      	movs	r3, #6
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	2200      	movs	r2, #0
 8008ab0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff f94c 	bl	8007d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	3318      	adds	r3, #24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7ff f947 	bl	8007d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	f1c3 0207 	rsb	r2, r3, #7
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	2200      	movs	r2, #0
 8008ae0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	68f9      	ldr	r1, [r7, #12]
 8008aee:	69b8      	ldr	r0, [r7, #24]
 8008af0:	f000 fdb2 	bl	8009658 <pxPortInitialiseStack>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b06:	bf00      	nop
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b18:	f000 fec8 	bl	80098ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b1c:	4b2a      	ldr	r3, [pc, #168]	; (8008bc8 <prvAddNewTaskToReadyList+0xb8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	4a29      	ldr	r2, [pc, #164]	; (8008bc8 <prvAddNewTaskToReadyList+0xb8>)
 8008b24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b26:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <prvAddNewTaskToReadyList+0xbc>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d109      	bne.n	8008b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b2e:	4a27      	ldr	r2, [pc, #156]	; (8008bcc <prvAddNewTaskToReadyList+0xbc>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <prvAddNewTaskToReadyList+0xb8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d110      	bne.n	8008b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b3c:	f000 fbc4 	bl	80092c8 <prvInitialiseTaskLists>
 8008b40:	e00d      	b.n	8008b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b42:	4b23      	ldr	r3, [pc, #140]	; (8008bd0 <prvAddNewTaskToReadyList+0xc0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d109      	bne.n	8008b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b4a:	4b20      	ldr	r3, [pc, #128]	; (8008bcc <prvAddNewTaskToReadyList+0xbc>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d802      	bhi.n	8008b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b58:	4a1c      	ldr	r2, [pc, #112]	; (8008bcc <prvAddNewTaskToReadyList+0xbc>)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b5e:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <prvAddNewTaskToReadyList+0xc4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3301      	adds	r3, #1
 8008b64:	4a1b      	ldr	r2, [pc, #108]	; (8008bd4 <prvAddNewTaskToReadyList+0xc4>)
 8008b66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	409a      	lsls	r2, r3
 8008b70:	4b19      	ldr	r3, [pc, #100]	; (8008bd8 <prvAddNewTaskToReadyList+0xc8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	4a18      	ldr	r2, [pc, #96]	; (8008bd8 <prvAddNewTaskToReadyList+0xc8>)
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4a15      	ldr	r2, [pc, #84]	; (8008bdc <prvAddNewTaskToReadyList+0xcc>)
 8008b88:	441a      	add	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f7ff f8ec 	bl	8007d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b96:	f000 feb7 	bl	8009908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <prvAddNewTaskToReadyList+0xc0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00e      	beq.n	8008bc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ba2:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <prvAddNewTaskToReadyList+0xbc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d207      	bcs.n	8008bc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <prvAddNewTaskToReadyList+0xd0>)
 8008bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	200001b4 	.word	0x200001b4
 8008bcc:	200000b4 	.word	0x200000b4
 8008bd0:	200001c0 	.word	0x200001c0
 8008bd4:	200001d0 	.word	0x200001d0
 8008bd8:	200001bc 	.word	0x200001bc
 8008bdc:	200000b8 	.word	0x200000b8
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d016      	beq.n	8008c24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bf6:	4b13      	ldr	r3, [pc, #76]	; (8008c44 <vTaskDelay+0x60>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <vTaskDelay+0x2e>
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	e7fe      	b.n	8008c10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008c12:	f000 f879 	bl	8008d08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c16:	2100      	movs	r1, #0
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fcb7 	bl	800958c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c1e:	f000 f881 	bl	8008d24 <xTaskResumeAll>
 8008c22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d107      	bne.n	8008c3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008c2a:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <vTaskDelay+0x64>)
 8008c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	200001dc 	.word	0x200001dc
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08a      	sub	sp, #40	; 0x28
 8008c50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	1d39      	adds	r1, r7, #4
 8008c5e:	f107 0308 	add.w	r3, r7, #8
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 f958 	bl	8009f18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	9202      	str	r2, [sp, #8]
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	2300      	movs	r3, #0
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	2300      	movs	r3, #0
 8008c78:	460a      	mov	r2, r1
 8008c7a:	491d      	ldr	r1, [pc, #116]	; (8008cf0 <vTaskStartScheduler+0xa4>)
 8008c7c:	481d      	ldr	r0, [pc, #116]	; (8008cf4 <vTaskStartScheduler+0xa8>)
 8008c7e:	f7ff fe2a 	bl	80088d6 <xTaskCreateStatic>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <vTaskStartScheduler+0xac>)
 8008c86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <vTaskStartScheduler+0xac>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c90:	2301      	movs	r3, #1
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e001      	b.n	8008c9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d115      	bne.n	8008ccc <vTaskStartScheduler+0x80>
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cb2:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <vTaskStartScheduler+0xb0>)
 8008cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <vTaskStartScheduler+0xb4>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008cc0:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <vTaskStartScheduler+0xb8>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cc6:	f000 fd53 	bl	8009770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cca:	e00d      	b.n	8008ce8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d109      	bne.n	8008ce8 <vTaskStartScheduler+0x9c>
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
 8008ce6:	e7fe      	b.n	8008ce6 <vTaskStartScheduler+0x9a>
}
 8008ce8:	bf00      	nop
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	0800b93c 	.word	0x0800b93c
 8008cf4:	08009299 	.word	0x08009299
 8008cf8:	200001d8 	.word	0x200001d8
 8008cfc:	200001d4 	.word	0x200001d4
 8008d00:	200001c0 	.word	0x200001c0
 8008d04:	200001b8 	.word	0x200001b8

08008d08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <vTaskSuspendAll+0x18>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3301      	adds	r3, #1
 8008d12:	4a03      	ldr	r2, [pc, #12]	; (8008d20 <vTaskSuspendAll+0x18>)
 8008d14:	6013      	str	r3, [r2, #0]
}
 8008d16:	bf00      	nop
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	200001dc 	.word	0x200001dc

08008d24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d32:	4b41      	ldr	r3, [pc, #260]	; (8008e38 <xTaskResumeAll+0x114>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <xTaskResumeAll+0x2a>
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	e7fe      	b.n	8008d4c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d4e:	f000 fdad 	bl	80098ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d52:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <xTaskResumeAll+0x114>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	4a37      	ldr	r2, [pc, #220]	; (8008e38 <xTaskResumeAll+0x114>)
 8008d5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d5c:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <xTaskResumeAll+0x114>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d161      	bne.n	8008e28 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d64:	4b35      	ldr	r3, [pc, #212]	; (8008e3c <xTaskResumeAll+0x118>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d05d      	beq.n	8008e28 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d6c:	e02e      	b.n	8008dcc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d6e:	4b34      	ldr	r3, [pc, #208]	; (8008e40 <xTaskResumeAll+0x11c>)
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3318      	adds	r3, #24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff f854 	bl	8007e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3304      	adds	r3, #4
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff f84f 	bl	8007e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	2201      	movs	r2, #1
 8008d90:	409a      	lsls	r2, r3
 8008d92:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <xTaskResumeAll+0x120>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	4a2a      	ldr	r2, [pc, #168]	; (8008e44 <xTaskResumeAll+0x120>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <xTaskResumeAll+0x124>)
 8008daa:	441a      	add	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe ffdb 	bl	8007d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <xTaskResumeAll+0x128>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d302      	bcc.n	8008dcc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008dc6:	4b22      	ldr	r3, [pc, #136]	; (8008e50 <xTaskResumeAll+0x12c>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <xTaskResumeAll+0x11c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1cc      	bne.n	8008d6e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dda:	f000 fb0f 	bl	80093fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dde:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <xTaskResumeAll+0x130>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d010      	beq.n	8008e0c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dea:	f000 f837 	bl	8008e5c <xTaskIncrementTick>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008df4:	4b16      	ldr	r3, [pc, #88]	; (8008e50 <xTaskResumeAll+0x12c>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f1      	bne.n	8008dea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <xTaskResumeAll+0x130>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e0c:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <xTaskResumeAll+0x12c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d009      	beq.n	8008e28 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <xTaskResumeAll+0x134>)
 8008e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e28:	f000 fd6e 	bl	8009908 <vPortExitCritical>

	return xAlreadyYielded;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	200001dc 	.word	0x200001dc
 8008e3c:	200001b4 	.word	0x200001b4
 8008e40:	20000174 	.word	0x20000174
 8008e44:	200001bc 	.word	0x200001bc
 8008e48:	200000b8 	.word	0x200000b8
 8008e4c:	200000b4 	.word	0x200000b4
 8008e50:	200001c8 	.word	0x200001c8
 8008e54:	200001c4 	.word	0x200001c4
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e66:	4b50      	ldr	r3, [pc, #320]	; (8008fa8 <xTaskIncrementTick+0x14c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 808c 	bne.w	8008f88 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e70:	4b4e      	ldr	r3, [pc, #312]	; (8008fac <xTaskIncrementTick+0x150>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e78:	4a4c      	ldr	r2, [pc, #304]	; (8008fac <xTaskIncrementTick+0x150>)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d11f      	bne.n	8008ec4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e84:	4b4a      	ldr	r3, [pc, #296]	; (8008fb0 <xTaskIncrementTick+0x154>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <xTaskIncrementTick+0x46>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	e7fe      	b.n	8008ea0 <xTaskIncrementTick+0x44>
 8008ea2:	4b43      	ldr	r3, [pc, #268]	; (8008fb0 <xTaskIncrementTick+0x154>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <xTaskIncrementTick+0x158>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a40      	ldr	r2, [pc, #256]	; (8008fb0 <xTaskIncrementTick+0x154>)
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	4a40      	ldr	r2, [pc, #256]	; (8008fb4 <xTaskIncrementTick+0x158>)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	4b40      	ldr	r3, [pc, #256]	; (8008fb8 <xTaskIncrementTick+0x15c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4a3e      	ldr	r2, [pc, #248]	; (8008fb8 <xTaskIncrementTick+0x15c>)
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	f000 fa9c 	bl	80093fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ec4:	4b3d      	ldr	r3, [pc, #244]	; (8008fbc <xTaskIncrementTick+0x160>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d34d      	bcc.n	8008f6a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ece:	4b38      	ldr	r3, [pc, #224]	; (8008fb0 <xTaskIncrementTick+0x154>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <xTaskIncrementTick+0x80>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e000      	b.n	8008ede <xTaskIncrementTick+0x82>
 8008edc:	2300      	movs	r3, #0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee2:	4b36      	ldr	r3, [pc, #216]	; (8008fbc <xTaskIncrementTick+0x160>)
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee8:	601a      	str	r2, [r3, #0]
					break;
 8008eea:	e03e      	b.n	8008f6a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008eec:	4b30      	ldr	r3, [pc, #192]	; (8008fb0 <xTaskIncrementTick+0x154>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d203      	bcs.n	8008f0c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f04:	4a2d      	ldr	r2, [pc, #180]	; (8008fbc <xTaskIncrementTick+0x160>)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6013      	str	r3, [r2, #0]
						break;
 8008f0a:	e02e      	b.n	8008f6a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe ff89 	bl	8007e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d004      	beq.n	8008f28 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	3318      	adds	r3, #24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe ff80 	bl	8007e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	409a      	lsls	r2, r3
 8008f30:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <xTaskIncrementTick+0x164>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <xTaskIncrementTick+0x164>)
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <xTaskIncrementTick+0x168>)
 8008f48:	441a      	add	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4610      	mov	r0, r2
 8008f52:	f7fe ff0c 	bl	8007d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <xTaskIncrementTick+0x16c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d3b4      	bcc.n	8008ece <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f68:	e7b1      	b.n	8008ece <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f6a:	4b17      	ldr	r3, [pc, #92]	; (8008fc8 <xTaskIncrementTick+0x16c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f70:	4914      	ldr	r1, [pc, #80]	; (8008fc4 <xTaskIncrementTick+0x168>)
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	440b      	add	r3, r1
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d907      	bls.n	8008f92 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008f82:	2301      	movs	r3, #1
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e004      	b.n	8008f92 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008f88:	4b10      	ldr	r3, [pc, #64]	; (8008fcc <xTaskIncrementTick+0x170>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	4a0f      	ldr	r2, [pc, #60]	; (8008fcc <xTaskIncrementTick+0x170>)
 8008f90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <xTaskIncrementTick+0x174>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008f9e:	697b      	ldr	r3, [r7, #20]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	200001dc 	.word	0x200001dc
 8008fac:	200001b8 	.word	0x200001b8
 8008fb0:	2000016c 	.word	0x2000016c
 8008fb4:	20000170 	.word	0x20000170
 8008fb8:	200001cc 	.word	0x200001cc
 8008fbc:	200001d4 	.word	0x200001d4
 8008fc0:	200001bc 	.word	0x200001bc
 8008fc4:	200000b8 	.word	0x200000b8
 8008fc8:	200000b4 	.word	0x200000b4
 8008fcc:	200001c4 	.word	0x200001c4
 8008fd0:	200001c8 	.word	0x200001c8

08008fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fda:	4b26      	ldr	r3, [pc, #152]	; (8009074 <vTaskSwitchContext+0xa0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fe2:	4b25      	ldr	r3, [pc, #148]	; (8009078 <vTaskSwitchContext+0xa4>)
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fe8:	e03e      	b.n	8009068 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008fea:	4b23      	ldr	r3, [pc, #140]	; (8009078 <vTaskSwitchContext+0xa4>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <vTaskSwitchContext+0xa8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	fab3 f383 	clz	r3, r3
 8008ffc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	f1c3 031f 	rsb	r3, r3, #31
 8009004:	617b      	str	r3, [r7, #20]
 8009006:	491e      	ldr	r1, [pc, #120]	; (8009080 <vTaskSwitchContext+0xac>)
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <vTaskSwitchContext+0x5a>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	e7fe      	b.n	800902c <vTaskSwitchContext+0x58>
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4a11      	ldr	r2, [pc, #68]	; (8009080 <vTaskSwitchContext+0xac>)
 800903a:	4413      	add	r3, r2
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	3308      	adds	r3, #8
 8009050:	429a      	cmp	r2, r3
 8009052:	d104      	bne.n	800905e <vTaskSwitchContext+0x8a>
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	4a07      	ldr	r2, [pc, #28]	; (8009084 <vTaskSwitchContext+0xb0>)
 8009066:	6013      	str	r3, [r2, #0]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	200001dc 	.word	0x200001dc
 8009078:	200001c8 	.word	0x200001c8
 800907c:	200001bc 	.word	0x200001bc
 8009080:	200000b8 	.word	0x200000b8
 8009084:	200000b4 	.word	0x200000b4

08009088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d109      	bne.n	80090ac <vTaskPlaceOnEventList+0x24>
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e7fe      	b.n	80090aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090ac:	4b07      	ldr	r3, [pc, #28]	; (80090cc <vTaskPlaceOnEventList+0x44>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3318      	adds	r3, #24
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7fe fe7e 	bl	8007db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090ba:	2101      	movs	r1, #1
 80090bc:	6838      	ldr	r0, [r7, #0]
 80090be:	f000 fa65 	bl	800958c <prvAddCurrentTaskToDelayedList>
}
 80090c2:	bf00      	nop
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	200000b4 	.word	0x200000b4

080090d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <xTaskRemoveFromEventList+0x2a>
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e7fe      	b.n	80090f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3318      	adds	r3, #24
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fe92 	bl	8007e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009104:	4b1d      	ldr	r3, [pc, #116]	; (800917c <xTaskRemoveFromEventList+0xac>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d11c      	bne.n	8009146 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3304      	adds	r3, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fe89 	bl	8007e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	2201      	movs	r2, #1
 800911c:	409a      	lsls	r2, r3
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <xTaskRemoveFromEventList+0xb0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4313      	orrs	r3, r2
 8009124:	4a16      	ldr	r2, [pc, #88]	; (8009180 <xTaskRemoveFromEventList+0xb0>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4a13      	ldr	r2, [pc, #76]	; (8009184 <xTaskRemoveFromEventList+0xb4>)
 8009136:	441a      	add	r2, r3
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f7fe fe15 	bl	8007d6e <vListInsertEnd>
 8009144:	e005      	b.n	8009152 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3318      	adds	r3, #24
 800914a:	4619      	mov	r1, r3
 800914c:	480e      	ldr	r0, [pc, #56]	; (8009188 <xTaskRemoveFromEventList+0xb8>)
 800914e:	f7fe fe0e 	bl	8007d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009156:	4b0d      	ldr	r3, [pc, #52]	; (800918c <xTaskRemoveFromEventList+0xbc>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	429a      	cmp	r2, r3
 800915e:	d905      	bls.n	800916c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009164:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <xTaskRemoveFromEventList+0xc0>)
 8009166:	2201      	movs	r2, #1
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e001      	b.n	8009170 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009170:	697b      	ldr	r3, [r7, #20]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	200001dc 	.word	0x200001dc
 8009180:	200001bc 	.word	0x200001bc
 8009184:	200000b8 	.word	0x200000b8
 8009188:	20000174 	.word	0x20000174
 800918c:	200000b4 	.word	0x200000b4
 8009190:	200001c8 	.word	0x200001c8

08009194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <vTaskInternalSetTimeOutState+0x24>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <vTaskInternalSetTimeOutState+0x28>)
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	605a      	str	r2, [r3, #4]
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	200001cc 	.word	0x200001cc
 80091bc:	200001b8 	.word	0x200001b8

080091c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d109      	bne.n	80091e4 <xTaskCheckForTimeOut+0x24>
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	e7fe      	b.n	80091e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d109      	bne.n	80091fe <xTaskCheckForTimeOut+0x3e>
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e7fe      	b.n	80091fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80091fe:	f000 fb55 	bl	80098ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009202:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <xTaskCheckForTimeOut+0xb8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921a:	d102      	bne.n	8009222 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	61fb      	str	r3, [r7, #28]
 8009220:	e023      	b.n	800926a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <xTaskCheckForTimeOut+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d007      	beq.n	800923e <xTaskCheckForTimeOut+0x7e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	429a      	cmp	r2, r3
 8009236:	d302      	bcc.n	800923e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	61fb      	str	r3, [r7, #28]
 800923c:	e015      	b.n	800926a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	429a      	cmp	r2, r3
 8009246:	d20b      	bcs.n	8009260 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	1ad2      	subs	r2, r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff ff9d 	bl	8009194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800925a:	2300      	movs	r3, #0
 800925c:	61fb      	str	r3, [r7, #28]
 800925e:	e004      	b.n	800926a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800926a:	f000 fb4d 	bl	8009908 <vPortExitCritical>

	return xReturn;
 800926e:	69fb      	ldr	r3, [r7, #28]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	200001b8 	.word	0x200001b8
 800927c:	200001cc 	.word	0x200001cc

08009280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009284:	4b03      	ldr	r3, [pc, #12]	; (8009294 <vTaskMissedYield+0x14>)
 8009286:	2201      	movs	r2, #1
 8009288:	601a      	str	r2, [r3, #0]
}
 800928a:	bf00      	nop
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	200001c8 	.word	0x200001c8

08009298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092a0:	f000 f852 	bl	8009348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092a4:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <prvIdleTask+0x28>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d9f9      	bls.n	80092a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092ac:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <prvIdleTask+0x2c>)
 80092ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092bc:	e7f0      	b.n	80092a0 <prvIdleTask+0x8>
 80092be:	bf00      	nop
 80092c0:	200000b8 	.word	0x200000b8
 80092c4:	e000ed04 	.word	0xe000ed04

080092c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092ce:	2300      	movs	r3, #0
 80092d0:	607b      	str	r3, [r7, #4]
 80092d2:	e00c      	b.n	80092ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4a12      	ldr	r2, [pc, #72]	; (8009328 <prvInitialiseTaskLists+0x60>)
 80092e0:	4413      	add	r3, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fd16 	bl	8007d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3301      	adds	r3, #1
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d9ef      	bls.n	80092d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092f4:	480d      	ldr	r0, [pc, #52]	; (800932c <prvInitialiseTaskLists+0x64>)
 80092f6:	f7fe fd0d 	bl	8007d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092fa:	480d      	ldr	r0, [pc, #52]	; (8009330 <prvInitialiseTaskLists+0x68>)
 80092fc:	f7fe fd0a 	bl	8007d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009300:	480c      	ldr	r0, [pc, #48]	; (8009334 <prvInitialiseTaskLists+0x6c>)
 8009302:	f7fe fd07 	bl	8007d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009306:	480c      	ldr	r0, [pc, #48]	; (8009338 <prvInitialiseTaskLists+0x70>)
 8009308:	f7fe fd04 	bl	8007d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800930c:	480b      	ldr	r0, [pc, #44]	; (800933c <prvInitialiseTaskLists+0x74>)
 800930e:	f7fe fd01 	bl	8007d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <prvInitialiseTaskLists+0x78>)
 8009314:	4a05      	ldr	r2, [pc, #20]	; (800932c <prvInitialiseTaskLists+0x64>)
 8009316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <prvInitialiseTaskLists+0x7c>)
 800931a:	4a05      	ldr	r2, [pc, #20]	; (8009330 <prvInitialiseTaskLists+0x68>)
 800931c:	601a      	str	r2, [r3, #0]
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	200000b8 	.word	0x200000b8
 800932c:	20000144 	.word	0x20000144
 8009330:	20000158 	.word	0x20000158
 8009334:	20000174 	.word	0x20000174
 8009338:	20000188 	.word	0x20000188
 800933c:	200001a0 	.word	0x200001a0
 8009340:	2000016c 	.word	0x2000016c
 8009344:	20000170 	.word	0x20000170

08009348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800934e:	e019      	b.n	8009384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009350:	f000 faac 	bl	80098ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <prvCheckTasksWaitingTermination+0x4c>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3304      	adds	r3, #4
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fd61 	bl	8007e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <prvCheckTasksWaitingTermination+0x50>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3b01      	subs	r3, #1
 800936c:	4a0a      	ldr	r2, [pc, #40]	; (8009398 <prvCheckTasksWaitingTermination+0x50>)
 800936e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <prvCheckTasksWaitingTermination+0x54>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3b01      	subs	r3, #1
 8009376:	4a09      	ldr	r2, [pc, #36]	; (800939c <prvCheckTasksWaitingTermination+0x54>)
 8009378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800937a:	f000 fac5 	bl	8009908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f80e 	bl	80093a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <prvCheckTasksWaitingTermination+0x54>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e1      	bne.n	8009350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000188 	.word	0x20000188
 8009398:	200001b4 	.word	0x200001b4
 800939c:	2000019c 	.word	0x2000019c

080093a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d108      	bne.n	80093c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fc54 	bl	8009c64 <vPortFree>
				vPortFree( pxTCB );
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc51 	bl	8009c64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093c2:	e017      	b.n	80093f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d103      	bne.n	80093d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fc48 	bl	8009c64 <vPortFree>
	}
 80093d4:	e00e      	b.n	80093f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d009      	beq.n	80093f4 <prvDeleteTCB+0x54>
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e7fe      	b.n	80093f2 <prvDeleteTCB+0x52>
	}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <prvResetNextTaskUnblockTime+0x44>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <prvResetNextTaskUnblockTime+0x14>
 800940c:	2301      	movs	r3, #1
 800940e:	e000      	b.n	8009412 <prvResetNextTaskUnblockTime+0x16>
 8009410:	2300      	movs	r3, #0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009416:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <prvResetNextTaskUnblockTime+0x48>)
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800941e:	e008      	b.n	8009432 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <prvResetNextTaskUnblockTime+0x44>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	4a05      	ldr	r2, [pc, #20]	; (8009444 <prvResetNextTaskUnblockTime+0x48>)
 8009430:	6013      	str	r3, [r2, #0]
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	2000016c 	.word	0x2000016c
 8009444:	200001d4 	.word	0x200001d4

08009448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800944e:	4b0b      	ldr	r3, [pc, #44]	; (800947c <xTaskGetSchedulerState+0x34>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009456:	2301      	movs	r3, #1
 8009458:	607b      	str	r3, [r7, #4]
 800945a:	e008      	b.n	800946e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800945c:	4b08      	ldr	r3, [pc, #32]	; (8009480 <xTaskGetSchedulerState+0x38>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009464:	2302      	movs	r3, #2
 8009466:	607b      	str	r3, [r7, #4]
 8009468:	e001      	b.n	800946e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800946a:	2300      	movs	r3, #0
 800946c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800946e:	687b      	ldr	r3, [r7, #4]
	}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	200001c0 	.word	0x200001c0
 8009480:	200001dc 	.word	0x200001dc

08009484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d06c      	beq.n	8009574 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800949a:	4b39      	ldr	r3, [pc, #228]	; (8009580 <xTaskPriorityDisinherit+0xfc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d009      	beq.n	80094b8 <xTaskPriorityDisinherit+0x34>
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e7fe      	b.n	80094b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <xTaskPriorityDisinherit+0x50>
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	60bb      	str	r3, [r7, #8]
 80094d2:	e7fe      	b.n	80094d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d8:	1e5a      	subs	r2, r3, #1
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d044      	beq.n	8009574 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d140      	bne.n	8009574 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fc96 	bl	8007e28 <uxListRemove>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d115      	bne.n	800952e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	491f      	ldr	r1, [pc, #124]	; (8009584 <xTaskPriorityDisinherit+0x100>)
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xTaskPriorityDisinherit+0xaa>
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	2201      	movs	r2, #1
 800951e:	fa02 f303 	lsl.w	r3, r2, r3
 8009522:	43da      	mvns	r2, r3
 8009524:	4b18      	ldr	r3, [pc, #96]	; (8009588 <xTaskPriorityDisinherit+0x104>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4013      	ands	r3, r2
 800952a:	4a17      	ldr	r2, [pc, #92]	; (8009588 <xTaskPriorityDisinherit+0x104>)
 800952c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	f1c3 0207 	rsb	r2, r3, #7
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009546:	2201      	movs	r2, #1
 8009548:	409a      	lsls	r2, r3
 800954a:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <xTaskPriorityDisinherit+0x104>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4313      	orrs	r3, r2
 8009550:	4a0d      	ldr	r2, [pc, #52]	; (8009588 <xTaskPriorityDisinherit+0x104>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4a08      	ldr	r2, [pc, #32]	; (8009584 <xTaskPriorityDisinherit+0x100>)
 8009562:	441a      	add	r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fe fbff 	bl	8007d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009574:	697b      	ldr	r3, [r7, #20]
	}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200000b4 	.word	0x200000b4
 8009584:	200000b8 	.word	0x200000b8
 8009588:	200001bc 	.word	0x200001bc

0800958c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009596:	4b29      	ldr	r3, [pc, #164]	; (800963c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800959c:	4b28      	ldr	r3, [pc, #160]	; (8009640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fc40 	bl	8007e28 <uxListRemove>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80095ae:	4b24      	ldr	r3, [pc, #144]	; (8009640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	2201      	movs	r2, #1
 80095b6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ba:	43da      	mvns	r2, r3
 80095bc:	4b21      	ldr	r3, [pc, #132]	; (8009644 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4013      	ands	r3, r2
 80095c2:	4a20      	ldr	r2, [pc, #128]	; (8009644 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d10a      	bne.n	80095e4 <prvAddCurrentTaskToDelayedList+0x58>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d007      	beq.n	80095e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095d4:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3304      	adds	r3, #4
 80095da:	4619      	mov	r1, r3
 80095dc:	481a      	ldr	r0, [pc, #104]	; (8009648 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095de:	f7fe fbc6 	bl	8007d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095e2:	e026      	b.n	8009632 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4413      	add	r3, r2
 80095ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095ec:	4b14      	ldr	r3, [pc, #80]	; (8009640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d209      	bcs.n	8009610 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095fc:	4b13      	ldr	r3, [pc, #76]	; (800964c <prvAddCurrentTaskToDelayedList+0xc0>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe fbd4 	bl	8007db6 <vListInsert>
}
 800960e:	e010      	b.n	8009632 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f7fe fbca 	bl	8007db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009622:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	429a      	cmp	r2, r3
 800962a:	d202      	bcs.n	8009632 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800962c:	4a09      	ldr	r2, [pc, #36]	; (8009654 <prvAddCurrentTaskToDelayedList+0xc8>)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6013      	str	r3, [r2, #0]
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200001b8 	.word	0x200001b8
 8009640:	200000b4 	.word	0x200000b4
 8009644:	200001bc 	.word	0x200001bc
 8009648:	200001a0 	.word	0x200001a0
 800964c:	20000170 	.word	0x20000170
 8009650:	2000016c 	.word	0x2000016c
 8009654:	200001d4 	.word	0x200001d4

08009658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3b04      	subs	r3, #4
 8009668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3b04      	subs	r3, #4
 8009676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f023 0201 	bic.w	r2, r3, #1
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b04      	subs	r3, #4
 8009686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009688:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <pxPortInitialiseStack+0x64>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b14      	subs	r3, #20
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3b04      	subs	r3, #4
 800969e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f06f 0202 	mvn.w	r2, #2
 80096a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3b20      	subs	r3, #32
 80096ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ae:	68fb      	ldr	r3, [r7, #12]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	080096c1 	.word	0x080096c1

080096c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096ca:	4b11      	ldr	r3, [pc, #68]	; (8009710 <prvTaskExitError+0x50>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d009      	beq.n	80096e8 <prvTaskExitError+0x28>
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e7fe      	b.n	80096e6 <prvTaskExitError+0x26>
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096fa:	bf00      	nop
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0fc      	beq.n	80096fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000028 	.word	0x20000028
	...

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <prvPortStartFirstTask+0x24>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8814 	msr	CONTROL, r0
 800975a:	b662      	cpsie	i
 800975c:	b661      	cpsie	f
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	df00      	svc	0
 8009768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800976a:	bf00      	nop
 800976c:	e000ed08 	.word	0xe000ed08

08009770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009776:	4b44      	ldr	r3, [pc, #272]	; (8009888 <xPortStartScheduler+0x118>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a44      	ldr	r2, [pc, #272]	; (800988c <xPortStartScheduler+0x11c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d109      	bne.n	8009794 <xPortStartScheduler+0x24>
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	e7fe      	b.n	8009792 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009794:	4b3c      	ldr	r3, [pc, #240]	; (8009888 <xPortStartScheduler+0x118>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a3d      	ldr	r2, [pc, #244]	; (8009890 <xPortStartScheduler+0x120>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d109      	bne.n	80097b2 <xPortStartScheduler+0x42>
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e7fe      	b.n	80097b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097b2:	4b38      	ldr	r3, [pc, #224]	; (8009894 <xPortStartScheduler+0x124>)
 80097b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	22ff      	movs	r2, #255	; 0xff
 80097c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	4b30      	ldr	r3, [pc, #192]	; (8009898 <xPortStartScheduler+0x128>)
 80097d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097da:	4b30      	ldr	r3, [pc, #192]	; (800989c <xPortStartScheduler+0x12c>)
 80097dc:	2207      	movs	r2, #7
 80097de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e0:	e009      	b.n	80097f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80097e2:	4b2e      	ldr	r3, [pc, #184]	; (800989c <xPortStartScheduler+0x12c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	4a2c      	ldr	r2, [pc, #176]	; (800989c <xPortStartScheduler+0x12c>)
 80097ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	005b      	lsls	r3, r3, #1
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fe:	2b80      	cmp	r3, #128	; 0x80
 8009800:	d0ef      	beq.n	80097e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009802:	4b26      	ldr	r3, [pc, #152]	; (800989c <xPortStartScheduler+0x12c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f1c3 0307 	rsb	r3, r3, #7
 800980a:	2b04      	cmp	r3, #4
 800980c:	d009      	beq.n	8009822 <xPortStartScheduler+0xb2>
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60bb      	str	r3, [r7, #8]
 8009820:	e7fe      	b.n	8009820 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009822:	4b1e      	ldr	r3, [pc, #120]	; (800989c <xPortStartScheduler+0x12c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	4a1c      	ldr	r2, [pc, #112]	; (800989c <xPortStartScheduler+0x12c>)
 800982a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <xPortStartScheduler+0x12c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009834:	4a19      	ldr	r2, [pc, #100]	; (800989c <xPortStartScheduler+0x12c>)
 8009836:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	b2da      	uxtb	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <xPortStartScheduler+0x130>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <xPortStartScheduler+0x130>)
 8009846:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800984a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800984c:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <xPortStartScheduler+0x130>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <xPortStartScheduler+0x130>)
 8009852:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009856:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009858:	f000 f8d6 	bl	8009a08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800985c:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <xPortStartScheduler+0x134>)
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009862:	f000 f8f5 	bl	8009a50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009866:	4b10      	ldr	r3, [pc, #64]	; (80098a8 <xPortStartScheduler+0x138>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a0f      	ldr	r2, [pc, #60]	; (80098a8 <xPortStartScheduler+0x138>)
 800986c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009870:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009872:	f7ff ff69 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009876:	f7ff fbad 	bl	8008fd4 <vTaskSwitchContext>
	prvTaskExitError();
 800987a:	f7ff ff21 	bl	80096c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	e000ed00 	.word	0xe000ed00
 800988c:	410fc271 	.word	0x410fc271
 8009890:	410fc270 	.word	0x410fc270
 8009894:	e000e400 	.word	0xe000e400
 8009898:	200001e0 	.word	0x200001e0
 800989c:	200001e4 	.word	0x200001e4
 80098a0:	e000ed20 	.word	0xe000ed20
 80098a4:	20000028 	.word	0x20000028
 80098a8:	e000ef34 	.word	0xe000ef34

080098ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098c4:	4b0e      	ldr	r3, [pc, #56]	; (8009900 <vPortEnterCritical+0x54>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3301      	adds	r3, #1
 80098ca:	4a0d      	ldr	r2, [pc, #52]	; (8009900 <vPortEnterCritical+0x54>)
 80098cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <vPortEnterCritical+0x54>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d10e      	bne.n	80098f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098d6:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <vPortEnterCritical+0x58>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d009      	beq.n	80098f4 <vPortEnterCritical+0x48>
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	603b      	str	r3, [r7, #0]
 80098f2:	e7fe      	b.n	80098f2 <vPortEnterCritical+0x46>
	}
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	20000028 	.word	0x20000028
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800990e:	4b11      	ldr	r3, [pc, #68]	; (8009954 <vPortExitCritical+0x4c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <vPortExitCritical+0x22>
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	607b      	str	r3, [r7, #4]
 8009928:	e7fe      	b.n	8009928 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <vPortExitCritical+0x4c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3b01      	subs	r3, #1
 8009930:	4a08      	ldr	r2, [pc, #32]	; (8009954 <vPortExitCritical+0x4c>)
 8009932:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009934:	4b07      	ldr	r3, [pc, #28]	; (8009954 <vPortExitCritical+0x4c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <vPortExitCritical+0x3e>
 800993c:	2300      	movs	r3, #0
 800993e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	20000028 	.word	0x20000028
	...

08009960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009960:	f3ef 8009 	mrs	r0, PSP
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4b15      	ldr	r3, [pc, #84]	; (80099c0 <pxCurrentTCBConst>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	f01e 0f10 	tst.w	lr, #16
 8009970:	bf08      	it	eq
 8009972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997a:	6010      	str	r0, [r2, #0]
 800997c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009984:	f380 8811 	msr	BASEPRI, r0
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f7ff fb20 	bl	8008fd4 <vTaskSwitchContext>
 8009994:	f04f 0000 	mov.w	r0, #0
 8009998:	f380 8811 	msr	BASEPRI, r0
 800999c:	bc09      	pop	{r0, r3}
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	6808      	ldr	r0, [r1, #0]
 80099a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a6:	f01e 0f10 	tst.w	lr, #16
 80099aa:	bf08      	it	eq
 80099ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099b0:	f380 8809 	msr	PSP, r0
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst>:
 80099c0:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099e0:	f7ff fa3c 	bl	8008e5c <xTaskIncrementTick>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <xPortSysTickHandler+0x3c>)
 80099ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	2300      	movs	r3, #0
 80099f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	e000ed04 	.word	0xe000ed04

08009a08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a0c:	4b0b      	ldr	r3, [pc, #44]	; (8009a3c <vPortSetupTimerInterrupt+0x34>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <vPortSetupTimerInterrupt+0x38>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a18:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <vPortSetupTimerInterrupt+0x3c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a0a      	ldr	r2, [pc, #40]	; (8009a48 <vPortSetupTimerInterrupt+0x40>)
 8009a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a22:	099b      	lsrs	r3, r3, #6
 8009a24:	4a09      	ldr	r2, [pc, #36]	; (8009a4c <vPortSetupTimerInterrupt+0x44>)
 8009a26:	3b01      	subs	r3, #1
 8009a28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a2a:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <vPortSetupTimerInterrupt+0x34>)
 8009a2c:	2207      	movs	r2, #7
 8009a2e:	601a      	str	r2, [r3, #0]
}
 8009a30:	bf00      	nop
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	e000e010 	.word	0xe000e010
 8009a40:	e000e018 	.word	0xe000e018
 8009a44:	2000002c 	.word	0x2000002c
 8009a48:	10624dd3 	.word	0x10624dd3
 8009a4c:	e000e014 	.word	0xe000e014

08009a50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a60 <vPortEnableVFP+0x10>
 8009a54:	6801      	ldr	r1, [r0, #0]
 8009a56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a5a:	6001      	str	r1, [r0, #0]
 8009a5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a5e:	bf00      	nop
 8009a60:	e000ed88 	.word	0xe000ed88

08009a64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a6a:	f3ef 8305 	mrs	r3, IPSR
 8009a6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b0f      	cmp	r3, #15
 8009a74:	d913      	bls.n	8009a9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a76:	4a16      	ldr	r2, [pc, #88]	; (8009ad0 <vPortValidateInterruptPriority+0x6c>)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <vPortValidateInterruptPriority+0x70>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	7afa      	ldrb	r2, [r7, #11]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d209      	bcs.n	8009a9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e7fe      	b.n	8009a9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <vPortValidateInterruptPriority+0x74>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <vPortValidateInterruptPriority+0x78>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d909      	bls.n	8009ac2 <vPortValidateInterruptPriority+0x5e>
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	e7fe      	b.n	8009ac0 <vPortValidateInterruptPriority+0x5c>
	}
 8009ac2:	bf00      	nop
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	e000e3f0 	.word	0xe000e3f0
 8009ad4:	200001e0 	.word	0x200001e0
 8009ad8:	e000ed0c 	.word	0xe000ed0c
 8009adc:	200001e4 	.word	0x200001e4

08009ae0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08a      	sub	sp, #40	; 0x28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aec:	f7ff f90c 	bl	8008d08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009af0:	4b57      	ldr	r3, [pc, #348]	; (8009c50 <pvPortMalloc+0x170>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009af8:	f000 f90c 	bl	8009d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009afc:	4b55      	ldr	r3, [pc, #340]	; (8009c54 <pvPortMalloc+0x174>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4013      	ands	r3, r2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 808c 	bne.w	8009c22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01c      	beq.n	8009b4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009b10:	2208      	movs	r2, #8
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d013      	beq.n	8009b4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f023 0307 	bic.w	r3, r3, #7
 8009b28:	3308      	adds	r3, #8
 8009b2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d009      	beq.n	8009b4a <pvPortMalloc+0x6a>
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	e7fe      	b.n	8009b48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d068      	beq.n	8009c22 <pvPortMalloc+0x142>
 8009b50:	4b41      	ldr	r3, [pc, #260]	; (8009c58 <pvPortMalloc+0x178>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d863      	bhi.n	8009c22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b5a:	4b40      	ldr	r3, [pc, #256]	; (8009c5c <pvPortMalloc+0x17c>)
 8009b5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b5e:	4b3f      	ldr	r3, [pc, #252]	; (8009c5c <pvPortMalloc+0x17c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b64:	e004      	b.n	8009b70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d903      	bls.n	8009b82 <pvPortMalloc+0xa2>
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f1      	bne.n	8009b66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b82:	4b33      	ldr	r3, [pc, #204]	; (8009c50 <pvPortMalloc+0x170>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d04a      	beq.n	8009c22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2208      	movs	r2, #8
 8009b92:	4413      	add	r3, r2
 8009b94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	1ad2      	subs	r2, r2, r3
 8009ba6:	2308      	movs	r3, #8
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d91e      	bls.n	8009bec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d009      	beq.n	8009bd4 <pvPortMalloc+0xf4>
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	613b      	str	r3, [r7, #16]
 8009bd2:	e7fe      	b.n	8009bd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009be6:	69b8      	ldr	r0, [r7, #24]
 8009be8:	f000 f8f6 	bl	8009dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bec:	4b1a      	ldr	r3, [pc, #104]	; (8009c58 <pvPortMalloc+0x178>)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <pvPortMalloc+0x178>)
 8009bf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bfa:	4b17      	ldr	r3, [pc, #92]	; (8009c58 <pvPortMalloc+0x178>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	4b18      	ldr	r3, [pc, #96]	; (8009c60 <pvPortMalloc+0x180>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d203      	bcs.n	8009c0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <pvPortMalloc+0x178>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <pvPortMalloc+0x180>)
 8009c0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	4b10      	ldr	r3, [pc, #64]	; (8009c54 <pvPortMalloc+0x174>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	431a      	orrs	r2, r3
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c22:	f7ff f87f 	bl	8008d24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	f003 0307 	and.w	r3, r3, #7
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d009      	beq.n	8009c44 <pvPortMalloc+0x164>
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	e7fe      	b.n	8009c42 <pvPortMalloc+0x162>
	return pvReturn;
 8009c44:	69fb      	ldr	r3, [r7, #28]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3728      	adds	r7, #40	; 0x28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20003df0 	.word	0x20003df0
 8009c54:	20003dfc 	.word	0x20003dfc
 8009c58:	20003df4 	.word	0x20003df4
 8009c5c:	20003de8 	.word	0x20003de8
 8009c60:	20003df8 	.word	0x20003df8

08009c64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d046      	beq.n	8009d04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c76:	2308      	movs	r3, #8
 8009c78:	425b      	negs	r3, r3
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	4b20      	ldr	r3, [pc, #128]	; (8009d0c <vPortFree+0xa8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <vPortFree+0x42>
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	e7fe      	b.n	8009ca4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <vPortFree+0x5e>
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	60bb      	str	r3, [r7, #8]
 8009cc0:	e7fe      	b.n	8009cc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <vPortFree+0xa8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d019      	beq.n	8009d04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d115      	bne.n	8009d04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <vPortFree+0xa8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ce8:	f7ff f80e 	bl	8008d08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <vPortFree+0xac>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4a06      	ldr	r2, [pc, #24]	; (8009d10 <vPortFree+0xac>)
 8009cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cfa:	6938      	ldr	r0, [r7, #16]
 8009cfc:	f000 f86c 	bl	8009dd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d00:	f7ff f810 	bl	8008d24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d04:	bf00      	nop
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20003dfc 	.word	0x20003dfc
 8009d10:	20003df4 	.word	0x20003df4

08009d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d20:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <prvHeapInit+0xac>)
 8009d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00c      	beq.n	8009d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3307      	adds	r3, #7
 8009d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0307 	bic.w	r3, r3, #7
 8009d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	4a1f      	ldr	r2, [pc, #124]	; (8009dc0 <prvHeapInit+0xac>)
 8009d44:	4413      	add	r3, r2
 8009d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d4c:	4a1d      	ldr	r2, [pc, #116]	; (8009dc4 <prvHeapInit+0xb0>)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d52:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <prvHeapInit+0xb0>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d60:	2208      	movs	r2, #8
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0307 	bic.w	r3, r3, #7
 8009d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a15      	ldr	r2, [pc, #84]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d94:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a0a      	ldr	r2, [pc, #40]	; (8009dcc <prvHeapInit+0xb8>)
 8009da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	4a09      	ldr	r2, [pc, #36]	; (8009dd0 <prvHeapInit+0xbc>)
 8009daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <prvHeapInit+0xc0>)
 8009dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	200001e8 	.word	0x200001e8
 8009dc4:	20003de8 	.word	0x20003de8
 8009dc8:	20003df0 	.word	0x20003df0
 8009dcc:	20003df8 	.word	0x20003df8
 8009dd0:	20003df4 	.word	0x20003df4
 8009dd4:	20003dfc 	.word	0x20003dfc

08009dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009de0:	4b28      	ldr	r3, [pc, #160]	; (8009e84 <prvInsertBlockIntoFreeList+0xac>)
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e002      	b.n	8009dec <prvInsertBlockIntoFreeList+0x14>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d8f7      	bhi.n	8009de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	4413      	add	r3, r2
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d108      	bne.n	8009e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	441a      	add	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d118      	bne.n	8009e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <prvInsertBlockIntoFreeList+0xb0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d00d      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e008      	b.n	8009e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e56:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <prvInsertBlockIntoFreeList+0xb0>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e003      	b.n	8009e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d002      	beq.n	8009e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20003de8 	.word	0x20003de8
 8009e88:	20003df0 	.word	0x20003df0

08009e8c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <DWT_Init+0x38>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10e      	bne.n	8009eba <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <DWT_Init+0x38>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4a08      	ldr	r2, [pc, #32]	; (8009ec4 <DWT_Init+0x38>)
 8009ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ea6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <DWT_Init+0x3c>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009eae:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <DWT_Init+0x3c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a05      	ldr	r2, [pc, #20]	; (8009ec8 <DWT_Init+0x3c>)
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	6013      	str	r3, [r2, #0]
    }
}
 8009eba:	bf00      	nop
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	e000edf0 	.word	0xe000edf0
 8009ec8:	e0001000 	.word	0xe0001000

08009ecc <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8009ed4:	4b0d      	ldr	r3, [pc, #52]	; (8009f0c <DWT_Delay+0x40>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8009eda:	4b0d      	ldr	r3, [pc, #52]	; (8009f10 <DWT_Delay+0x44>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a0d      	ldr	r2, [pc, #52]	; (8009f14 <DWT_Delay+0x48>)
 8009ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee4:	0c9a      	lsrs	r2, r3, #18
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	fb02 f303 	mul.w	r3, r2, r3
 8009eec:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8009eee:	bf00      	nop
 8009ef0:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <DWT_Delay+0x40>)
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d8f8      	bhi.n	8009ef0 <DWT_Delay+0x24>
}
 8009efe:	bf00      	nop
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	e0001000 	.word	0xe0001000
 8009f10:	2000002c 	.word	0x2000002c
 8009f14:	431bde83 	.word	0x431bde83

08009f18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4a07      	ldr	r2, [pc, #28]	; (8009f44 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	4a06      	ldr	r2, [pc, #24]	; (8009f48 <vApplicationGetIdleTaskMemory+0x30>)
 8009f2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2280      	movs	r2, #128	; 0x80
 8009f34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20003e00 	.word	0x20003e00
 8009f48:	20003e54 	.word	0x20003e54

08009f4c <hcsr04_read>:
/* USER CODE BEGIN 0 */



uint32_t hcsr04_read (void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);  // pull the TRIG pin HIGH
 8009f56:	2200      	movs	r2, #0
 8009f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f5c:	4818      	ldr	r0, [pc, #96]	; (8009fc0 <hcsr04_read+0x74>)
 8009f5e:	f7f7 fa4d 	bl	80013fc <HAL_GPIO_WritePin>
	DWT_Delay(2);  // wait for 2 us
 8009f62:	2002      	movs	r0, #2
 8009f64:	f7ff ffb2 	bl	8009ecc <DWT_Delay>


	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f6e:	4814      	ldr	r0, [pc, #80]	; (8009fc0 <hcsr04_read+0x74>)
 8009f70:	f7f7 fa44 	bl	80013fc <HAL_GPIO_WritePin>
	DWT_Delay(10);  // wait for 10 us
 8009f74:	200a      	movs	r0, #10
 8009f76:	f7ff ffa9 	bl	8009ecc <DWT_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);  // pull the TRIG pin low
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f80:	480f      	ldr	r0, [pc, #60]	; (8009fc0 <hcsr04_read+0x74>)
 8009f82:	f7f7 fa3b 	bl	80013fc <HAL_GPIO_WritePin>

	// read the time for which the pin is high

	while (!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)));  // wait for the ECHO pin to go high
 8009f86:	bf00      	nop
 8009f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f8c:	480c      	ldr	r0, [pc, #48]	; (8009fc0 <hcsr04_read+0x74>)
 8009f8e:	f7f7 fa1d 	bl	80013cc <HAL_GPIO_ReadPin>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0f7      	beq.n	8009f88 <hcsr04_read+0x3c>
	while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10))    // while the pin is high
 8009f98:	e005      	b.n	8009fa6 <hcsr04_read+0x5a>
	 {
		local_time++;   // measure time for which the pin is high
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	607b      	str	r3, [r7, #4]
		DWT_Delay(1);
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	f7ff ff93 	bl	8009ecc <DWT_Delay>
	while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10))    // while the pin is high
 8009fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009faa:	4805      	ldr	r0, [pc, #20]	; (8009fc0 <hcsr04_read+0x74>)
 8009fac:	f7f7 fa0e 	bl	80013cc <HAL_GPIO_ReadPin>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f1      	bne.n	8009f9a <hcsr04_read+0x4e>
	 }
	return local_time;
 8009fb6:	687b      	ldr	r3, [r7, #4]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	40020c00 	.word	0x40020c00

08009fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009fc4:	b5b0      	push	{r4, r5, r7, lr}
 8009fc6:	b08e      	sub	sp, #56	; 0x38
 8009fc8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009fca:	f7f6 febf 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009fce:	f000 f839 	bl	800a044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009fd2:	f000 f977 	bl	800a2c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8009fd6:	f000 f8b7 	bl	800a148 <MX_I2C1_Init>
  MX_I2S3_Init();
 8009fda:	f000 f8e3 	bl	800a1a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8009fde:	f000 f911 	bl	800a204 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8009fe2:	f000 f945 	bl	800a270 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT_Init();
 8009fe6:	f7ff ff51 	bl	8009e8c <DWT_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask1, StartDefaultTask1, osPriorityNormal, 0, 128);
 8009fea:	4b13      	ldr	r3, [pc, #76]	; (800a038 <main+0x74>)
 8009fec:	f107 041c 	add.w	r4, r7, #28
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask1), NULL);
 8009ffe:	f107 031c 	add.w	r3, r7, #28
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f7fd fd48 	bl	8007a9a <osThreadCreate>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <main+0x78>)
 800a00e:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <main+0x7c>)
 800a012:	463c      	mov	r4, r7
 800a014:	461d      	mov	r5, r3
 800a016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a01a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a01e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 800a022:	463b      	mov	r3, r7
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f7fd fd37 	bl	8007a9a <osThreadCreate>
 800a02c:	4602      	mov	r2, r0
 800a02e:	4b03      	ldr	r3, [pc, #12]	; (800a03c <main+0x78>)
 800a030:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a032:	f7fd fd2b 	bl	8007a8c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a036:	e7fe      	b.n	800a036 <main+0x72>
 800a038:	0800b954 	.word	0x0800b954
 800a03c:	20004068 	.word	0x20004068
 800a040:	0800b980 	.word	0x0800b980

0800a044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b098      	sub	sp, #96	; 0x60
 800a048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a04a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a04e:	2230      	movs	r2, #48	; 0x30
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f843 	bl	800b0de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a058:	f107 031c 	add.w	r3, r7, #28
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	605a      	str	r2, [r3, #4]
 800a062:	609a      	str	r2, [r3, #8]
 800a064:	60da      	str	r2, [r3, #12]
 800a066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a068:	f107 030c 	add.w	r3, r7, #12
 800a06c:	2200      	movs	r2, #0
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	605a      	str	r2, [r3, #4]
 800a072:	609a      	str	r2, [r3, #8]
 800a074:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a076:	2300      	movs	r3, #0
 800a078:	60bb      	str	r3, [r7, #8]
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <SystemClock_Config+0xfc>)
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	4a30      	ldr	r2, [pc, #192]	; (800a140 <SystemClock_Config+0xfc>)
 800a080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a084:	6413      	str	r3, [r2, #64]	; 0x40
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <SystemClock_Config+0xfc>)
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a08e:	60bb      	str	r3, [r7, #8]
 800a090:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a092:	2300      	movs	r3, #0
 800a094:	607b      	str	r3, [r7, #4]
 800a096:	4b2b      	ldr	r3, [pc, #172]	; (800a144 <SystemClock_Config+0x100>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a2a      	ldr	r2, [pc, #168]	; (800a144 <SystemClock_Config+0x100>)
 800a09c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	4b28      	ldr	r3, [pc, #160]	; (800a144 <SystemClock_Config+0x100>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0aa:	607b      	str	r3, [r7, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a0b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a0bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a0c2:	2308      	movs	r3, #8
 800a0c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a0c6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a0ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a0d0:	2307      	movs	r3, #7
 800a0d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a0d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7f9 fbd7 	bl	800388c <HAL_RCC_OscConfig>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800a0e4:	f000 fa82 	bl	800a5ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a0e8:	230f      	movs	r3, #15
 800a0ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a0f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a0f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a0fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a100:	f107 031c 	add.w	r3, r7, #28
 800a104:	2105      	movs	r1, #5
 800a106:	4618      	mov	r0, r3
 800a108:	f7f9 fe02 	bl	8003d10 <HAL_RCC_ClockConfig>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800a112:	f000 fa6b 	bl	800a5ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800a116:	2301      	movs	r3, #1
 800a118:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800a11a:	23c0      	movs	r3, #192	; 0xc0
 800a11c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a11e:	2302      	movs	r3, #2
 800a120:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a122:	f107 030c 	add.w	r3, r7, #12
 800a126:	4618      	mov	r0, r3
 800a128:	f7f9 ffe0 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a132:	f000 fa5b 	bl	800a5ec <Error_Handler>
  }
}
 800a136:	bf00      	nop
 800a138:	3760      	adds	r7, #96	; 0x60
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	40023800 	.word	0x40023800
 800a144:	40007000 	.word	0x40007000

0800a148 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a14c:	4b12      	ldr	r3, [pc, #72]	; (800a198 <MX_I2C1_Init+0x50>)
 800a14e:	4a13      	ldr	r2, [pc, #76]	; (800a19c <MX_I2C1_Init+0x54>)
 800a150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a152:	4b11      	ldr	r3, [pc, #68]	; (800a198 <MX_I2C1_Init+0x50>)
 800a154:	4a12      	ldr	r2, [pc, #72]	; (800a1a0 <MX_I2C1_Init+0x58>)
 800a156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a158:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <MX_I2C1_Init+0x50>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a15e:	4b0e      	ldr	r3, [pc, #56]	; (800a198 <MX_I2C1_Init+0x50>)
 800a160:	2200      	movs	r2, #0
 800a162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <MX_I2C1_Init+0x50>)
 800a166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a16a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <MX_I2C1_Init+0x50>)
 800a16e:	2200      	movs	r2, #0
 800a170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a172:	4b09      	ldr	r3, [pc, #36]	; (800a198 <MX_I2C1_Init+0x50>)
 800a174:	2200      	movs	r2, #0
 800a176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <MX_I2C1_Init+0x50>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a17e:	4b06      	ldr	r3, [pc, #24]	; (800a198 <MX_I2C1_Init+0x50>)
 800a180:	2200      	movs	r2, #0
 800a182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a184:	4804      	ldr	r0, [pc, #16]	; (800a198 <MX_I2C1_Init+0x50>)
 800a186:	f7f8 fdb9 	bl	8002cfc <HAL_I2C_Init>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a190:	f000 fa2c 	bl	800a5ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a194:	bf00      	nop
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20004070 	.word	0x20004070
 800a19c:	40005400 	.word	0x40005400
 800a1a0:	000186a0 	.word	0x000186a0

0800a1a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800a1a8:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1aa:	4a14      	ldr	r2, [pc, #80]	; (800a1fc <MX_I2S3_Init+0x58>)
 800a1ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800a1b6:	4b10      	ldr	r3, [pc, #64]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1cc:	4a0c      	ldr	r2, [pc, #48]	; (800a200 <MX_I2S3_Init+0x5c>)
 800a1ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800a1d6:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800a1dc:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800a1e2:	4805      	ldr	r0, [pc, #20]	; (800a1f8 <MX_I2S3_Init+0x54>)
 800a1e4:	f7f8 feb2 	bl	8002f4c <HAL_I2S_Init>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800a1ee:	f000 f9fd 	bl	800a5ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800a1f2:	bf00      	nop
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20004160 	.word	0x20004160
 800a1fc:	40003c00 	.word	0x40003c00
 800a200:	00017700 	.word	0x00017700

0800a204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a208:	4b17      	ldr	r3, [pc, #92]	; (800a268 <MX_SPI1_Init+0x64>)
 800a20a:	4a18      	ldr	r2, [pc, #96]	; (800a26c <MX_SPI1_Init+0x68>)
 800a20c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a20e:	4b16      	ldr	r3, [pc, #88]	; (800a268 <MX_SPI1_Init+0x64>)
 800a210:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <MX_SPI1_Init+0x64>)
 800a218:	2200      	movs	r2, #0
 800a21a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a21c:	4b12      	ldr	r3, [pc, #72]	; (800a268 <MX_SPI1_Init+0x64>)
 800a21e:	2200      	movs	r2, #0
 800a220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a222:	4b11      	ldr	r3, [pc, #68]	; (800a268 <MX_SPI1_Init+0x64>)
 800a224:	2200      	movs	r2, #0
 800a226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a228:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <MX_SPI1_Init+0x64>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a22e:	4b0e      	ldr	r3, [pc, #56]	; (800a268 <MX_SPI1_Init+0x64>)
 800a230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a236:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <MX_SPI1_Init+0x64>)
 800a238:	2200      	movs	r2, #0
 800a23a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a23c:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <MX_SPI1_Init+0x64>)
 800a23e:	2200      	movs	r2, #0
 800a240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <MX_SPI1_Init+0x64>)
 800a244:	2200      	movs	r2, #0
 800a246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a248:	4b07      	ldr	r3, [pc, #28]	; (800a268 <MX_SPI1_Init+0x64>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a24e:	4b06      	ldr	r3, [pc, #24]	; (800a268 <MX_SPI1_Init+0x64>)
 800a250:	220a      	movs	r2, #10
 800a252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a254:	4804      	ldr	r0, [pc, #16]	; (800a268 <MX_SPI1_Init+0x64>)
 800a256:	f7fa f887 	bl	8004368 <HAL_SPI_Init>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a260:	f000 f9c4 	bl	800a5ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a264:	bf00      	nop
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200040c8 	.word	0x200040c8
 800a26c:	40013000 	.word	0x40013000

0800a270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a274:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a276:	4a12      	ldr	r2, [pc, #72]	; (800a2c0 <MX_USART2_UART_Init+0x50>)
 800a278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a27a:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a27c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a282:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a284:	2200      	movs	r2, #0
 800a286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a28e:	4b0b      	ldr	r3, [pc, #44]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a290:	2200      	movs	r2, #0
 800a292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a294:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a296:	220c      	movs	r2, #12
 800a298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2a0:	4b06      	ldr	r3, [pc, #24]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a2a6:	4805      	ldr	r0, [pc, #20]	; (800a2bc <MX_USART2_UART_Init+0x4c>)
 800a2a8:	f7fa f8c2 	bl	8004430 <HAL_UART_Init>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a2b2:	f000 f99b 	bl	800a5ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a2b6:	bf00      	nop
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20004120 	.word	0x20004120
 800a2c0:	40004400 	.word	0x40004400

0800a2c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08c      	sub	sp, #48	; 0x30
 800a2c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2ca:	f107 031c 	add.w	r3, r7, #28
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
 800a2d6:	60da      	str	r2, [r3, #12]
 800a2d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	4b71      	ldr	r3, [pc, #452]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	4a70      	ldr	r2, [pc, #448]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a2e4:	f043 0310 	orr.w	r3, r3, #16
 800a2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ea:	4b6e      	ldr	r3, [pc, #440]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	61bb      	str	r3, [r7, #24]
 800a2f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	4b6a      	ldr	r3, [pc, #424]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fe:	4a69      	ldr	r2, [pc, #420]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a300:	f043 0304 	orr.w	r3, r3, #4
 800a304:	6313      	str	r3, [r2, #48]	; 0x30
 800a306:	4b67      	ldr	r3, [pc, #412]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
 800a316:	4b63      	ldr	r3, [pc, #396]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31a:	4a62      	ldr	r2, [pc, #392]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a320:	6313      	str	r3, [r2, #48]	; 0x30
 800a322:	4b60      	ldr	r3, [pc, #384]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	4b5c      	ldr	r3, [pc, #368]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	4a5b      	ldr	r2, [pc, #364]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a338:	f043 0301 	orr.w	r3, r3, #1
 800a33c:	6313      	str	r3, [r2, #48]	; 0x30
 800a33e:	4b59      	ldr	r3, [pc, #356]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a34a:	2300      	movs	r3, #0
 800a34c:	60bb      	str	r3, [r7, #8]
 800a34e:	4b55      	ldr	r3, [pc, #340]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	4a54      	ldr	r2, [pc, #336]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a354:	f043 0302 	orr.w	r3, r3, #2
 800a358:	6313      	str	r3, [r2, #48]	; 0x30
 800a35a:	4b52      	ldr	r3, [pc, #328]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	60bb      	str	r3, [r7, #8]
 800a364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a366:	2300      	movs	r3, #0
 800a368:	607b      	str	r3, [r7, #4]
 800a36a:	4b4e      	ldr	r3, [pc, #312]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36e:	4a4d      	ldr	r2, [pc, #308]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a370:	f043 0308 	orr.w	r3, r3, #8
 800a374:	6313      	str	r3, [r2, #48]	; 0x30
 800a376:	4b4b      	ldr	r3, [pc, #300]	; (800a4a4 <MX_GPIO_Init+0x1e0>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a382:	2200      	movs	r2, #0
 800a384:	2108      	movs	r1, #8
 800a386:	4848      	ldr	r0, [pc, #288]	; (800a4a8 <MX_GPIO_Init+0x1e4>)
 800a388:	f7f7 f838 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a38c:	2201      	movs	r2, #1
 800a38e:	2101      	movs	r1, #1
 800a390:	4846      	ldr	r0, [pc, #280]	; (800a4ac <MX_GPIO_Init+0x1e8>)
 800a392:	f7f7 f833 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, trig_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800a396:	2200      	movs	r2, #0
 800a398:	f64f 0110 	movw	r1, #63504	; 0xf810
 800a39c:	4844      	ldr	r0, [pc, #272]	; (800a4b0 <MX_GPIO_Init+0x1ec>)
 800a39e:	f7f7 f82d 	bl	80013fc <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a3b2:	f107 031c 	add.w	r3, r7, #28
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	483b      	ldr	r0, [pc, #236]	; (800a4a8 <MX_GPIO_Init+0x1e4>)
 800a3ba:	f7f6 fe6d 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a3ce:	f107 031c 	add.w	r3, r7, #28
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4835      	ldr	r0, [pc, #212]	; (800a4ac <MX_GPIO_Init+0x1e8>)
 800a3d6:	f7f6 fe5f 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a3da:	2308      	movs	r3, #8
 800a3dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a3ea:	2305      	movs	r3, #5
 800a3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a3ee:	f107 031c 	add.w	r3, r7, #28
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	482d      	ldr	r0, [pc, #180]	; (800a4ac <MX_GPIO_Init+0x1e8>)
 800a3f6:	f7f6 fe4f 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a3fe:	4b2d      	ldr	r3, [pc, #180]	; (800a4b4 <MX_GPIO_Init+0x1f0>)
 800a400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a402:	2300      	movs	r3, #0
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a406:	f107 031c 	add.w	r3, r7, #28
 800a40a:	4619      	mov	r1, r3
 800a40c:	482a      	ldr	r0, [pc, #168]	; (800a4b8 <MX_GPIO_Init+0x1f4>)
 800a40e:	f7f6 fe43 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a412:	2304      	movs	r3, #4
 800a414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a416:	2300      	movs	r3, #0
 800a418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a41e:	f107 031c 	add.w	r3, r7, #28
 800a422:	4619      	mov	r1, r3
 800a424:	4825      	ldr	r0, [pc, #148]	; (800a4bc <MX_GPIO_Init+0x1f8>)
 800a426:	f7f6 fe37 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800a42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a42e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a430:	2302      	movs	r3, #2
 800a432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a434:	2300      	movs	r3, #0
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a438:	2300      	movs	r3, #0
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a43c:	2305      	movs	r3, #5
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800a440:	f107 031c 	add.w	r3, r7, #28
 800a444:	4619      	mov	r1, r3
 800a446:	481d      	ldr	r0, [pc, #116]	; (800a4bc <MX_GPIO_Init+0x1f8>)
 800a448:	f7f6 fe26 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : echo_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = echo_Pin|OTG_FS_OverCurrent_Pin;
 800a44c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800a450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a452:	2300      	movs	r3, #0
 800a454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a456:	2300      	movs	r3, #0
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a45a:	f107 031c 	add.w	r3, r7, #28
 800a45e:	4619      	mov	r1, r3
 800a460:	4813      	ldr	r0, [pc, #76]	; (800a4b0 <MX_GPIO_Init+0x1ec>)
 800a462:	f7f6 fe19 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : trig_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = trig_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800a466:	f64f 0310 	movw	r3, #63504	; 0xf810
 800a46a:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a46c:	2301      	movs	r3, #1
 800a46e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a470:	2300      	movs	r3, #0
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a474:	2300      	movs	r3, #0
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a478:	f107 031c 	add.w	r3, r7, #28
 800a47c:	4619      	mov	r1, r3
 800a47e:	480c      	ldr	r0, [pc, #48]	; (800a4b0 <MX_GPIO_Init+0x1ec>)
 800a480:	f7f6 fe0a 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800a484:	2302      	movs	r3, #2
 800a486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a488:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <MX_GPIO_Init+0x1f0>)
 800a48a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800a490:	f107 031c 	add.w	r3, r7, #28
 800a494:	4619      	mov	r1, r3
 800a496:	4804      	ldr	r0, [pc, #16]	; (800a4a8 <MX_GPIO_Init+0x1e4>)
 800a498:	f7f6 fdfe 	bl	8001098 <HAL_GPIO_Init>

}
 800a49c:	bf00      	nop
 800a49e:	3730      	adds	r7, #48	; 0x30
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	40023800 	.word	0x40023800
 800a4a8:	40021000 	.word	0x40021000
 800a4ac:	40020800 	.word	0x40020800
 800a4b0:	40020c00 	.word	0x40020c00
 800a4b4:	10120000 	.word	0x10120000
 800a4b8:	40020000 	.word	0x40020000
 800a4bc:	40020400 	.word	0x40020400

0800a4c0 <StartDefaultTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask1(void const * argument)
{
 800a4c0:	b590      	push	{r4, r7, lr}
 800a4c2:	b08b      	sub	sp, #44	; 0x2c
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a4c8:	f000 fa98 	bl	800a9fc <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  sensor_time = hcsr04_read();
 800a4cc:	f7ff fd3e 	bl	8009f4c <hcsr04_read>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	; (800a548 <StartDefaultTask1+0x88>)
 800a4d4:	601a      	str	r2, [r3, #0]
	      distance = sensor_time * 0.034/2;
 800a4d6:	4b1c      	ldr	r3, [pc, #112]	; (800a548 <StartDefaultTask1+0x88>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f6 f80a 	bl	80004f4 <__aeabi_ui2d>
 800a4e0:	a317      	add	r3, pc, #92	; (adr r3, 800a540 <StartDefaultTask1+0x80>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f6 f87f 	bl	80005e8 <__aeabi_dmul>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f04f 0200 	mov.w	r2, #0
 800a4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4fa:	f7f6 f99f 	bl	800083c <__aeabi_ddiv>
 800a4fe:	4603      	mov	r3, r0
 800a500:	460c      	mov	r4, r1
 800a502:	4618      	mov	r0, r3
 800a504:	4621      	mov	r1, r4
 800a506:	f7f6 fa81 	bl	8000a0c <__aeabi_d2uiz>
 800a50a:	4603      	mov	r3, r0
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <StartDefaultTask1+0x8c>)
 800a510:	801a      	strh	r2, [r3, #0]

	      char buff[30];
	      sprintf(buff, "current distance value = %d\r\n", distance);
 800a512:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <StartDefaultTask1+0x8c>)
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f107 0308 	add.w	r3, r7, #8
 800a51c:	490c      	ldr	r1, [pc, #48]	; (800a550 <StartDefaultTask1+0x90>)
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fe9e 	bl	800b260 <siprintf>
	      HAL_UART_Transmit(&huart2, buff, sizeof(buff), 1000);
 800a524:	f107 0108 	add.w	r1, r7, #8
 800a528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a52c:	221e      	movs	r2, #30
 800a52e:	4809      	ldr	r0, [pc, #36]	; (800a554 <StartDefaultTask1+0x94>)
 800a530:	f7f9 ffcb 	bl	80044ca <HAL_UART_Transmit>

	      osDelay(500);
 800a534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a538:	f7fd fafb 	bl	8007b32 <osDelay>
  {
 800a53c:	e7c6      	b.n	800a4cc <StartDefaultTask1+0xc>
 800a53e:	bf00      	nop
 800a540:	b020c49c 	.word	0xb020c49c
 800a544:	3fa16872 	.word	0x3fa16872
 800a548:	2000406c 	.word	0x2000406c
 800a54c:	200040c4 	.word	0x200040c4
 800a550:	0800b99c 	.word	0x0800b99c
 800a554:	20004120 	.word	0x20004120

0800a558 <StartDefaultTask2>:
  }
  /* USER CODE END 5 */
}

void StartDefaultTask2(void const * argument)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a560:	f000 fa4c 	bl	800a9fc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  char b[1];
	  	  if (HAL_UART_Receive(&huart2, b, sizeof(b), 1000) == HAL_OK) {
 800a564:	f107 010c 	add.w	r1, r7, #12
 800a568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a56c:	2201      	movs	r2, #1
 800a56e:	481d      	ldr	r0, [pc, #116]	; (800a5e4 <StartDefaultTask2+0x8c>)
 800a570:	f7fa f844 	bl	80045fc <HAL_UART_Receive>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d12e      	bne.n	800a5d8 <StartDefaultTask2+0x80>
	  		  if(b[0] == 'Y') {
 800a57a:	7b3b      	ldrb	r3, [r7, #12]
 800a57c:	2b59      	cmp	r3, #89	; 0x59
 800a57e:	d10c      	bne.n	800a59a <StartDefaultTask2+0x42>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800a580:	2201      	movs	r2, #1
 800a582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a586:	4818      	ldr	r0, [pc, #96]	; (800a5e8 <StartDefaultTask2+0x90>)
 800a588:	f7f6 ff38 	bl	80013fc <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800a58c:	2200      	movs	r2, #0
 800a58e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a592:	4815      	ldr	r0, [pc, #84]	; (800a5e8 <StartDefaultTask2+0x90>)
 800a594:	f7f6 ff32 	bl	80013fc <HAL_GPIO_WritePin>
 800a598:	e01e      	b.n	800a5d8 <StartDefaultTask2+0x80>
	  		  } else if(b[0] == 'O') {
 800a59a:	7b3b      	ldrb	r3, [r7, #12]
 800a59c:	2b4f      	cmp	r3, #79	; 0x4f
 800a59e:	d10c      	bne.n	800a5ba <StartDefaultTask2+0x62>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5a6:	4810      	ldr	r0, [pc, #64]	; (800a5e8 <StartDefaultTask2+0x90>)
 800a5a8:	f7f6 ff28 	bl	80013fc <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a5b2:	480d      	ldr	r0, [pc, #52]	; (800a5e8 <StartDefaultTask2+0x90>)
 800a5b4:	f7f6 ff22 	bl	80013fc <HAL_GPIO_WritePin>
 800a5b8:	e00e      	b.n	800a5d8 <StartDefaultTask2+0x80>
	  		  } else if(b[0] == 'R') {
 800a5ba:	7b3b      	ldrb	r3, [r7, #12]
 800a5bc:	2b52      	cmp	r3, #82	; 0x52
 800a5be:	d10b      	bne.n	800a5d8 <StartDefaultTask2+0x80>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5c6:	4808      	ldr	r0, [pc, #32]	; (800a5e8 <StartDefaultTask2+0x90>)
 800a5c8:	f7f6 ff18 	bl	80013fc <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a5d2:	4805      	ldr	r0, [pc, #20]	; (800a5e8 <StartDefaultTask2+0x90>)
 800a5d4:	f7f6 ff12 	bl	80013fc <HAL_GPIO_WritePin>
	  		  }

	  	  }

	  	  osDelay(500);
 800a5d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a5dc:	f7fd faa9 	bl	8007b32 <osDelay>
  {
 800a5e0:	e7c0      	b.n	800a564 <StartDefaultTask2+0xc>
 800a5e2:	bf00      	nop
 800a5e4:	20004120 	.word	0x20004120
 800a5e8:	40020c00 	.word	0x40020c00

0800a5ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a5f0:	bf00      	nop
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
	...

0800a5fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a602:	2300      	movs	r3, #0
 800a604:	607b      	str	r3, [r7, #4]
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <HAL_MspInit+0x54>)
 800a608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60a:	4a11      	ldr	r2, [pc, #68]	; (800a650 <HAL_MspInit+0x54>)
 800a60c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a610:	6453      	str	r3, [r2, #68]	; 0x44
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <HAL_MspInit+0x54>)
 800a614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a61e:	2300      	movs	r3, #0
 800a620:	603b      	str	r3, [r7, #0]
 800a622:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <HAL_MspInit+0x54>)
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	4a0a      	ldr	r2, [pc, #40]	; (800a650 <HAL_MspInit+0x54>)
 800a628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a62c:	6413      	str	r3, [r2, #64]	; 0x40
 800a62e:	4b08      	ldr	r3, [pc, #32]	; (800a650 <HAL_MspInit+0x54>)
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a636:	603b      	str	r3, [r7, #0]
 800a638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a63a:	2200      	movs	r2, #0
 800a63c:	210f      	movs	r1, #15
 800a63e:	f06f 0001 	mvn.w	r0, #1
 800a642:	f7f6 fcf2 	bl	800102a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	40023800 	.word	0x40023800

0800a654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08a      	sub	sp, #40	; 0x28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	605a      	str	r2, [r3, #4]
 800a666:	609a      	str	r2, [r3, #8]
 800a668:	60da      	str	r2, [r3, #12]
 800a66a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a19      	ldr	r2, [pc, #100]	; (800a6d8 <HAL_I2C_MspInit+0x84>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d12c      	bne.n	800a6d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	4b18      	ldr	r3, [pc, #96]	; (800a6dc <HAL_I2C_MspInit+0x88>)
 800a67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67e:	4a17      	ldr	r2, [pc, #92]	; (800a6dc <HAL_I2C_MspInit+0x88>)
 800a680:	f043 0302 	orr.w	r3, r3, #2
 800a684:	6313      	str	r3, [r2, #48]	; 0x30
 800a686:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <HAL_I2C_MspInit+0x88>)
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800a692:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a698:	2312      	movs	r3, #18
 800a69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a69c:	2301      	movs	r3, #1
 800a69e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6a8:	f107 0314 	add.w	r3, r7, #20
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	480c      	ldr	r0, [pc, #48]	; (800a6e0 <HAL_I2C_MspInit+0x8c>)
 800a6b0:	f7f6 fcf2 	bl	8001098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <HAL_I2C_MspInit+0x88>)
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6bc:	4a07      	ldr	r2, [pc, #28]	; (800a6dc <HAL_I2C_MspInit+0x88>)
 800a6be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6c2:	6413      	str	r3, [r2, #64]	; 0x40
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <HAL_I2C_MspInit+0x88>)
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a6d0:	bf00      	nop
 800a6d2:	3728      	adds	r7, #40	; 0x28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	40005400 	.word	0x40005400
 800a6dc:	40023800 	.word	0x40023800
 800a6e0:	40020400 	.word	0x40020400

0800a6e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	; 0x28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6ec:	f107 0314 	add.w	r3, r7, #20
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	605a      	str	r2, [r3, #4]
 800a6f6:	609a      	str	r2, [r3, #8]
 800a6f8:	60da      	str	r2, [r3, #12]
 800a6fa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a28      	ldr	r2, [pc, #160]	; (800a7a4 <HAL_I2S_MspInit+0xc0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d14a      	bne.n	800a79c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a706:	2300      	movs	r3, #0
 800a708:	613b      	str	r3, [r7, #16]
 800a70a:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70e:	4a26      	ldr	r2, [pc, #152]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a714:	6413      	str	r3, [r2, #64]	; 0x40
 800a716:	4b24      	ldr	r3, [pc, #144]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	4b20      	ldr	r3, [pc, #128]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72a:	4a1f      	ldr	r2, [pc, #124]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a72c:	f043 0301 	orr.w	r3, r3, #1
 800a730:	6313      	str	r3, [r2, #48]	; 0x30
 800a732:	4b1d      	ldr	r3, [pc, #116]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a73e:	2300      	movs	r3, #0
 800a740:	60bb      	str	r3, [r7, #8]
 800a742:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a746:	4a18      	ldr	r2, [pc, #96]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a748:	f043 0304 	orr.w	r3, r3, #4
 800a74c:	6313      	str	r3, [r2, #48]	; 0x30
 800a74e:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <HAL_I2S_MspInit+0xc4>)
 800a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	60bb      	str	r3, [r7, #8]
 800a758:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a75a:	2310      	movs	r3, #16
 800a75c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a75e:	2302      	movs	r3, #2
 800a760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a766:	2300      	movs	r3, #0
 800a768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a76a:	2306      	movs	r3, #6
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a76e:	f107 0314 	add.w	r3, r7, #20
 800a772:	4619      	mov	r1, r3
 800a774:	480d      	ldr	r0, [pc, #52]	; (800a7ac <HAL_I2S_MspInit+0xc8>)
 800a776:	f7f6 fc8f 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800a77a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800a77e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a780:	2302      	movs	r3, #2
 800a782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a784:	2300      	movs	r3, #0
 800a786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a788:	2300      	movs	r3, #0
 800a78a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a78c:	2306      	movs	r3, #6
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4619      	mov	r1, r3
 800a796:	4806      	ldr	r0, [pc, #24]	; (800a7b0 <HAL_I2S_MspInit+0xcc>)
 800a798:	f7f6 fc7e 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a79c:	bf00      	nop
 800a79e:	3728      	adds	r7, #40	; 0x28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40003c00 	.word	0x40003c00
 800a7a8:	40023800 	.word	0x40023800
 800a7ac:	40020000 	.word	0x40020000
 800a7b0:	40020800 	.word	0x40020800

0800a7b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	; 0x28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7bc:	f107 0314 	add.w	r3, r7, #20
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	605a      	str	r2, [r3, #4]
 800a7c6:	609a      	str	r2, [r3, #8]
 800a7c8:	60da      	str	r2, [r3, #12]
 800a7ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a19      	ldr	r2, [pc, #100]	; (800a838 <HAL_SPI_MspInit+0x84>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d12b      	bne.n	800a82e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	613b      	str	r3, [r7, #16]
 800a7da:	4b18      	ldr	r3, [pc, #96]	; (800a83c <HAL_SPI_MspInit+0x88>)
 800a7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7de:	4a17      	ldr	r2, [pc, #92]	; (800a83c <HAL_SPI_MspInit+0x88>)
 800a7e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a7e6:	4b15      	ldr	r3, [pc, #84]	; (800a83c <HAL_SPI_MspInit+0x88>)
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7ee:	613b      	str	r3, [r7, #16]
 800a7f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <HAL_SPI_MspInit+0x88>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	4a10      	ldr	r2, [pc, #64]	; (800a83c <HAL_SPI_MspInit+0x88>)
 800a7fc:	f043 0301 	orr.w	r3, r3, #1
 800a800:	6313      	str	r3, [r2, #48]	; 0x30
 800a802:	4b0e      	ldr	r3, [pc, #56]	; (800a83c <HAL_SPI_MspInit+0x88>)
 800a804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800a80e:	23e0      	movs	r3, #224	; 0xe0
 800a810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a812:	2302      	movs	r3, #2
 800a814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a816:	2300      	movs	r3, #0
 800a818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a81a:	2300      	movs	r3, #0
 800a81c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a81e:	2305      	movs	r3, #5
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a822:	f107 0314 	add.w	r3, r7, #20
 800a826:	4619      	mov	r1, r3
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <HAL_SPI_MspInit+0x8c>)
 800a82a:	f7f6 fc35 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a82e:	bf00      	nop
 800a830:	3728      	adds	r7, #40	; 0x28
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	40013000 	.word	0x40013000
 800a83c:	40023800 	.word	0x40023800
 800a840:	40020000 	.word	0x40020000

0800a844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a84c:	f107 0314 	add.w	r3, r7, #20
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	605a      	str	r2, [r3, #4]
 800a856:	609a      	str	r2, [r3, #8]
 800a858:	60da      	str	r2, [r3, #12]
 800a85a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a19      	ldr	r2, [pc, #100]	; (800a8c8 <HAL_UART_MspInit+0x84>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d12b      	bne.n	800a8be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a866:	2300      	movs	r3, #0
 800a868:	613b      	str	r3, [r7, #16]
 800a86a:	4b18      	ldr	r3, [pc, #96]	; (800a8cc <HAL_UART_MspInit+0x88>)
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	4a17      	ldr	r2, [pc, #92]	; (800a8cc <HAL_UART_MspInit+0x88>)
 800a870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a874:	6413      	str	r3, [r2, #64]	; 0x40
 800a876:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <HAL_UART_MspInit+0x88>)
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a87e:	613b      	str	r3, [r7, #16]
 800a880:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <HAL_UART_MspInit+0x88>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <HAL_UART_MspInit+0x88>)
 800a88c:	f043 0301 	orr.w	r3, r3, #1
 800a890:	6313      	str	r3, [r2, #48]	; 0x30
 800a892:	4b0e      	ldr	r3, [pc, #56]	; (800a8cc <HAL_UART_MspInit+0x88>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a89e:	230c      	movs	r3, #12
 800a8a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a8ae:	2307      	movs	r3, #7
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8b2:	f107 0314 	add.w	r3, r7, #20
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <HAL_UART_MspInit+0x8c>)
 800a8ba:	f7f6 fbed 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a8be:	bf00      	nop
 800a8c0:	3728      	adds	r7, #40	; 0x28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	40004400 	.word	0x40004400
 800a8cc:	40023800 	.word	0x40023800
 800a8d0:	40020000 	.word	0x40020000

0800a8d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a8d8:	bf00      	nop
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a8e6:	e7fe      	b.n	800a8e6 <HardFault_Handler+0x4>

0800a8e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a8ec:	e7fe      	b.n	800a8ec <MemManage_Handler+0x4>

0800a8ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a8f2:	e7fe      	b.n	800a8f2 <BusFault_Handler+0x4>

0800a8f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a8f8:	e7fe      	b.n	800a8f8 <UsageFault_Handler+0x4>

0800a8fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a90c:	f7f6 fa70 	bl	8000df0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a910:	f7fe fd9a 	bl	8009448 <xTaskGetSchedulerState>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d001      	beq.n	800a91e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800a91a:	f7ff f855 	bl	80099c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a91e:	bf00      	nop
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800a928:	4802      	ldr	r0, [pc, #8]	; (800a934 <OTG_FS_IRQHandler+0x10>)
 800a92a:	f7f7 f805 	bl	8001938 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a92e:	bf00      	nop
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20004580 	.word	0x20004580

0800a938 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a940:	4b11      	ldr	r3, [pc, #68]	; (800a988 <_sbrk+0x50>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d102      	bne.n	800a94e <_sbrk+0x16>
		heap_end = &end;
 800a948:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <_sbrk+0x50>)
 800a94a:	4a10      	ldr	r2, [pc, #64]	; (800a98c <_sbrk+0x54>)
 800a94c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a94e:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <_sbrk+0x50>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a954:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <_sbrk+0x50>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4413      	add	r3, r2
 800a95c:	466a      	mov	r2, sp
 800a95e:	4293      	cmp	r3, r2
 800a960:	d907      	bls.n	800a972 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a962:	f000 fb77 	bl	800b054 <__errno>
 800a966:	4602      	mov	r2, r0
 800a968:	230c      	movs	r3, #12
 800a96a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
 800a970:	e006      	b.n	800a980 <_sbrk+0x48>
	}

	heap_end += incr;
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <_sbrk+0x50>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4413      	add	r3, r2
 800a97a:	4a03      	ldr	r2, [pc, #12]	; (800a988 <_sbrk+0x50>)
 800a97c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a97e:	68fb      	ldr	r3, [r7, #12]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20004054 	.word	0x20004054
 800a98c:	20004848 	.word	0x20004848

0800a990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a990:	b480      	push	{r7}
 800a992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a994:	4b16      	ldr	r3, [pc, #88]	; (800a9f0 <SystemInit+0x60>)
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99a:	4a15      	ldr	r2, [pc, #84]	; (800a9f0 <SystemInit+0x60>)
 800a99c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a9a4:	4b13      	ldr	r3, [pc, #76]	; (800a9f4 <SystemInit+0x64>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a12      	ldr	r2, [pc, #72]	; (800a9f4 <SystemInit+0x64>)
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a9b0:	4b10      	ldr	r3, [pc, #64]	; (800a9f4 <SystemInit+0x64>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a9b6:	4b0f      	ldr	r3, [pc, #60]	; (800a9f4 <SystemInit+0x64>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a0e      	ldr	r2, [pc, #56]	; (800a9f4 <SystemInit+0x64>)
 800a9bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a9c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <SystemInit+0x64>)
 800a9c8:	4a0b      	ldr	r2, [pc, #44]	; (800a9f8 <SystemInit+0x68>)
 800a9ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a9cc:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <SystemInit+0x64>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a08      	ldr	r2, [pc, #32]	; (800a9f4 <SystemInit+0x64>)
 800a9d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a9d8:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <SystemInit+0x64>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a9de:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <SystemInit+0x60>)
 800a9e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9e4:	609a      	str	r2, [r3, #8]
#endif
}
 800a9e6:	bf00      	nop
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	e000ed00 	.word	0xe000ed00
 800a9f4:	40023800 	.word	0x40023800
 800a9f8:	24003010 	.word	0x24003010

0800a9fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aa00:	2201      	movs	r2, #1
 800aa02:	490e      	ldr	r1, [pc, #56]	; (800aa3c <MX_USB_HOST_Init+0x40>)
 800aa04:	480e      	ldr	r0, [pc, #56]	; (800aa40 <MX_USB_HOST_Init+0x44>)
 800aa06:	f7fb fbf5 	bl	80061f4 <USBH_Init>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa10:	f7ff fdec 	bl	800a5ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aa14:	490b      	ldr	r1, [pc, #44]	; (800aa44 <MX_USB_HOST_Init+0x48>)
 800aa16:	480a      	ldr	r0, [pc, #40]	; (800aa40 <MX_USB_HOST_Init+0x44>)
 800aa18:	f7fb fc87 	bl	800632a <USBH_RegisterClass>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa22:	f7ff fde3 	bl	800a5ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aa26:	4806      	ldr	r0, [pc, #24]	; (800aa40 <MX_USB_HOST_Init+0x44>)
 800aa28:	f7fb fd0c 	bl	8006444 <USBH_Start>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa32:	f7ff fddb 	bl	800a5ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa36:	bf00      	nop
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0800aa49 	.word	0x0800aa49
 800aa40:	200041a8 	.word	0x200041a8
 800aa44:	20000008 	.word	0x20000008

0800aa48 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d819      	bhi.n	800aa90 <USBH_UserProcess+0x48>
 800aa5c:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <USBH_UserProcess+0x1c>)
 800aa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa62:	bf00      	nop
 800aa64:	0800aa91 	.word	0x0800aa91
 800aa68:	0800aa81 	.word	0x0800aa81
 800aa6c:	0800aa91 	.word	0x0800aa91
 800aa70:	0800aa89 	.word	0x0800aa89
 800aa74:	0800aa79 	.word	0x0800aa79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa78:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <USBH_UserProcess+0x58>)
 800aa7a:	2203      	movs	r2, #3
 800aa7c:	701a      	strb	r2, [r3, #0]
  break;
 800aa7e:	e008      	b.n	800aa92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <USBH_UserProcess+0x58>)
 800aa82:	2202      	movs	r2, #2
 800aa84:	701a      	strb	r2, [r3, #0]
  break;
 800aa86:	e004      	b.n	800aa92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <USBH_UserProcess+0x58>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	701a      	strb	r2, [r3, #0]
  break;
 800aa8e:	e000      	b.n	800aa92 <USBH_UserProcess+0x4a>

  default:
  break;
 800aa90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa92:	bf00      	nop
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20004058 	.word	0x20004058

0800aaa4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaac:	f107 0314 	add.w	r3, r7, #20
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	605a      	str	r2, [r3, #4]
 800aab6:	609a      	str	r2, [r3, #8]
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac4:	d147      	bne.n	800ab56 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aac6:	2300      	movs	r3, #0
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	4b25      	ldr	r3, [pc, #148]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	4a24      	ldr	r2, [pc, #144]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800aad0:	f043 0301 	orr.w	r3, r3, #1
 800aad4:	6313      	str	r3, [r2, #48]	; 0x30
 800aad6:	4b22      	ldr	r3, [pc, #136]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aaf0:	f107 0314 	add.w	r3, r7, #20
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	481b      	ldr	r0, [pc, #108]	; (800ab64 <HAL_HCD_MspInit+0xc0>)
 800aaf8:	f7f6 face 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aafc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab02:	2302      	movs	r3, #2
 800ab04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab0e:	230a      	movs	r3, #10
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab12:	f107 0314 	add.w	r3, r7, #20
 800ab16:	4619      	mov	r1, r3
 800ab18:	4812      	ldr	r0, [pc, #72]	; (800ab64 <HAL_HCD_MspInit+0xc0>)
 800ab1a:	f7f6 fabd 	bl	8001098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab1e:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800ab20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab22:	4a0f      	ldr	r2, [pc, #60]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800ab24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab28:	6353      	str	r3, [r2, #52]	; 0x34
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	4b0c      	ldr	r3, [pc, #48]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	4a0b      	ldr	r2, [pc, #44]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800ab34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab38:	6453      	str	r3, [r2, #68]	; 0x44
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <HAL_HCD_MspInit+0xbc>)
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ab46:	2200      	movs	r2, #0
 800ab48:	2105      	movs	r1, #5
 800ab4a:	2043      	movs	r0, #67	; 0x43
 800ab4c:	f7f6 fa6d 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab50:	2043      	movs	r0, #67	; 0x43
 800ab52:	f7f6 fa86 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab56:	bf00      	nop
 800ab58:	3728      	adds	r7, #40	; 0x28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40023800 	.word	0x40023800
 800ab64:	40020000 	.word	0x40020000

0800ab68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fb ffb7 	bl	8006aea <USBH_LL_IncTimer>
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fb fffc 	bl	8006b90 <USBH_LL_Connect>
}
 800ab98:	bf00      	nop
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fc f822 	bl	8006bf8 <USBH_LL_Disconnect>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70fb      	strb	r3, [r7, #3]
 800abc8:	4613      	mov	r3, r2
 800abca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc f860 	bl	8006c98 <USBH_LL_NotifyURBChange>
#endif
}
 800abd8:	bf00      	nop
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fb ffa5 	bl	8006b3e <USBH_LL_PortEnabled>
} 
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fb ffa5 	bl	8006b5a <USBH_LL_PortDisabled>
} 
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d12a      	bne.n	800ac80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ac2a:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a15      	ldr	r2, [pc, #84]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac3a:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ac42:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac44:	2208      	movs	r2, #8
 800ac46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ac48:	4b10      	ldr	r3, [pc, #64]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac4e:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac54:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac56:	2202      	movs	r2, #2
 800ac58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac5a:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac60:	480a      	ldr	r0, [pc, #40]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac62:	f7f6 fbe4 	bl	800142e <HAL_HCD_Init>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac6c:	f7ff fcbe 	bl	800a5ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac70:	4806      	ldr	r0, [pc, #24]	; (800ac8c <USBH_LL_Init+0x74>)
 800ac72:	f7f6 ffdf 	bl	8001c34 <HAL_HCD_GetCurrentFrame>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7fb ff26 	bl	8006acc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20004580 	.word	0x20004580

0800ac90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7f6 ff4c 	bl	8001b44 <HAL_HCD_Start>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 f95c 	bl	800af70 <USBH_Get_USB_Status>
 800acb8:	4603      	mov	r3, r0
 800acba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800acdc:	4618      	mov	r0, r3
 800acde:	f7f6 ff54 	bl	8001b8a <HAL_HCD_Stop>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f941 	bl	800af70 <USBH_Get_USB_Status>
 800acee:	4603      	mov	r3, r0
 800acf0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad04:	2301      	movs	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7f6 ff9e 	bl	8001c50 <HAL_HCD_GetCurrentSpeed>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d007      	beq.n	800ad2a <USBH_LL_GetSpeed+0x2e>
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d302      	bcc.n	800ad24 <USBH_LL_GetSpeed+0x28>
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d006      	beq.n	800ad30 <USBH_LL_GetSpeed+0x34>
 800ad22:	e008      	b.n	800ad36 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]
    break;
 800ad28:	e008      	b.n	800ad3c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad2e:	e005      	b.n	800ad3c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad30:	2302      	movs	r3, #2
 800ad32:	73fb      	strb	r3, [r7, #15]
    break;
 800ad34:	e002      	b.n	800ad3c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ad36:	2301      	movs	r3, #1
 800ad38:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3a:	bf00      	nop
  }
  return  speed;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7f6 ff31 	bl	8001bc4 <HAL_HCD_ResetPort>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 f901 	bl	800af70 <USBH_Get_USB_Status>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	4611      	mov	r1, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7f6 ff39 	bl	8001c0a <HAL_HCD_HC_GetXferCount>
 800ad98:	4603      	mov	r3, r0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ada2:	b590      	push	{r4, r7, lr}
 800ada4:	b089      	sub	sp, #36	; 0x24
 800ada6:	af04      	add	r7, sp, #16
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	4608      	mov	r0, r1
 800adac:	4611      	mov	r1, r2
 800adae:	461a      	mov	r2, r3
 800adb0:	4603      	mov	r3, r0
 800adb2:	70fb      	strb	r3, [r7, #3]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70bb      	strb	r3, [r7, #2]
 800adb8:	4613      	mov	r3, r2
 800adba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800adca:	787c      	ldrb	r4, [r7, #1]
 800adcc:	78ba      	ldrb	r2, [r7, #2]
 800adce:	78f9      	ldrb	r1, [r7, #3]
 800add0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	4623      	mov	r3, r4
 800ade2:	f7f6 fb86 	bl	80014f2 <HAL_HCD_HC_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	4618      	mov	r0, r3
 800adee:	f000 f8bf 	bl	800af70 <USBH_Get_USB_Status>
 800adf2:	4603      	mov	r3, r0
 800adf4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd90      	pop	{r4, r7, pc}

0800ae00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae1a:	78fa      	ldrb	r2, [r7, #3]
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f6 fbff 	bl	8001622 <HAL_HCD_HC_Halt>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 f8a0 	bl	800af70 <USBH_Get_USB_Status>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae3e:	b590      	push	{r4, r7, lr}
 800ae40:	b089      	sub	sp, #36	; 0x24
 800ae42:	af04      	add	r7, sp, #16
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	4608      	mov	r0, r1
 800ae48:	4611      	mov	r1, r2
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	70fb      	strb	r3, [r7, #3]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70bb      	strb	r3, [r7, #2]
 800ae54:	4613      	mov	r3, r2
 800ae56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800ae66:	787c      	ldrb	r4, [r7, #1]
 800ae68:	78ba      	ldrb	r2, [r7, #2]
 800ae6a:	78f9      	ldrb	r1, [r7, #3]
 800ae6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	4623      	mov	r3, r4
 800ae82:	f7f6 fbf1 	bl	8001668 <HAL_HCD_HC_SubmitRequest>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f86f 	bl	800af70 <USBH_Get_USB_Status>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}

0800aea0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aeb2:	78fa      	ldrb	r2, [r7, #3]
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7f6 fe92 	bl	8001be0 <HAL_HCD_HC_GetURBState>
 800aebc:	4603      	mov	r3, r0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d103      	bne.n	800aee4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 f872 	bl	800afc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aee4:	20c8      	movs	r0, #200	; 0xc8
 800aee6:	f7f5 ffa3 	bl	8000e30 <HAL_Delay>
  return USBH_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
 800af00:	4613      	mov	r3, r2
 800af02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af0c:	78fa      	ldrb	r2, [r7, #3]
 800af0e:	68f9      	ldr	r1, [r7, #12]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	440b      	add	r3, r1
 800af1a:	333b      	adds	r3, #59	; 0x3b
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af22:	78fa      	ldrb	r2, [r7, #3]
 800af24:	68f9      	ldr	r1, [r7, #12]
 800af26:	4613      	mov	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	440b      	add	r3, r1
 800af30:	3350      	adds	r3, #80	; 0x50
 800af32:	78ba      	ldrb	r2, [r7, #2]
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	e009      	b.n	800af4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	4613      	mov	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	440b      	add	r3, r1
 800af46:	3351      	adds	r3, #81	; 0x51
 800af48:	78ba      	ldrb	r2, [r7, #2]
 800af4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7f5 ff64 	bl	8000e30 <HAL_Delay>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af7e:	79fb      	ldrb	r3, [r7, #7]
 800af80:	2b03      	cmp	r3, #3
 800af82:	d817      	bhi.n	800afb4 <USBH_Get_USB_Status+0x44>
 800af84:	a201      	add	r2, pc, #4	; (adr r2, 800af8c <USBH_Get_USB_Status+0x1c>)
 800af86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8a:	bf00      	nop
 800af8c:	0800af9d 	.word	0x0800af9d
 800af90:	0800afa3 	.word	0x0800afa3
 800af94:	0800afa9 	.word	0x0800afa9
 800af98:	0800afaf 	.word	0x0800afaf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73fb      	strb	r3, [r7, #15]
    break;
 800afa0:	e00b      	b.n	800afba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afa2:	2302      	movs	r3, #2
 800afa4:	73fb      	strb	r3, [r7, #15]
    break;
 800afa6:	e008      	b.n	800afba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afa8:	2301      	movs	r3, #1
 800afaa:	73fb      	strb	r3, [r7, #15]
    break;
 800afac:	e005      	b.n	800afba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afae:	2302      	movs	r3, #2
 800afb0:	73fb      	strb	r3, [r7, #15]
    break;
 800afb2:	e002      	b.n	800afba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afb4:	2302      	movs	r3, #2
 800afb6:	73fb      	strb	r3, [r7, #15]
    break;
 800afb8:	bf00      	nop
  }
  return usb_status;
 800afba:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
 800afe0:	e001      	b.n	800afe6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
 800afe8:	461a      	mov	r2, r3
 800afea:	2101      	movs	r1, #1
 800afec:	4803      	ldr	r0, [pc, #12]	; (800affc <MX_DriverVbusFS+0x34>)
 800afee:	f7f6 fa05 	bl	80013fc <HAL_GPIO_WritePin>
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	40020800 	.word	0x40020800

0800b000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b000:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b038 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b004:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b006:	e003      	b.n	800b010 <LoopCopyDataInit>

0800b008 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b008:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b00a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b00c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b00e:	3104      	adds	r1, #4

0800b010 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b010:	480b      	ldr	r0, [pc, #44]	; (800b040 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b012:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b014:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b016:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b018:	d3f6      	bcc.n	800b008 <CopyDataInit>
  ldr  r2, =_sbss
 800b01a:	4a0b      	ldr	r2, [pc, #44]	; (800b048 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b01c:	e002      	b.n	800b024 <LoopFillZerobss>

0800b01e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b01e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b020:	f842 3b04 	str.w	r3, [r2], #4

0800b024 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b026:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b028:	d3f9      	bcc.n	800b01e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b02a:	f7ff fcb1 	bl	800a990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b02e:	f000 f817 	bl	800b060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b032:	f7fe ffc7 	bl	8009fc4 <main>
  bx  lr    
 800b036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b038:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b03c:	0800ba18 	.word	0x0800ba18
  ldr  r0, =_sdata
 800b040:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b044:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800b048:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800b04c:	20004848 	.word	0x20004848

0800b050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b050:	e7fe      	b.n	800b050 <ADC_IRQHandler>
	...

0800b054 <__errno>:
 800b054:	4b01      	ldr	r3, [pc, #4]	; (800b05c <__errno+0x8>)
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20000030 	.word	0x20000030

0800b060 <__libc_init_array>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	4e0d      	ldr	r6, [pc, #52]	; (800b098 <__libc_init_array+0x38>)
 800b064:	4c0d      	ldr	r4, [pc, #52]	; (800b09c <__libc_init_array+0x3c>)
 800b066:	1ba4      	subs	r4, r4, r6
 800b068:	10a4      	asrs	r4, r4, #2
 800b06a:	2500      	movs	r5, #0
 800b06c:	42a5      	cmp	r5, r4
 800b06e:	d109      	bne.n	800b084 <__libc_init_array+0x24>
 800b070:	4e0b      	ldr	r6, [pc, #44]	; (800b0a0 <__libc_init_array+0x40>)
 800b072:	4c0c      	ldr	r4, [pc, #48]	; (800b0a4 <__libc_init_array+0x44>)
 800b074:	f000 fc38 	bl	800b8e8 <_init>
 800b078:	1ba4      	subs	r4, r4, r6
 800b07a:	10a4      	asrs	r4, r4, #2
 800b07c:	2500      	movs	r5, #0
 800b07e:	42a5      	cmp	r5, r4
 800b080:	d105      	bne.n	800b08e <__libc_init_array+0x2e>
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b088:	4798      	blx	r3
 800b08a:	3501      	adds	r5, #1
 800b08c:	e7ee      	b.n	800b06c <__libc_init_array+0xc>
 800b08e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b092:	4798      	blx	r3
 800b094:	3501      	adds	r5, #1
 800b096:	e7f2      	b.n	800b07e <__libc_init_array+0x1e>
 800b098:	0800ba10 	.word	0x0800ba10
 800b09c:	0800ba10 	.word	0x0800ba10
 800b0a0:	0800ba10 	.word	0x0800ba10
 800b0a4:	0800ba14 	.word	0x0800ba14

0800b0a8 <malloc>:
 800b0a8:	4b02      	ldr	r3, [pc, #8]	; (800b0b4 <malloc+0xc>)
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	f000 b86d 	b.w	800b18c <_malloc_r>
 800b0b2:	bf00      	nop
 800b0b4:	20000030 	.word	0x20000030

0800b0b8 <free>:
 800b0b8:	4b02      	ldr	r3, [pc, #8]	; (800b0c4 <free+0xc>)
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	f000 b817 	b.w	800b0f0 <_free_r>
 800b0c2:	bf00      	nop
 800b0c4:	20000030 	.word	0x20000030

0800b0c8 <memcpy>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	1e43      	subs	r3, r0, #1
 800b0cc:	440a      	add	r2, r1
 800b0ce:	4291      	cmp	r1, r2
 800b0d0:	d100      	bne.n	800b0d4 <memcpy+0xc>
 800b0d2:	bd10      	pop	{r4, pc}
 800b0d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0dc:	e7f7      	b.n	800b0ce <memcpy+0x6>

0800b0de <memset>:
 800b0de:	4402      	add	r2, r0
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d100      	bne.n	800b0e8 <memset+0xa>
 800b0e6:	4770      	bx	lr
 800b0e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ec:	e7f9      	b.n	800b0e2 <memset+0x4>
	...

0800b0f0 <_free_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	2900      	cmp	r1, #0
 800b0f6:	d045      	beq.n	800b184 <_free_r+0x94>
 800b0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0fc:	1f0c      	subs	r4, r1, #4
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bfb8      	it	lt
 800b102:	18e4      	addlt	r4, r4, r3
 800b104:	f000 f8cc 	bl	800b2a0 <__malloc_lock>
 800b108:	4a1f      	ldr	r2, [pc, #124]	; (800b188 <_free_r+0x98>)
 800b10a:	6813      	ldr	r3, [r2, #0]
 800b10c:	4610      	mov	r0, r2
 800b10e:	b933      	cbnz	r3, 800b11e <_free_r+0x2e>
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	6014      	str	r4, [r2, #0]
 800b114:	4628      	mov	r0, r5
 800b116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b11a:	f000 b8c2 	b.w	800b2a2 <__malloc_unlock>
 800b11e:	42a3      	cmp	r3, r4
 800b120:	d90c      	bls.n	800b13c <_free_r+0x4c>
 800b122:	6821      	ldr	r1, [r4, #0]
 800b124:	1862      	adds	r2, r4, r1
 800b126:	4293      	cmp	r3, r2
 800b128:	bf04      	itt	eq
 800b12a:	681a      	ldreq	r2, [r3, #0]
 800b12c:	685b      	ldreq	r3, [r3, #4]
 800b12e:	6063      	str	r3, [r4, #4]
 800b130:	bf04      	itt	eq
 800b132:	1852      	addeq	r2, r2, r1
 800b134:	6022      	streq	r2, [r4, #0]
 800b136:	6004      	str	r4, [r0, #0]
 800b138:	e7ec      	b.n	800b114 <_free_r+0x24>
 800b13a:	4613      	mov	r3, r2
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	b10a      	cbz	r2, 800b144 <_free_r+0x54>
 800b140:	42a2      	cmp	r2, r4
 800b142:	d9fa      	bls.n	800b13a <_free_r+0x4a>
 800b144:	6819      	ldr	r1, [r3, #0]
 800b146:	1858      	adds	r0, r3, r1
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d10b      	bne.n	800b164 <_free_r+0x74>
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	4401      	add	r1, r0
 800b150:	1858      	adds	r0, r3, r1
 800b152:	4282      	cmp	r2, r0
 800b154:	6019      	str	r1, [r3, #0]
 800b156:	d1dd      	bne.n	800b114 <_free_r+0x24>
 800b158:	6810      	ldr	r0, [r2, #0]
 800b15a:	6852      	ldr	r2, [r2, #4]
 800b15c:	605a      	str	r2, [r3, #4]
 800b15e:	4401      	add	r1, r0
 800b160:	6019      	str	r1, [r3, #0]
 800b162:	e7d7      	b.n	800b114 <_free_r+0x24>
 800b164:	d902      	bls.n	800b16c <_free_r+0x7c>
 800b166:	230c      	movs	r3, #12
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	e7d3      	b.n	800b114 <_free_r+0x24>
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	1821      	adds	r1, r4, r0
 800b170:	428a      	cmp	r2, r1
 800b172:	bf04      	itt	eq
 800b174:	6811      	ldreq	r1, [r2, #0]
 800b176:	6852      	ldreq	r2, [r2, #4]
 800b178:	6062      	str	r2, [r4, #4]
 800b17a:	bf04      	itt	eq
 800b17c:	1809      	addeq	r1, r1, r0
 800b17e:	6021      	streq	r1, [r4, #0]
 800b180:	605c      	str	r4, [r3, #4]
 800b182:	e7c7      	b.n	800b114 <_free_r+0x24>
 800b184:	bd38      	pop	{r3, r4, r5, pc}
 800b186:	bf00      	nop
 800b188:	2000405c 	.word	0x2000405c

0800b18c <_malloc_r>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	1ccd      	adds	r5, r1, #3
 800b190:	f025 0503 	bic.w	r5, r5, #3
 800b194:	3508      	adds	r5, #8
 800b196:	2d0c      	cmp	r5, #12
 800b198:	bf38      	it	cc
 800b19a:	250c      	movcc	r5, #12
 800b19c:	2d00      	cmp	r5, #0
 800b19e:	4606      	mov	r6, r0
 800b1a0:	db01      	blt.n	800b1a6 <_malloc_r+0x1a>
 800b1a2:	42a9      	cmp	r1, r5
 800b1a4:	d903      	bls.n	800b1ae <_malloc_r+0x22>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	6033      	str	r3, [r6, #0]
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	f000 f877 	bl	800b2a0 <__malloc_lock>
 800b1b2:	4a21      	ldr	r2, [pc, #132]	; (800b238 <_malloc_r+0xac>)
 800b1b4:	6814      	ldr	r4, [r2, #0]
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	b991      	cbnz	r1, 800b1e0 <_malloc_r+0x54>
 800b1ba:	4c20      	ldr	r4, [pc, #128]	; (800b23c <_malloc_r+0xb0>)
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	b91b      	cbnz	r3, 800b1c8 <_malloc_r+0x3c>
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f000 f83d 	bl	800b240 <_sbrk_r>
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f000 f838 	bl	800b240 <_sbrk_r>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d124      	bne.n	800b21e <_malloc_r+0x92>
 800b1d4:	230c      	movs	r3, #12
 800b1d6:	6033      	str	r3, [r6, #0]
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f000 f862 	bl	800b2a2 <__malloc_unlock>
 800b1de:	e7e4      	b.n	800b1aa <_malloc_r+0x1e>
 800b1e0:	680b      	ldr	r3, [r1, #0]
 800b1e2:	1b5b      	subs	r3, r3, r5
 800b1e4:	d418      	bmi.n	800b218 <_malloc_r+0x8c>
 800b1e6:	2b0b      	cmp	r3, #11
 800b1e8:	d90f      	bls.n	800b20a <_malloc_r+0x7e>
 800b1ea:	600b      	str	r3, [r1, #0]
 800b1ec:	50cd      	str	r5, [r1, r3]
 800b1ee:	18cc      	adds	r4, r1, r3
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f000 f856 	bl	800b2a2 <__malloc_unlock>
 800b1f6:	f104 000b 	add.w	r0, r4, #11
 800b1fa:	1d23      	adds	r3, r4, #4
 800b1fc:	f020 0007 	bic.w	r0, r0, #7
 800b200:	1ac3      	subs	r3, r0, r3
 800b202:	d0d3      	beq.n	800b1ac <_malloc_r+0x20>
 800b204:	425a      	negs	r2, r3
 800b206:	50e2      	str	r2, [r4, r3]
 800b208:	e7d0      	b.n	800b1ac <_malloc_r+0x20>
 800b20a:	428c      	cmp	r4, r1
 800b20c:	684b      	ldr	r3, [r1, #4]
 800b20e:	bf16      	itet	ne
 800b210:	6063      	strne	r3, [r4, #4]
 800b212:	6013      	streq	r3, [r2, #0]
 800b214:	460c      	movne	r4, r1
 800b216:	e7eb      	b.n	800b1f0 <_malloc_r+0x64>
 800b218:	460c      	mov	r4, r1
 800b21a:	6849      	ldr	r1, [r1, #4]
 800b21c:	e7cc      	b.n	800b1b8 <_malloc_r+0x2c>
 800b21e:	1cc4      	adds	r4, r0, #3
 800b220:	f024 0403 	bic.w	r4, r4, #3
 800b224:	42a0      	cmp	r0, r4
 800b226:	d005      	beq.n	800b234 <_malloc_r+0xa8>
 800b228:	1a21      	subs	r1, r4, r0
 800b22a:	4630      	mov	r0, r6
 800b22c:	f000 f808 	bl	800b240 <_sbrk_r>
 800b230:	3001      	adds	r0, #1
 800b232:	d0cf      	beq.n	800b1d4 <_malloc_r+0x48>
 800b234:	6025      	str	r5, [r4, #0]
 800b236:	e7db      	b.n	800b1f0 <_malloc_r+0x64>
 800b238:	2000405c 	.word	0x2000405c
 800b23c:	20004060 	.word	0x20004060

0800b240 <_sbrk_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4c06      	ldr	r4, [pc, #24]	; (800b25c <_sbrk_r+0x1c>)
 800b244:	2300      	movs	r3, #0
 800b246:	4605      	mov	r5, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	6023      	str	r3, [r4, #0]
 800b24c:	f7ff fb74 	bl	800a938 <_sbrk>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_sbrk_r+0x1a>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	b103      	cbz	r3, 800b25a <_sbrk_r+0x1a>
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20004844 	.word	0x20004844

0800b260 <siprintf>:
 800b260:	b40e      	push	{r1, r2, r3}
 800b262:	b500      	push	{lr}
 800b264:	b09c      	sub	sp, #112	; 0x70
 800b266:	ab1d      	add	r3, sp, #116	; 0x74
 800b268:	9002      	str	r0, [sp, #8]
 800b26a:	9006      	str	r0, [sp, #24]
 800b26c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b270:	4809      	ldr	r0, [pc, #36]	; (800b298 <siprintf+0x38>)
 800b272:	9107      	str	r1, [sp, #28]
 800b274:	9104      	str	r1, [sp, #16]
 800b276:	4909      	ldr	r1, [pc, #36]	; (800b29c <siprintf+0x3c>)
 800b278:	f853 2b04 	ldr.w	r2, [r3], #4
 800b27c:	9105      	str	r1, [sp, #20]
 800b27e:	6800      	ldr	r0, [r0, #0]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	a902      	add	r1, sp, #8
 800b284:	f000 f868 	bl	800b358 <_svfiprintf_r>
 800b288:	9b02      	ldr	r3, [sp, #8]
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	b01c      	add	sp, #112	; 0x70
 800b290:	f85d eb04 	ldr.w	lr, [sp], #4
 800b294:	b003      	add	sp, #12
 800b296:	4770      	bx	lr
 800b298:	20000030 	.word	0x20000030
 800b29c:	ffff0208 	.word	0xffff0208

0800b2a0 <__malloc_lock>:
 800b2a0:	4770      	bx	lr

0800b2a2 <__malloc_unlock>:
 800b2a2:	4770      	bx	lr

0800b2a4 <__ssputs_r>:
 800b2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a8:	688e      	ldr	r6, [r1, #8]
 800b2aa:	429e      	cmp	r6, r3
 800b2ac:	4682      	mov	sl, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4690      	mov	r8, r2
 800b2b2:	4699      	mov	r9, r3
 800b2b4:	d837      	bhi.n	800b326 <__ssputs_r+0x82>
 800b2b6:	898a      	ldrh	r2, [r1, #12]
 800b2b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2bc:	d031      	beq.n	800b322 <__ssputs_r+0x7e>
 800b2be:	6825      	ldr	r5, [r4, #0]
 800b2c0:	6909      	ldr	r1, [r1, #16]
 800b2c2:	1a6f      	subs	r7, r5, r1
 800b2c4:	6965      	ldr	r5, [r4, #20]
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800b2d0:	f109 0301 	add.w	r3, r9, #1
 800b2d4:	443b      	add	r3, r7
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	bf38      	it	cc
 800b2da:	461d      	movcc	r5, r3
 800b2dc:	0553      	lsls	r3, r2, #21
 800b2de:	d530      	bpl.n	800b342 <__ssputs_r+0x9e>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7ff ff53 	bl	800b18c <_malloc_r>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	b950      	cbnz	r0, 800b300 <__ssputs_r+0x5c>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	f8ca 3000 	str.w	r3, [sl]
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	463a      	mov	r2, r7
 800b302:	6921      	ldr	r1, [r4, #16]
 800b304:	f7ff fee0 	bl	800b0c8 <memcpy>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	6126      	str	r6, [r4, #16]
 800b316:	6165      	str	r5, [r4, #20]
 800b318:	443e      	add	r6, r7
 800b31a:	1bed      	subs	r5, r5, r7
 800b31c:	6026      	str	r6, [r4, #0]
 800b31e:	60a5      	str	r5, [r4, #8]
 800b320:	464e      	mov	r6, r9
 800b322:	454e      	cmp	r6, r9
 800b324:	d900      	bls.n	800b328 <__ssputs_r+0x84>
 800b326:	464e      	mov	r6, r9
 800b328:	4632      	mov	r2, r6
 800b32a:	4641      	mov	r1, r8
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	f000 fa93 	bl	800b858 <memmove>
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	1b9b      	subs	r3, r3, r6
 800b336:	60a3      	str	r3, [r4, #8]
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	441e      	add	r6, r3
 800b33c:	6026      	str	r6, [r4, #0]
 800b33e:	2000      	movs	r0, #0
 800b340:	e7dc      	b.n	800b2fc <__ssputs_r+0x58>
 800b342:	462a      	mov	r2, r5
 800b344:	f000 faa1 	bl	800b88a <_realloc_r>
 800b348:	4606      	mov	r6, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d1e2      	bne.n	800b314 <__ssputs_r+0x70>
 800b34e:	6921      	ldr	r1, [r4, #16]
 800b350:	4650      	mov	r0, sl
 800b352:	f7ff fecd 	bl	800b0f0 <_free_r>
 800b356:	e7c8      	b.n	800b2ea <__ssputs_r+0x46>

0800b358 <_svfiprintf_r>:
 800b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	461d      	mov	r5, r3
 800b35e:	898b      	ldrh	r3, [r1, #12]
 800b360:	061f      	lsls	r7, r3, #24
 800b362:	b09d      	sub	sp, #116	; 0x74
 800b364:	4680      	mov	r8, r0
 800b366:	460c      	mov	r4, r1
 800b368:	4616      	mov	r6, r2
 800b36a:	d50f      	bpl.n	800b38c <_svfiprintf_r+0x34>
 800b36c:	690b      	ldr	r3, [r1, #16]
 800b36e:	b96b      	cbnz	r3, 800b38c <_svfiprintf_r+0x34>
 800b370:	2140      	movs	r1, #64	; 0x40
 800b372:	f7ff ff0b 	bl	800b18c <_malloc_r>
 800b376:	6020      	str	r0, [r4, #0]
 800b378:	6120      	str	r0, [r4, #16]
 800b37a:	b928      	cbnz	r0, 800b388 <_svfiprintf_r+0x30>
 800b37c:	230c      	movs	r3, #12
 800b37e:	f8c8 3000 	str.w	r3, [r8]
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	e0c8      	b.n	800b51a <_svfiprintf_r+0x1c2>
 800b388:	2340      	movs	r3, #64	; 0x40
 800b38a:	6163      	str	r3, [r4, #20]
 800b38c:	2300      	movs	r3, #0
 800b38e:	9309      	str	r3, [sp, #36]	; 0x24
 800b390:	2320      	movs	r3, #32
 800b392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b396:	2330      	movs	r3, #48	; 0x30
 800b398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b39c:	9503      	str	r5, [sp, #12]
 800b39e:	f04f 0b01 	mov.w	fp, #1
 800b3a2:	4637      	mov	r7, r6
 800b3a4:	463d      	mov	r5, r7
 800b3a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3aa:	b10b      	cbz	r3, 800b3b0 <_svfiprintf_r+0x58>
 800b3ac:	2b25      	cmp	r3, #37	; 0x25
 800b3ae:	d13e      	bne.n	800b42e <_svfiprintf_r+0xd6>
 800b3b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800b3b4:	d00b      	beq.n	800b3ce <_svfiprintf_r+0x76>
 800b3b6:	4653      	mov	r3, sl
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4640      	mov	r0, r8
 800b3be:	f7ff ff71 	bl	800b2a4 <__ssputs_r>
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f000 80a4 	beq.w	800b510 <_svfiprintf_r+0x1b8>
 800b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ca:	4453      	add	r3, sl
 800b3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ce:	783b      	ldrb	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 809d 	beq.w	800b510 <_svfiprintf_r+0x1b8>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	9307      	str	r3, [sp, #28]
 800b3e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ea:	462f      	mov	r7, r5
 800b3ec:	2205      	movs	r2, #5
 800b3ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b3f2:	4850      	ldr	r0, [pc, #320]	; (800b534 <_svfiprintf_r+0x1dc>)
 800b3f4:	f7f4 feec 	bl	80001d0 <memchr>
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	b9d0      	cbnz	r0, 800b432 <_svfiprintf_r+0xda>
 800b3fc:	06d9      	lsls	r1, r3, #27
 800b3fe:	bf44      	itt	mi
 800b400:	2220      	movmi	r2, #32
 800b402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b406:	071a      	lsls	r2, r3, #28
 800b408:	bf44      	itt	mi
 800b40a:	222b      	movmi	r2, #43	; 0x2b
 800b40c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b410:	782a      	ldrb	r2, [r5, #0]
 800b412:	2a2a      	cmp	r2, #42	; 0x2a
 800b414:	d015      	beq.n	800b442 <_svfiprintf_r+0xea>
 800b416:	9a07      	ldr	r2, [sp, #28]
 800b418:	462f      	mov	r7, r5
 800b41a:	2000      	movs	r0, #0
 800b41c:	250a      	movs	r5, #10
 800b41e:	4639      	mov	r1, r7
 800b420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b424:	3b30      	subs	r3, #48	; 0x30
 800b426:	2b09      	cmp	r3, #9
 800b428:	d94d      	bls.n	800b4c6 <_svfiprintf_r+0x16e>
 800b42a:	b1b8      	cbz	r0, 800b45c <_svfiprintf_r+0x104>
 800b42c:	e00f      	b.n	800b44e <_svfiprintf_r+0xf6>
 800b42e:	462f      	mov	r7, r5
 800b430:	e7b8      	b.n	800b3a4 <_svfiprintf_r+0x4c>
 800b432:	4a40      	ldr	r2, [pc, #256]	; (800b534 <_svfiprintf_r+0x1dc>)
 800b434:	1a80      	subs	r0, r0, r2
 800b436:	fa0b f000 	lsl.w	r0, fp, r0
 800b43a:	4318      	orrs	r0, r3
 800b43c:	9004      	str	r0, [sp, #16]
 800b43e:	463d      	mov	r5, r7
 800b440:	e7d3      	b.n	800b3ea <_svfiprintf_r+0x92>
 800b442:	9a03      	ldr	r2, [sp, #12]
 800b444:	1d11      	adds	r1, r2, #4
 800b446:	6812      	ldr	r2, [r2, #0]
 800b448:	9103      	str	r1, [sp, #12]
 800b44a:	2a00      	cmp	r2, #0
 800b44c:	db01      	blt.n	800b452 <_svfiprintf_r+0xfa>
 800b44e:	9207      	str	r2, [sp, #28]
 800b450:	e004      	b.n	800b45c <_svfiprintf_r+0x104>
 800b452:	4252      	negs	r2, r2
 800b454:	f043 0302 	orr.w	r3, r3, #2
 800b458:	9207      	str	r2, [sp, #28]
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	783b      	ldrb	r3, [r7, #0]
 800b45e:	2b2e      	cmp	r3, #46	; 0x2e
 800b460:	d10c      	bne.n	800b47c <_svfiprintf_r+0x124>
 800b462:	787b      	ldrb	r3, [r7, #1]
 800b464:	2b2a      	cmp	r3, #42	; 0x2a
 800b466:	d133      	bne.n	800b4d0 <_svfiprintf_r+0x178>
 800b468:	9b03      	ldr	r3, [sp, #12]
 800b46a:	1d1a      	adds	r2, r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	9203      	str	r2, [sp, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	bfb8      	it	lt
 800b474:	f04f 33ff 	movlt.w	r3, #4294967295
 800b478:	3702      	adds	r7, #2
 800b47a:	9305      	str	r3, [sp, #20]
 800b47c:	4d2e      	ldr	r5, [pc, #184]	; (800b538 <_svfiprintf_r+0x1e0>)
 800b47e:	7839      	ldrb	r1, [r7, #0]
 800b480:	2203      	movs	r2, #3
 800b482:	4628      	mov	r0, r5
 800b484:	f7f4 fea4 	bl	80001d0 <memchr>
 800b488:	b138      	cbz	r0, 800b49a <_svfiprintf_r+0x142>
 800b48a:	2340      	movs	r3, #64	; 0x40
 800b48c:	1b40      	subs	r0, r0, r5
 800b48e:	fa03 f000 	lsl.w	r0, r3, r0
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	4303      	orrs	r3, r0
 800b496:	3701      	adds	r7, #1
 800b498:	9304      	str	r3, [sp, #16]
 800b49a:	7839      	ldrb	r1, [r7, #0]
 800b49c:	4827      	ldr	r0, [pc, #156]	; (800b53c <_svfiprintf_r+0x1e4>)
 800b49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4a2:	2206      	movs	r2, #6
 800b4a4:	1c7e      	adds	r6, r7, #1
 800b4a6:	f7f4 fe93 	bl	80001d0 <memchr>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d038      	beq.n	800b520 <_svfiprintf_r+0x1c8>
 800b4ae:	4b24      	ldr	r3, [pc, #144]	; (800b540 <_svfiprintf_r+0x1e8>)
 800b4b0:	bb13      	cbnz	r3, 800b4f8 <_svfiprintf_r+0x1a0>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	3307      	adds	r3, #7
 800b4b6:	f023 0307 	bic.w	r3, r3, #7
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	9303      	str	r3, [sp, #12]
 800b4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c0:	444b      	add	r3, r9
 800b4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c4:	e76d      	b.n	800b3a2 <_svfiprintf_r+0x4a>
 800b4c6:	fb05 3202 	mla	r2, r5, r2, r3
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	e7a6      	b.n	800b41e <_svfiprintf_r+0xc6>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	3701      	adds	r7, #1
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	250a      	movs	r5, #10
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4e0:	3a30      	subs	r2, #48	; 0x30
 800b4e2:	2a09      	cmp	r2, #9
 800b4e4:	d903      	bls.n	800b4ee <_svfiprintf_r+0x196>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0c8      	beq.n	800b47c <_svfiprintf_r+0x124>
 800b4ea:	9105      	str	r1, [sp, #20]
 800b4ec:	e7c6      	b.n	800b47c <_svfiprintf_r+0x124>
 800b4ee:	fb05 2101 	mla	r1, r5, r1, r2
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	e7f0      	b.n	800b4da <_svfiprintf_r+0x182>
 800b4f8:	ab03      	add	r3, sp, #12
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	4b11      	ldr	r3, [pc, #68]	; (800b544 <_svfiprintf_r+0x1ec>)
 800b500:	a904      	add	r1, sp, #16
 800b502:	4640      	mov	r0, r8
 800b504:	f3af 8000 	nop.w
 800b508:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b50c:	4681      	mov	r9, r0
 800b50e:	d1d6      	bne.n	800b4be <_svfiprintf_r+0x166>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	065b      	lsls	r3, r3, #25
 800b514:	f53f af35 	bmi.w	800b382 <_svfiprintf_r+0x2a>
 800b518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b51a:	b01d      	add	sp, #116	; 0x74
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4622      	mov	r2, r4
 800b526:	4b07      	ldr	r3, [pc, #28]	; (800b544 <_svfiprintf_r+0x1ec>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	4640      	mov	r0, r8
 800b52c:	f000 f882 	bl	800b634 <_printf_i>
 800b530:	e7ea      	b.n	800b508 <_svfiprintf_r+0x1b0>
 800b532:	bf00      	nop
 800b534:	0800b9d4 	.word	0x0800b9d4
 800b538:	0800b9da 	.word	0x0800b9da
 800b53c:	0800b9de 	.word	0x0800b9de
 800b540:	00000000 	.word	0x00000000
 800b544:	0800b2a5 	.word	0x0800b2a5

0800b548 <_printf_common>:
 800b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	4691      	mov	r9, r2
 800b54e:	461f      	mov	r7, r3
 800b550:	688a      	ldr	r2, [r1, #8]
 800b552:	690b      	ldr	r3, [r1, #16]
 800b554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b558:	4293      	cmp	r3, r2
 800b55a:	bfb8      	it	lt
 800b55c:	4613      	movlt	r3, r2
 800b55e:	f8c9 3000 	str.w	r3, [r9]
 800b562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b566:	4606      	mov	r6, r0
 800b568:	460c      	mov	r4, r1
 800b56a:	b112      	cbz	r2, 800b572 <_printf_common+0x2a>
 800b56c:	3301      	adds	r3, #1
 800b56e:	f8c9 3000 	str.w	r3, [r9]
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	0699      	lsls	r1, r3, #26
 800b576:	bf42      	ittt	mi
 800b578:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b57c:	3302      	addmi	r3, #2
 800b57e:	f8c9 3000 	strmi.w	r3, [r9]
 800b582:	6825      	ldr	r5, [r4, #0]
 800b584:	f015 0506 	ands.w	r5, r5, #6
 800b588:	d107      	bne.n	800b59a <_printf_common+0x52>
 800b58a:	f104 0a19 	add.w	sl, r4, #25
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	f8d9 2000 	ldr.w	r2, [r9]
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	42ab      	cmp	r3, r5
 800b598:	dc28      	bgt.n	800b5ec <_printf_common+0xa4>
 800b59a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	3300      	adds	r3, #0
 800b5a2:	bf18      	it	ne
 800b5a4:	2301      	movne	r3, #1
 800b5a6:	0692      	lsls	r2, r2, #26
 800b5a8:	d42d      	bmi.n	800b606 <_printf_common+0xbe>
 800b5aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	47c0      	blx	r8
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d020      	beq.n	800b5fa <_printf_common+0xb2>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	68e5      	ldr	r5, [r4, #12]
 800b5bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b5c0:	f003 0306 	and.w	r3, r3, #6
 800b5c4:	2b04      	cmp	r3, #4
 800b5c6:	bf08      	it	eq
 800b5c8:	1aad      	subeq	r5, r5, r2
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	6922      	ldr	r2, [r4, #16]
 800b5ce:	bf0c      	ite	eq
 800b5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5d4:	2500      	movne	r5, #0
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	bfc4      	itt	gt
 800b5da:	1a9b      	subgt	r3, r3, r2
 800b5dc:	18ed      	addgt	r5, r5, r3
 800b5de:	f04f 0900 	mov.w	r9, #0
 800b5e2:	341a      	adds	r4, #26
 800b5e4:	454d      	cmp	r5, r9
 800b5e6:	d11a      	bne.n	800b61e <_printf_common+0xd6>
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e008      	b.n	800b5fe <_printf_common+0xb6>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	47c0      	blx	r8
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d103      	bne.n	800b602 <_printf_common+0xba>
 800b5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b602:	3501      	adds	r5, #1
 800b604:	e7c3      	b.n	800b58e <_printf_common+0x46>
 800b606:	18e1      	adds	r1, r4, r3
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	2030      	movs	r0, #48	; 0x30
 800b60c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b610:	4422      	add	r2, r4
 800b612:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b616:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b61a:	3302      	adds	r3, #2
 800b61c:	e7c5      	b.n	800b5aa <_printf_common+0x62>
 800b61e:	2301      	movs	r3, #1
 800b620:	4622      	mov	r2, r4
 800b622:	4639      	mov	r1, r7
 800b624:	4630      	mov	r0, r6
 800b626:	47c0      	blx	r8
 800b628:	3001      	adds	r0, #1
 800b62a:	d0e6      	beq.n	800b5fa <_printf_common+0xb2>
 800b62c:	f109 0901 	add.w	r9, r9, #1
 800b630:	e7d8      	b.n	800b5e4 <_printf_common+0x9c>
	...

0800b634 <_printf_i>:
 800b634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b638:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b63c:	460c      	mov	r4, r1
 800b63e:	7e09      	ldrb	r1, [r1, #24]
 800b640:	b085      	sub	sp, #20
 800b642:	296e      	cmp	r1, #110	; 0x6e
 800b644:	4617      	mov	r7, r2
 800b646:	4606      	mov	r6, r0
 800b648:	4698      	mov	r8, r3
 800b64a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b64c:	f000 80b3 	beq.w	800b7b6 <_printf_i+0x182>
 800b650:	d822      	bhi.n	800b698 <_printf_i+0x64>
 800b652:	2963      	cmp	r1, #99	; 0x63
 800b654:	d036      	beq.n	800b6c4 <_printf_i+0x90>
 800b656:	d80a      	bhi.n	800b66e <_printf_i+0x3a>
 800b658:	2900      	cmp	r1, #0
 800b65a:	f000 80b9 	beq.w	800b7d0 <_printf_i+0x19c>
 800b65e:	2958      	cmp	r1, #88	; 0x58
 800b660:	f000 8083 	beq.w	800b76a <_printf_i+0x136>
 800b664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b668:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b66c:	e032      	b.n	800b6d4 <_printf_i+0xa0>
 800b66e:	2964      	cmp	r1, #100	; 0x64
 800b670:	d001      	beq.n	800b676 <_printf_i+0x42>
 800b672:	2969      	cmp	r1, #105	; 0x69
 800b674:	d1f6      	bne.n	800b664 <_printf_i+0x30>
 800b676:	6820      	ldr	r0, [r4, #0]
 800b678:	6813      	ldr	r3, [r2, #0]
 800b67a:	0605      	lsls	r5, r0, #24
 800b67c:	f103 0104 	add.w	r1, r3, #4
 800b680:	d52a      	bpl.n	800b6d8 <_printf_i+0xa4>
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	da03      	bge.n	800b692 <_printf_i+0x5e>
 800b68a:	222d      	movs	r2, #45	; 0x2d
 800b68c:	425b      	negs	r3, r3
 800b68e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b692:	486f      	ldr	r0, [pc, #444]	; (800b850 <_printf_i+0x21c>)
 800b694:	220a      	movs	r2, #10
 800b696:	e039      	b.n	800b70c <_printf_i+0xd8>
 800b698:	2973      	cmp	r1, #115	; 0x73
 800b69a:	f000 809d 	beq.w	800b7d8 <_printf_i+0x1a4>
 800b69e:	d808      	bhi.n	800b6b2 <_printf_i+0x7e>
 800b6a0:	296f      	cmp	r1, #111	; 0x6f
 800b6a2:	d020      	beq.n	800b6e6 <_printf_i+0xb2>
 800b6a4:	2970      	cmp	r1, #112	; 0x70
 800b6a6:	d1dd      	bne.n	800b664 <_printf_i+0x30>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	f043 0320 	orr.w	r3, r3, #32
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	e003      	b.n	800b6ba <_printf_i+0x86>
 800b6b2:	2975      	cmp	r1, #117	; 0x75
 800b6b4:	d017      	beq.n	800b6e6 <_printf_i+0xb2>
 800b6b6:	2978      	cmp	r1, #120	; 0x78
 800b6b8:	d1d4      	bne.n	800b664 <_printf_i+0x30>
 800b6ba:	2378      	movs	r3, #120	; 0x78
 800b6bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6c0:	4864      	ldr	r0, [pc, #400]	; (800b854 <_printf_i+0x220>)
 800b6c2:	e055      	b.n	800b770 <_printf_i+0x13c>
 800b6c4:	6813      	ldr	r3, [r2, #0]
 800b6c6:	1d19      	adds	r1, r3, #4
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6011      	str	r1, [r2, #0]
 800b6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e08c      	b.n	800b7f2 <_printf_i+0x1be>
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6011      	str	r1, [r2, #0]
 800b6dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6e0:	bf18      	it	ne
 800b6e2:	b21b      	sxthne	r3, r3
 800b6e4:	e7cf      	b.n	800b686 <_printf_i+0x52>
 800b6e6:	6813      	ldr	r3, [r2, #0]
 800b6e8:	6825      	ldr	r5, [r4, #0]
 800b6ea:	1d18      	adds	r0, r3, #4
 800b6ec:	6010      	str	r0, [r2, #0]
 800b6ee:	0628      	lsls	r0, r5, #24
 800b6f0:	d501      	bpl.n	800b6f6 <_printf_i+0xc2>
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	e002      	b.n	800b6fc <_printf_i+0xc8>
 800b6f6:	0668      	lsls	r0, r5, #25
 800b6f8:	d5fb      	bpl.n	800b6f2 <_printf_i+0xbe>
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	4854      	ldr	r0, [pc, #336]	; (800b850 <_printf_i+0x21c>)
 800b6fe:	296f      	cmp	r1, #111	; 0x6f
 800b700:	bf14      	ite	ne
 800b702:	220a      	movne	r2, #10
 800b704:	2208      	moveq	r2, #8
 800b706:	2100      	movs	r1, #0
 800b708:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b70c:	6865      	ldr	r5, [r4, #4]
 800b70e:	60a5      	str	r5, [r4, #8]
 800b710:	2d00      	cmp	r5, #0
 800b712:	f2c0 8095 	blt.w	800b840 <_printf_i+0x20c>
 800b716:	6821      	ldr	r1, [r4, #0]
 800b718:	f021 0104 	bic.w	r1, r1, #4
 800b71c:	6021      	str	r1, [r4, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d13d      	bne.n	800b79e <_printf_i+0x16a>
 800b722:	2d00      	cmp	r5, #0
 800b724:	f040 808e 	bne.w	800b844 <_printf_i+0x210>
 800b728:	4665      	mov	r5, ip
 800b72a:	2a08      	cmp	r2, #8
 800b72c:	d10b      	bne.n	800b746 <_printf_i+0x112>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	07db      	lsls	r3, r3, #31
 800b732:	d508      	bpl.n	800b746 <_printf_i+0x112>
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	6862      	ldr	r2, [r4, #4]
 800b738:	429a      	cmp	r2, r3
 800b73a:	bfde      	ittt	le
 800b73c:	2330      	movle	r3, #48	; 0x30
 800b73e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b742:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b746:	ebac 0305 	sub.w	r3, ip, r5
 800b74a:	6123      	str	r3, [r4, #16]
 800b74c:	f8cd 8000 	str.w	r8, [sp]
 800b750:	463b      	mov	r3, r7
 800b752:	aa03      	add	r2, sp, #12
 800b754:	4621      	mov	r1, r4
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff fef6 	bl	800b548 <_printf_common>
 800b75c:	3001      	adds	r0, #1
 800b75e:	d14d      	bne.n	800b7fc <_printf_i+0x1c8>
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	b005      	add	sp, #20
 800b766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b76a:	4839      	ldr	r0, [pc, #228]	; (800b850 <_printf_i+0x21c>)
 800b76c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b770:	6813      	ldr	r3, [r2, #0]
 800b772:	6821      	ldr	r1, [r4, #0]
 800b774:	1d1d      	adds	r5, r3, #4
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6015      	str	r5, [r2, #0]
 800b77a:	060a      	lsls	r2, r1, #24
 800b77c:	d50b      	bpl.n	800b796 <_printf_i+0x162>
 800b77e:	07ca      	lsls	r2, r1, #31
 800b780:	bf44      	itt	mi
 800b782:	f041 0120 	orrmi.w	r1, r1, #32
 800b786:	6021      	strmi	r1, [r4, #0]
 800b788:	b91b      	cbnz	r3, 800b792 <_printf_i+0x15e>
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	f022 0220 	bic.w	r2, r2, #32
 800b790:	6022      	str	r2, [r4, #0]
 800b792:	2210      	movs	r2, #16
 800b794:	e7b7      	b.n	800b706 <_printf_i+0xd2>
 800b796:	064d      	lsls	r5, r1, #25
 800b798:	bf48      	it	mi
 800b79a:	b29b      	uxthmi	r3, r3
 800b79c:	e7ef      	b.n	800b77e <_printf_i+0x14a>
 800b79e:	4665      	mov	r5, ip
 800b7a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7a4:	fb02 3311 	mls	r3, r2, r1, r3
 800b7a8:	5cc3      	ldrb	r3, [r0, r3]
 800b7aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	d1f5      	bne.n	800b7a0 <_printf_i+0x16c>
 800b7b4:	e7b9      	b.n	800b72a <_printf_i+0xf6>
 800b7b6:	6813      	ldr	r3, [r2, #0]
 800b7b8:	6825      	ldr	r5, [r4, #0]
 800b7ba:	6961      	ldr	r1, [r4, #20]
 800b7bc:	1d18      	adds	r0, r3, #4
 800b7be:	6010      	str	r0, [r2, #0]
 800b7c0:	0628      	lsls	r0, r5, #24
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	d501      	bpl.n	800b7ca <_printf_i+0x196>
 800b7c6:	6019      	str	r1, [r3, #0]
 800b7c8:	e002      	b.n	800b7d0 <_printf_i+0x19c>
 800b7ca:	066a      	lsls	r2, r5, #25
 800b7cc:	d5fb      	bpl.n	800b7c6 <_printf_i+0x192>
 800b7ce:	8019      	strh	r1, [r3, #0]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	4665      	mov	r5, ip
 800b7d6:	e7b9      	b.n	800b74c <_printf_i+0x118>
 800b7d8:	6813      	ldr	r3, [r2, #0]
 800b7da:	1d19      	adds	r1, r3, #4
 800b7dc:	6011      	str	r1, [r2, #0]
 800b7de:	681d      	ldr	r5, [r3, #0]
 800b7e0:	6862      	ldr	r2, [r4, #4]
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	f7f4 fcf3 	bl	80001d0 <memchr>
 800b7ea:	b108      	cbz	r0, 800b7f0 <_printf_i+0x1bc>
 800b7ec:	1b40      	subs	r0, r0, r5
 800b7ee:	6060      	str	r0, [r4, #4]
 800b7f0:	6863      	ldr	r3, [r4, #4]
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7fa:	e7a7      	b.n	800b74c <_printf_i+0x118>
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	462a      	mov	r2, r5
 800b800:	4639      	mov	r1, r7
 800b802:	4630      	mov	r0, r6
 800b804:	47c0      	blx	r8
 800b806:	3001      	adds	r0, #1
 800b808:	d0aa      	beq.n	800b760 <_printf_i+0x12c>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	079b      	lsls	r3, r3, #30
 800b80e:	d413      	bmi.n	800b838 <_printf_i+0x204>
 800b810:	68e0      	ldr	r0, [r4, #12]
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	4298      	cmp	r0, r3
 800b816:	bfb8      	it	lt
 800b818:	4618      	movlt	r0, r3
 800b81a:	e7a3      	b.n	800b764 <_printf_i+0x130>
 800b81c:	2301      	movs	r3, #1
 800b81e:	464a      	mov	r2, r9
 800b820:	4639      	mov	r1, r7
 800b822:	4630      	mov	r0, r6
 800b824:	47c0      	blx	r8
 800b826:	3001      	adds	r0, #1
 800b828:	d09a      	beq.n	800b760 <_printf_i+0x12c>
 800b82a:	3501      	adds	r5, #1
 800b82c:	68e3      	ldr	r3, [r4, #12]
 800b82e:	9a03      	ldr	r2, [sp, #12]
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	42ab      	cmp	r3, r5
 800b834:	dcf2      	bgt.n	800b81c <_printf_i+0x1e8>
 800b836:	e7eb      	b.n	800b810 <_printf_i+0x1dc>
 800b838:	2500      	movs	r5, #0
 800b83a:	f104 0919 	add.w	r9, r4, #25
 800b83e:	e7f5      	b.n	800b82c <_printf_i+0x1f8>
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1ac      	bne.n	800b79e <_printf_i+0x16a>
 800b844:	7803      	ldrb	r3, [r0, #0]
 800b846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b84a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b84e:	e76c      	b.n	800b72a <_printf_i+0xf6>
 800b850:	0800b9e5 	.word	0x0800b9e5
 800b854:	0800b9f6 	.word	0x0800b9f6

0800b858 <memmove>:
 800b858:	4288      	cmp	r0, r1
 800b85a:	b510      	push	{r4, lr}
 800b85c:	eb01 0302 	add.w	r3, r1, r2
 800b860:	d807      	bhi.n	800b872 <memmove+0x1a>
 800b862:	1e42      	subs	r2, r0, #1
 800b864:	4299      	cmp	r1, r3
 800b866:	d00a      	beq.n	800b87e <memmove+0x26>
 800b868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b86c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b870:	e7f8      	b.n	800b864 <memmove+0xc>
 800b872:	4283      	cmp	r3, r0
 800b874:	d9f5      	bls.n	800b862 <memmove+0xa>
 800b876:	1881      	adds	r1, r0, r2
 800b878:	1ad2      	subs	r2, r2, r3
 800b87a:	42d3      	cmn	r3, r2
 800b87c:	d100      	bne.n	800b880 <memmove+0x28>
 800b87e:	bd10      	pop	{r4, pc}
 800b880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b884:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b888:	e7f7      	b.n	800b87a <memmove+0x22>

0800b88a <_realloc_r>:
 800b88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88c:	4607      	mov	r7, r0
 800b88e:	4614      	mov	r4, r2
 800b890:	460e      	mov	r6, r1
 800b892:	b921      	cbnz	r1, 800b89e <_realloc_r+0x14>
 800b894:	4611      	mov	r1, r2
 800b896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b89a:	f7ff bc77 	b.w	800b18c <_malloc_r>
 800b89e:	b922      	cbnz	r2, 800b8aa <_realloc_r+0x20>
 800b8a0:	f7ff fc26 	bl	800b0f0 <_free_r>
 800b8a4:	4625      	mov	r5, r4
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8aa:	f000 f814 	bl	800b8d6 <_malloc_usable_size_r>
 800b8ae:	42a0      	cmp	r0, r4
 800b8b0:	d20f      	bcs.n	800b8d2 <_realloc_r+0x48>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	f7ff fc69 	bl	800b18c <_malloc_r>
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d0f2      	beq.n	800b8a6 <_realloc_r+0x1c>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	f7ff fc00 	bl	800b0c8 <memcpy>
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7ff fc10 	bl	800b0f0 <_free_r>
 800b8d0:	e7e9      	b.n	800b8a6 <_realloc_r+0x1c>
 800b8d2:	4635      	mov	r5, r6
 800b8d4:	e7e7      	b.n	800b8a6 <_realloc_r+0x1c>

0800b8d6 <_malloc_usable_size_r>:
 800b8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8da:	1f18      	subs	r0, r3, #4
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	bfbc      	itt	lt
 800b8e0:	580b      	ldrlt	r3, [r1, r0]
 800b8e2:	18c0      	addlt	r0, r0, r3
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <_init>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	bf00      	nop
 800b8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ee:	bc08      	pop	{r3}
 800b8f0:	469e      	mov	lr, r3
 800b8f2:	4770      	bx	lr

0800b8f4 <_fini>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	bf00      	nop
 800b8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fa:	bc08      	pop	{r3}
 800b8fc:	469e      	mov	lr, r3
 800b8fe:	4770      	bx	lr
